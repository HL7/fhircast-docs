{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FHIRcast - modern, simple application context synchronization Overview FHIRcast synchronizes healthcare applications in real time to show the same clinical content to a common user. For example, a radiologist often works in three disparate applications at the same time (a radiology information system, a PACS and a dictation system), she wants each of these three systems to display the same study or patient at the same time. FHIRcast isn't limited to radiology use-cases. Modeled after the common webhook design pattern and specifically WebSub , FHIRcast naturally extends the SMART on FHIR launch protocol to achieve tight integration between disparate, full-featured applications. FHIRcast builds on the CCOW abstract model to specify an http-based and simple context synchronization specification that doesn't require a separate context manager. FHIRcast is intended to be both less sophisticated, and more implementer-friendly than CCOW and therefore is not a one-to-one replacement of CCOW, although it solves many of the same problems. Adopting the WebSub terminology, FHIRcast describes an app as a subscriber synchronizing with an EHR in the role of a Hub, but any user-facing application can synchronize with FHIRcast. While less common, bidirectional communication between multiple applications is also possible. Why? The large number of vendor-specific or proprietary context synchronization methods in production limit the industry's ability to enhance the very large number of integrations currently in production. In practice, these integrations are decentralized and simple. How it works The driving application could be an EHR, a PACS, a worklist or any other clinical workflow system. The driving application integrates the Hub, the SMART authorization server and a FHIR server. As part of a SMART launch, the app requests appropriate fhircast OAuth 2.0 scopes and receives the initial shared context as well as the location of the Hub and a unique hub.topic session identifier. The app subscribes to specific workflow events for the given user's session by contacting the Hub. The Hub verifies the subscription notifies the app when those workflow events occur; for example, by the clinician opening a patient's chart. The app deletes its subscription when it no longer wants to receive notifications. Example scenario A radiologist working in their reporting system clicks a button to open their dictation system. The dictation app is authorized and subscribes to the radiologist's session. Each time the radiologist opens a patient's chart in the reporting system, the dictation app will be notified of the current patient and therefore presents the corresponding patient information on its own UI. The reporting system and dictation app share the same session's context. Event notifications are thin json wrappers around FHIR resources. The app can request context changes by sending an event notification to the Hub's hub.topic session identifier. The HTTP response status indicates success or failure. The Event Catalog documents the workflow events that can be communicated in FHIRcast. Each event will always carry the same type of FHIR resources. Get involved Check out our awesome community contributions on github Log issues , submit a PR! Converse at chat.fhir.org","title":"Home"},{"location":"#fhircast-modern-simple-application-context-synchronization","text":"","title":"FHIRcast - modern, simple application context synchronization"},{"location":"#overview","text":"FHIRcast synchronizes healthcare applications in real time to show the same clinical content to a common user. For example, a radiologist often works in three disparate applications at the same time (a radiology information system, a PACS and a dictation system), she wants each of these three systems to display the same study or patient at the same time. FHIRcast isn't limited to radiology use-cases. Modeled after the common webhook design pattern and specifically WebSub , FHIRcast naturally extends the SMART on FHIR launch protocol to achieve tight integration between disparate, full-featured applications. FHIRcast builds on the CCOW abstract model to specify an http-based and simple context synchronization specification that doesn't require a separate context manager. FHIRcast is intended to be both less sophisticated, and more implementer-friendly than CCOW and therefore is not a one-to-one replacement of CCOW, although it solves many of the same problems. Adopting the WebSub terminology, FHIRcast describes an app as a subscriber synchronizing with an EHR in the role of a Hub, but any user-facing application can synchronize with FHIRcast. While less common, bidirectional communication between multiple applications is also possible.","title":"Overview"},{"location":"#why","text":"The large number of vendor-specific or proprietary context synchronization methods in production limit the industry's ability to enhance the very large number of integrations currently in production. In practice, these integrations are decentralized and simple.","title":"Why?"},{"location":"#how-it-works","text":"The driving application could be an EHR, a PACS, a worklist or any other clinical workflow system. The driving application integrates the Hub, the SMART authorization server and a FHIR server. As part of a SMART launch, the app requests appropriate fhircast OAuth 2.0 scopes and receives the initial shared context as well as the location of the Hub and a unique hub.topic session identifier. The app subscribes to specific workflow events for the given user's session by contacting the Hub. The Hub verifies the subscription notifies the app when those workflow events occur; for example, by the clinician opening a patient's chart. The app deletes its subscription when it no longer wants to receive notifications.","title":"How it works"},{"location":"#example-scenario","text":"A radiologist working in their reporting system clicks a button to open their dictation system. The dictation app is authorized and subscribes to the radiologist's session. Each time the radiologist opens a patient's chart in the reporting system, the dictation app will be notified of the current patient and therefore presents the corresponding patient information on its own UI. The reporting system and dictation app share the same session's context. Event notifications are thin json wrappers around FHIR resources. The app can request context changes by sending an event notification to the Hub's hub.topic session identifier. The HTTP response status indicates success or failure. The Event Catalog documents the workflow events that can be communicated in FHIRcast. Each event will always carry the same type of FHIR resources.","title":"Example scenario"},{"location":"#get-involved","text":"Check out our awesome community contributions on github Log issues , submit a PR! Converse at chat.fhir.org","title":"Get involved"},{"location":"about/","text":"About FHIRcast FHIRcast is an HL7 specification designed to provide a lightweight, inexpensive and http-based application context synchronization standard. Get involved There are several ways in which you can get involved with the FHIRcast community. Log issues , contribute via github Converse at chat.fhir.org Attend an HL7 FHIR Connectathon Want to help build our test infrastructure? help-wanted issues Milestones","title":"About"},{"location":"about/#about-fhircast","text":"FHIRcast is an HL7 specification designed to provide a lightweight, inexpensive and http-based application context synchronization standard.","title":"About FHIRcast"},{"location":"about/#get-involved","text":"There are several ways in which you can get involved with the FHIRcast community. Log issues , contribute via github Converse at chat.fhir.org Attend an HL7 FHIR Connectathon","title":"Get involved"},{"location":"about/#want-to-help-build-our-test-infrastructure","text":"help-wanted issues Milestones","title":"Want to help build our test infrastructure?"},{"location":"launch-scenarios/","text":"Implementer guidance This page contains guidance to implementers and is not part of the normative-track FHIRcast specification . App launch scenarios and session discovery A FHIRcast Hub uses a unique hub.topic session id to identify a single session across the Hub, subscribing and driving applications which are engaged in the shared session. The hub.topic must be known by a system for it to participate in the session. Typically, the Hub defines the hub.topic . The HL7 SMART on FHIR app launch specification enables the launched, synchronizing app to discover the hub.topic , because the SMART OAuth 2.0 server provides it during the OAuth 2.0 handshake as a SMART launch parameter. Use of SMART requires either that a synchronizing app supports the SMART on FHIR specification and specifically either be launched from the driving app or use the hub's authorization server's login page. Once the hub.topic and url to the hub ( hub.url ) are known by the synchronizing app, the subscription and workflow event notification process proceeds per the FHIRcast specification, regardless of the specific app launch used. The use of the SMART on FHIR OAuth 2.0 profile simplifies, secures and standardizes FHIRcast context synchronization. While more creative approaches, such as the alternate app launch and shared session identifier generation algorithm are possible to use with FHIRcast, care must be taken by the implementer to ensure synchronization and to protect against PHI loss, session hijacking and other security risks. Specifically, the hub.topic session identifier must be unique, unguessable, and specific to the session. SMART on FHIR FHIRcast extends SMART on FHIR to support clinical context synchronization between disparate, full featured healthcare applications which cannot be embedded within one another. Two launch scenarios are explicitly supported. The app is authorized to synchronize to a user's session using the OAuth2.0 FHIRcast scopes . During the OAuth2.0 handshake, the app requests and is granted one or more FHIRcast scopes. The EHR's authorization server returns the hub url and any relevant session topics as SMART launch parameters. SMART launch parameter Optionality Type Description hub.url Required string The base url of the EHR's hub. hub.topic Optional string The session topic identifiers. The hub.topic is a unique, opaque identifier to the a user's session, typically expressed as a hub-generated guid. The app requests one or more FHIRcast scopes, depending upon its needs to learn about specific workflow events or to direct the workflow itself. Location: https://ehr/authorize? response_type=code client_id=app-client-id redirect_uri=https%3A%2F%2Fapp%2Fafter-auth launch=xyz123 scope=fhircast%2FImagingStudy-open.read+launch+patient%2FObservation.read+patient%2FPatient.read+openid+profile state=98wrghuwuogerg97 aud=https://ehr/fhir Following the OAuth2.0 handshake, the authorization server returns the FHIRcast SMART launch parameters alongside the access_token. { access_token : i8hweunweunweofiwweoijewiwe , token_type : bearer , expires_in : 3600, scope : patient/Observation.read patient/Patient.read , state : 98wrghuwuogerg97 , intent : client-ui-name , patient : 123 , encounter : 456 , hub.url : https://hub.example.com , hub.topic : 2e5e1b95-5c7f-4884-b19a-0b058699318b hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 } The app then subscribes to the identified session Two different launch scenarios are supported. For each launch scenario, the app discovers the session topic to which it subscribes . EHR Launch: User SSO's into app from EHR The simplest launch scenario is the SMART on FHIR EHR launch , in which the subscribing app is launched from an EHR authenticated session. The app requests both the launch and desired FHIRcast scopes (for example, fhircast/ImagingStudy-open.read ) and receives information about the user and session as part of the launch. The app subsequently subscribes to the launching user's session. In this scenario, the EHR authorizes the app to synchronize. The EHR provides a session topic as a SMART launch parameter which belongs to the EHR's current user. Standalone launch: User authenticates to EHR to authorize synchronization If the app can't be launched from the EHR, for example, it's opening on a different machine, it can use the standard SMART on FHIR standalone launch . In this scenario, the user authorizes the app to synchronize to her session by authenticating to the EHR's authorization server. The app requests desired FHIRcast scopes and the EHR provides a session topic as a SMART launch parameter which belongs to the EHR's authorizing user. Alternate app launch In practice, even enterprise apps are often launched from within a clinician's workflow through a variety of bespoke web and desktop technologies. For example, an EHR might launch a desktop app on the same machine by specifying the executable on the Windows shell and passing contextual information as command line switches to the executable. Similarly, bespoke Microsoft COM APIs, shared polling of designated filesystem directories or web service ticketing APIs are also commonly used in production environments. The use of OAuth 2.0 strengthens and standardizes the security and interoperability of integrations. In the absence of OAuth 2.0 support, these alternate app launch mechanisms can also be used to share a session topic and therefore initiate a shared FHIRcast session. A fictitious example Windows shell integration invokes a PACS system at system startup by passing some credentials, user identity and the FHIRcast session identifier ( hub.topic ) and hub base url ( hub.url ). C:\\Windows\\System32\\PACS.exe /credentials: secured credentials /user:jsmith /hub.url:https://hub.example.com /hub.topic:2e5e1b95-5c7f-4884-b19a-0b058699318b An additional example is a simple (and relatively insecure) web application launch extended with the addition of hub.url and hub.topic query parameters. GET https://app.example.com/launch.html?user=jsmith hub.url=https%3A%2F%2Fhub.example.com hub.topic=2e5e1b95-5c7f-4884-b19a-0b058699318b Similarly, any bespoke app launch mechanism can establish a FHIRcast session by adding the hub.url and hub.topic parameters into the existing contextual information shared during the launch. Once launched, the app subscribes to the session and receives notifications following the standardized FHIRcast interactions. No app launch In a scenario in which the user manually starts two or more applications, the applications do not have the capability to establish a shared session topic. Since there's no \"app launch\", with its corresponding ability to exchange contextual information, the unique, unguessable, and session-specific hub.topic must be calculated by both the driving application's hub and the subscribing application. The synchronizing application could use a shared algorithm and secret to generate the hub.topic . A bespoke session topic generation algorithm could encrypt the current user's username and a nonce with a shared secret to a pre-configured base url. In this contrived example, a base url and secret are securely configured on the subscribing app. The subscribing app generates and appends a nonce to the current user's Active Directory username, encrypts that string with the shared secret according to an agreed upon encryption algorithm, and finally appends that encrypted string to the base url. The resulting url is unique to the current user and unguessable to a middle man due to the shared secret. https://hub.example/com/AES256(username+nonce, shared secret)","title":"Launch Scenarios"},{"location":"launch-scenarios/#app-launch-scenarios-and-session-discovery","text":"A FHIRcast Hub uses a unique hub.topic session id to identify a single session across the Hub, subscribing and driving applications which are engaged in the shared session. The hub.topic must be known by a system for it to participate in the session. Typically, the Hub defines the hub.topic . The HL7 SMART on FHIR app launch specification enables the launched, synchronizing app to discover the hub.topic , because the SMART OAuth 2.0 server provides it during the OAuth 2.0 handshake as a SMART launch parameter. Use of SMART requires either that a synchronizing app supports the SMART on FHIR specification and specifically either be launched from the driving app or use the hub's authorization server's login page. Once the hub.topic and url to the hub ( hub.url ) are known by the synchronizing app, the subscription and workflow event notification process proceeds per the FHIRcast specification, regardless of the specific app launch used. The use of the SMART on FHIR OAuth 2.0 profile simplifies, secures and standardizes FHIRcast context synchronization. While more creative approaches, such as the alternate app launch and shared session identifier generation algorithm are possible to use with FHIRcast, care must be taken by the implementer to ensure synchronization and to protect against PHI loss, session hijacking and other security risks. Specifically, the hub.topic session identifier must be unique, unguessable, and specific to the session.","title":"App launch scenarios and session discovery"},{"location":"launch-scenarios/#smart-on-fhir","text":"FHIRcast extends SMART on FHIR to support clinical context synchronization between disparate, full featured healthcare applications which cannot be embedded within one another. Two launch scenarios are explicitly supported. The app is authorized to synchronize to a user's session using the OAuth2.0 FHIRcast scopes . During the OAuth2.0 handshake, the app requests and is granted one or more FHIRcast scopes. The EHR's authorization server returns the hub url and any relevant session topics as SMART launch parameters. SMART launch parameter Optionality Type Description hub.url Required string The base url of the EHR's hub. hub.topic Optional string The session topic identifiers. The hub.topic is a unique, opaque identifier to the a user's session, typically expressed as a hub-generated guid. The app requests one or more FHIRcast scopes, depending upon its needs to learn about specific workflow events or to direct the workflow itself. Location: https://ehr/authorize? response_type=code client_id=app-client-id redirect_uri=https%3A%2F%2Fapp%2Fafter-auth launch=xyz123 scope=fhircast%2FImagingStudy-open.read+launch+patient%2FObservation.read+patient%2FPatient.read+openid+profile state=98wrghuwuogerg97 aud=https://ehr/fhir Following the OAuth2.0 handshake, the authorization server returns the FHIRcast SMART launch parameters alongside the access_token. { access_token : i8hweunweunweofiwweoijewiwe , token_type : bearer , expires_in : 3600, scope : patient/Observation.read patient/Patient.read , state : 98wrghuwuogerg97 , intent : client-ui-name , patient : 123 , encounter : 456 , hub.url : https://hub.example.com , hub.topic : 2e5e1b95-5c7f-4884-b19a-0b058699318b hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 } The app then subscribes to the identified session Two different launch scenarios are supported. For each launch scenario, the app discovers the session topic to which it subscribes .","title":"SMART on FHIR"},{"location":"launch-scenarios/#ehr-launch-user-ssos-into-app-from-ehr","text":"The simplest launch scenario is the SMART on FHIR EHR launch , in which the subscribing app is launched from an EHR authenticated session. The app requests both the launch and desired FHIRcast scopes (for example, fhircast/ImagingStudy-open.read ) and receives information about the user and session as part of the launch. The app subsequently subscribes to the launching user's session. In this scenario, the EHR authorizes the app to synchronize. The EHR provides a session topic as a SMART launch parameter which belongs to the EHR's current user.","title":"EHR Launch: User SSO's into app from EHR"},{"location":"launch-scenarios/#standalone-launch-user-authenticates-to-ehr-to-authorize-synchronization","text":"If the app can't be launched from the EHR, for example, it's opening on a different machine, it can use the standard SMART on FHIR standalone launch . In this scenario, the user authorizes the app to synchronize to her session by authenticating to the EHR's authorization server. The app requests desired FHIRcast scopes and the EHR provides a session topic as a SMART launch parameter which belongs to the EHR's authorizing user.","title":"Standalone launch: User authenticates to EHR to authorize synchronization"},{"location":"launch-scenarios/#alternate-app-launch","text":"In practice, even enterprise apps are often launched from within a clinician's workflow through a variety of bespoke web and desktop technologies. For example, an EHR might launch a desktop app on the same machine by specifying the executable on the Windows shell and passing contextual information as command line switches to the executable. Similarly, bespoke Microsoft COM APIs, shared polling of designated filesystem directories or web service ticketing APIs are also commonly used in production environments. The use of OAuth 2.0 strengthens and standardizes the security and interoperability of integrations. In the absence of OAuth 2.0 support, these alternate app launch mechanisms can also be used to share a session topic and therefore initiate a shared FHIRcast session. A fictitious example Windows shell integration invokes a PACS system at system startup by passing some credentials, user identity and the FHIRcast session identifier ( hub.topic ) and hub base url ( hub.url ). C:\\Windows\\System32\\PACS.exe /credentials: secured credentials /user:jsmith /hub.url:https://hub.example.com /hub.topic:2e5e1b95-5c7f-4884-b19a-0b058699318b An additional example is a simple (and relatively insecure) web application launch extended with the addition of hub.url and hub.topic query parameters. GET https://app.example.com/launch.html?user=jsmith hub.url=https%3A%2F%2Fhub.example.com hub.topic=2e5e1b95-5c7f-4884-b19a-0b058699318b Similarly, any bespoke app launch mechanism can establish a FHIRcast session by adding the hub.url and hub.topic parameters into the existing contextual information shared during the launch. Once launched, the app subscribes to the session and receives notifications following the standardized FHIRcast interactions.","title":"Alternate app launch"},{"location":"launch-scenarios/#no-app-launch","text":"In a scenario in which the user manually starts two or more applications, the applications do not have the capability to establish a shared session topic. Since there's no \"app launch\", with its corresponding ability to exchange contextual information, the unique, unguessable, and session-specific hub.topic must be calculated by both the driving application's hub and the subscribing application. The synchronizing application could use a shared algorithm and secret to generate the hub.topic . A bespoke session topic generation algorithm could encrypt the current user's username and a nonce with a shared secret to a pre-configured base url. In this contrived example, a base url and secret are securely configured on the subscribing app. The subscribing app generates and appends a nonce to the current user's Active Directory username, encrypts that string with the shared secret according to an agreed upon encryption algorithm, and finally appends that encrypted string to the base url. The resulting url is unique to the current user and unguessable to a middle man due to the shared secret. https://hub.example/com/AES256(username+nonce, shared secret)","title":"No app launch"},{"location":"multitab-considerations/","text":"Implementer guidance This page contains guidance to implementers and is not part of the normative-track FHIRcast specification . Considerations for application with simultaneous contexts Just as a modern web browser supports multiple pages loaded, but only a single in active use at a given time, some healthcare applications support multiple, distinct patient charts loaded even though only a single chart is interacted with at a given time. Other applications in healthcare may only support a single patient (or study or ...) context being loaded in the application at a given time. It's important to be able to synchronize the context between two applications supporting these different behaviors. For convenience, we refer to these two types of application behavior as \"multi-tab\" and \"single tab\". Single and Multiple Tab Applications Applications can have different capabilities and layouts, but with FHIRcast they should still be able to stay in sync. A potential situation that could cause confusion is when a single and a multi-tab application work together. While the below guidance describes a patient chart as the primary concept for synchronization, the same guidance applies for other concepts. Let's start with a simple case. Opening and Closing a Patient The diagrams below show two applications without any context, followed by a patient-open event communicated to the other app resulting in same patient being opened in the receiving app. When the patient is closed, a patient-close event is triggered leading to the patient being closed in the other app as well. Opening Multiple Patients As illustrated below, context synchronization is maintained between multiple and single-tabbed applications even across multiple contexts being opened. The initial patient-open works as expected by synchronizing the two apps for Patient 1. When the multi-tab app opens a second patient (without closing the first) the single-tab app follows the context change, resulting in the applications staying in sync. Even when the user is working within the multi-tab app, the single-tab app can still stay in sync with the current context. Recommendations When synchronizing with a multi-tab application, receiving multiple, sequential -open events (for example, patient-open ) does not indicate a synchronization error. Multi-tab applications should differentiate between the closing versus inactivating of contexts, by not communicating the inactivation of a context through a -close event. Launching A Context-Less Tab Many applications can have a \"home\" or \"default\" tab that contains no clinical context, but may hold useful application features. In some cases other applications may want to subscribe to and be notified when another app has switched to the no context tab. To avoid confusion with other events, a new event is proposed to represent a user switching to this context-less tab. Note Implementer feedback is solicited around the semantics of communicating a context change to a \"context-less tab\". For example, why not a patient-open (or imagingstudy-open or ...) with a patient (or study or ...). Since we are inherently representing the lack of context, the event will not fully conform to the defined event naming syntax and will instead use a static name (similar to userlogout ). home-open eventMaturity | 1 - Submitted Workflow The user has opened or switched back to the application's home page or tab which does not have any FHIR related context. Unlike most of FHIRcast events, home-open is representing the lack of a FHIR resource context and therefore does not fully follow the FHIR-resource - [open|close] syntax. Context The context is empty. Example { timestamp : 2019-11-25T13:16:00.00 , id : 35d0b1d4-de45-4b5b-a0e9-9c51b21ee71a , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : home-open , context : [] } }","title":"Multi-tab Considerations"},{"location":"multitab-considerations/#considerations-for-application-with-simultaneous-contexts","text":"Just as a modern web browser supports multiple pages loaded, but only a single in active use at a given time, some healthcare applications support multiple, distinct patient charts loaded even though only a single chart is interacted with at a given time. Other applications in healthcare may only support a single patient (or study or ...) context being loaded in the application at a given time. It's important to be able to synchronize the context between two applications supporting these different behaviors. For convenience, we refer to these two types of application behavior as \"multi-tab\" and \"single tab\".","title":"Considerations for application with simultaneous contexts"},{"location":"multitab-considerations/#single-and-multiple-tab-applications","text":"Applications can have different capabilities and layouts, but with FHIRcast they should still be able to stay in sync. A potential situation that could cause confusion is when a single and a multi-tab application work together. While the below guidance describes a patient chart as the primary concept for synchronization, the same guidance applies for other concepts. Let's start with a simple case.","title":"Single and Multiple Tab Applications"},{"location":"multitab-considerations/#opening-and-closing-a-patient","text":"The diagrams below show two applications without any context, followed by a patient-open event communicated to the other app resulting in same patient being opened in the receiving app. When the patient is closed, a patient-close event is triggered leading to the patient being closed in the other app as well.","title":"Opening and Closing a Patient"},{"location":"multitab-considerations/#opening-multiple-patients","text":"As illustrated below, context synchronization is maintained between multiple and single-tabbed applications even across multiple contexts being opened. The initial patient-open works as expected by synchronizing the two apps for Patient 1. When the multi-tab app opens a second patient (without closing the first) the single-tab app follows the context change, resulting in the applications staying in sync. Even when the user is working within the multi-tab app, the single-tab app can still stay in sync with the current context.","title":"Opening Multiple Patients"},{"location":"multitab-considerations/#recommendations","text":"When synchronizing with a multi-tab application, receiving multiple, sequential -open events (for example, patient-open ) does not indicate a synchronization error. Multi-tab applications should differentiate between the closing versus inactivating of contexts, by not communicating the inactivation of a context through a -close event.","title":"Recommendations"},{"location":"multitab-considerations/#launching-a-context-less-tab","text":"Many applications can have a \"home\" or \"default\" tab that contains no clinical context, but may hold useful application features. In some cases other applications may want to subscribe to and be notified when another app has switched to the no context tab. To avoid confusion with other events, a new event is proposed to represent a user switching to this context-less tab. Note Implementer feedback is solicited around the semantics of communicating a context change to a \"context-less tab\". For example, why not a patient-open (or imagingstudy-open or ...) with a patient (or study or ...). Since we are inherently representing the lack of context, the event will not fully conform to the defined event naming syntax and will instead use a static name (similar to userlogout ).","title":"Launching A Context-Less Tab"},{"location":"multitab-considerations/#home-open","text":"eventMaturity | 1 - Submitted","title":"home-open"},{"location":"multitab-considerations/#workflow","text":"The user has opened or switched back to the application's home page or tab which does not have any FHIR related context. Unlike most of FHIRcast events, home-open is representing the lack of a FHIR resource context and therefore does not fully follow the FHIR-resource - [open|close] syntax.","title":"Workflow"},{"location":"multitab-considerations/#context","text":"The context is empty.","title":"Context"},{"location":"multitab-considerations/#example","text":"{ timestamp : 2019-11-25T13:16:00.00 , id : 35d0b1d4-de45-4b5b-a0e9-9c51b21ee71a , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : home-open , context : [] } }","title":"Example"},{"location":"security-considerations/","text":"Implementer guidance This page contains guidance to implementers and is not part of the normative-track FHIRcast specification . Security Considerations FHIRcast enables the synchronization of healthcare applications user interfaces in real-time through the exchange of a workflow event to a small number of disparate applications. The notification message which describes the workflow event is a simple json wrapper around one or more FHIR resources. These FHIR resources can contain Protected Health Information (PHI). Actors Subscribing app Hub Authorization Server Resource server FHIRcast ties SMART as the authnz layer together with WebSub for subscription and event notification. Sources of Risk The FHIRcast Hub pushes PHI to a dynamic url specified by the authenticated app. An app's credentials or a Hub's lack of authentication could be used by a malicious system to control the user's session. FHIRcast recommends the use of SMART on FHIR, but does not require it. Implementation-specific launch, authentication, and authorization protocols may be possible. These alternate protocols should be scrutinized by implementers for additional security risks. SMART on FHIR SMART on FHIR profiles OAuth 2.0's authorization code grant type and extends it by introducing an \" EHR Launch Sequence \". The Argonaut Project performed a formal security review of SMART on FHIR, resulting in a Risk Assessment report . FHIRcast builds on SMART by introducing a new syntax for standard OAuth 2.0 scopes , as well as two new SMART launch parameters of hub.url and hub.topic . HL7 SMART on FHIR specification Argonaut Risk Assessment report . OAuth 2.0 Threat Model and Security Considerations HTTP Web Hooks using WebSub WebSub is a W3C RFC designed for the distribution of web content through a standardized web hooks architecture. FHIRcast uses WebSub to allow clients to subscribe and unsubscribe to the Hub and, for the Hub to notify subscribers of events. Unlike WebSub, FHIRcast requires that both the Hub and the subscribing apps endpoints are exposed over https. The below flow diagram illustrates each of the interactions. How does the subscriber authenticate to the Hub? The subscribing app can make three distinct API calls to the Hub. For each of these calls, the subscribing app authenticates to the Hub with the Hub's authorization server issued SMART access_token . Per SMART on FHIR, this access_token is presented to the Hub in the HTTP Authorization header. App subscribes to Hub App requests change to shared context App unsubscribes from session POST https://hub.example.com Host: hub.example.com Authorization: Bearer i8hweunweunweofiwweoijewiwe How does the Hub validate the subscriber? The Hub can make three distinct API calls to the subscribing app's hub.callback url. Hub verifies callback url with app Hub notifies app of event Hub denies subscription This flow diagram describes the actors and actions. The subscribing app initiates the FHIRcast subscription, authenticating to the Hub with its bearer token, and providing the hub.secret and hub.callback url. The Hub verifies intent and ownership by performing an HTTP GET to the hub.callback url, with a hub.challenge . The subscribing app must echo the hub.challenge in the body of an HTTP 202 response. Once a workflow event occurs, the Hub notifies the app of the event by POSTing to the subscribing app's hub.callback url. The Hub provides an HMAC signature of the previously provided hub.secret in the X-Hub-Signature HTTP header. POST https://app.example.com/session/callback/v7tfwuk17a HTTP/1.1 Host: subscriber X-Hub-Signature: sha256=dce85dc8dfde2426079063ad413268ac72dcf845f9f923193285e693be6ff3ae The client that creates the subscription may not be the same system as the server hosting the callback url. (For example, some type of federated authorization model could possibly exist between these two systems.) However, in FHIRcast, the Hub assumes that the same authorization and access rights apply to both the subscribing client and the callback url. WebSub Security Considerations The WebSub RFC defines specific security considerations , including the below, which are listed here for emphasis or elevation from optional to mandatory. * Subscribers must communicate with a Hub over https. * Hub must reject unsecured http callback urls. * The subscribing app's hub.callback url should be unique and unguessable. * Subscribing apps must provide a hub.secret and validate the X-Hub-Signature in the notification message. * Hubs must reject subscriptions if the callback url does not echo the hub.challenge as part of the intent verification GET. * When computing the HMAC digest with the hub.secret for the X-Hub-Signature HTTP header, Hubs must use SHA-256 or greater and must not use SHA-1. * For each subscription, the hub.secret must be unique, unguessable and securely stored by both the Hub and the app. * To prevent a subscriber from continuing to receive information after its authorization has ended, if using OAuth 2.0, the Hub must limit the subscription's lease_seconds to be less than or equal to the access token's expiration timestamp. W3C WebSub RFC W3C WebSub RFC's Security Considerations HMAC RFC 6151 Experimental Websockets support In addition to the web hooks communication pattern, the FHIRcast community is experimenting with the use of websockets for event notification. Below are some incomplete considerations for a potential websockets implementation. Subscribers SHOULD only use and Hub's SHOULD only accept connections made over the secure wss:// websocket protocol and not the unsecured ws:// websocket protocol. The WebSockets standard defines an Origin header, sent from the client to the server and intended to contain the url of the client. Subscribers using websockets may be running in a browser, in which case the browser enforces origin reporting to the Hub, or native apps in which the origin reported to the Hub can not be trusted. Therefore, a Hub exposing a websocket connection MUST not rely upon the origin sent by the subscriber. While native app subscribers can send any standard HTTP headers, notably including Authorization: Bearer , browser-based subscribers are limited to only HTTP Basic Auth or cookies. Therefore, the typical use of the OAuth 2.0 access_token for bearer authentication does not consistently work with websockets. FHIRcast describes a \"ticket\"-based authentication system, in which the hub.topic provided to the subscriber as part of the secured SMART app launch serves not only as a unique session identifier, but also as an \"authorization ticket\". This authorization ticket effectively acts as a bearer token. The Hub should therefore take care to generate opaque and unique hub.topic values. The WebSocket Protocol RFC 6455 Heroku's excellent explanation of websocket security","title":"Security Considerations"},{"location":"security-considerations/#security-considerations","text":"FHIRcast enables the synchronization of healthcare applications user interfaces in real-time through the exchange of a workflow event to a small number of disparate applications. The notification message which describes the workflow event is a simple json wrapper around one or more FHIR resources. These FHIR resources can contain Protected Health Information (PHI).","title":"Security Considerations"},{"location":"security-considerations/#actors","text":"Subscribing app Hub Authorization Server Resource server FHIRcast ties SMART as the authnz layer together with WebSub for subscription and event notification.","title":"Actors"},{"location":"security-considerations/#sources-of-risk","text":"The FHIRcast Hub pushes PHI to a dynamic url specified by the authenticated app. An app's credentials or a Hub's lack of authentication could be used by a malicious system to control the user's session. FHIRcast recommends the use of SMART on FHIR, but does not require it. Implementation-specific launch, authentication, and authorization protocols may be possible. These alternate protocols should be scrutinized by implementers for additional security risks.","title":"Sources of Risk"},{"location":"security-considerations/#smart-on-fhir","text":"SMART on FHIR profiles OAuth 2.0's authorization code grant type and extends it by introducing an \" EHR Launch Sequence \". The Argonaut Project performed a formal security review of SMART on FHIR, resulting in a Risk Assessment report . FHIRcast builds on SMART by introducing a new syntax for standard OAuth 2.0 scopes , as well as two new SMART launch parameters of hub.url and hub.topic . HL7 SMART on FHIR specification Argonaut Risk Assessment report . OAuth 2.0 Threat Model and Security Considerations","title":"SMART on FHIR"},{"location":"security-considerations/#http-web-hooks-using-websub","text":"WebSub is a W3C RFC designed for the distribution of web content through a standardized web hooks architecture. FHIRcast uses WebSub to allow clients to subscribe and unsubscribe to the Hub and, for the Hub to notify subscribers of events. Unlike WebSub, FHIRcast requires that both the Hub and the subscribing apps endpoints are exposed over https. The below flow diagram illustrates each of the interactions.","title":"HTTP Web Hooks using WebSub"},{"location":"security-considerations/#how-does-the-subscriber-authenticate-to-the-hub","text":"The subscribing app can make three distinct API calls to the Hub. For each of these calls, the subscribing app authenticates to the Hub with the Hub's authorization server issued SMART access_token . Per SMART on FHIR, this access_token is presented to the Hub in the HTTP Authorization header. App subscribes to Hub App requests change to shared context App unsubscribes from session POST https://hub.example.com Host: hub.example.com Authorization: Bearer i8hweunweunweofiwweoijewiwe","title":"How does the subscriber authenticate to the Hub?"},{"location":"security-considerations/#how-does-the-hub-validate-the-subscriber","text":"The Hub can make three distinct API calls to the subscribing app's hub.callback url. Hub verifies callback url with app Hub notifies app of event Hub denies subscription This flow diagram describes the actors and actions. The subscribing app initiates the FHIRcast subscription, authenticating to the Hub with its bearer token, and providing the hub.secret and hub.callback url. The Hub verifies intent and ownership by performing an HTTP GET to the hub.callback url, with a hub.challenge . The subscribing app must echo the hub.challenge in the body of an HTTP 202 response. Once a workflow event occurs, the Hub notifies the app of the event by POSTing to the subscribing app's hub.callback url. The Hub provides an HMAC signature of the previously provided hub.secret in the X-Hub-Signature HTTP header. POST https://app.example.com/session/callback/v7tfwuk17a HTTP/1.1 Host: subscriber X-Hub-Signature: sha256=dce85dc8dfde2426079063ad413268ac72dcf845f9f923193285e693be6ff3ae The client that creates the subscription may not be the same system as the server hosting the callback url. (For example, some type of federated authorization model could possibly exist between these two systems.) However, in FHIRcast, the Hub assumes that the same authorization and access rights apply to both the subscribing client and the callback url.","title":"How does the Hub validate the subscriber?"},{"location":"security-considerations/#websub-security-considerations","text":"The WebSub RFC defines specific security considerations , including the below, which are listed here for emphasis or elevation from optional to mandatory. * Subscribers must communicate with a Hub over https. * Hub must reject unsecured http callback urls. * The subscribing app's hub.callback url should be unique and unguessable. * Subscribing apps must provide a hub.secret and validate the X-Hub-Signature in the notification message. * Hubs must reject subscriptions if the callback url does not echo the hub.challenge as part of the intent verification GET. * When computing the HMAC digest with the hub.secret for the X-Hub-Signature HTTP header, Hubs must use SHA-256 or greater and must not use SHA-1. * For each subscription, the hub.secret must be unique, unguessable and securely stored by both the Hub and the app. * To prevent a subscriber from continuing to receive information after its authorization has ended, if using OAuth 2.0, the Hub must limit the subscription's lease_seconds to be less than or equal to the access token's expiration timestamp. W3C WebSub RFC W3C WebSub RFC's Security Considerations HMAC RFC 6151","title":"WebSub Security Considerations"},{"location":"security-considerations/#experimental-websockets-support","text":"In addition to the web hooks communication pattern, the FHIRcast community is experimenting with the use of websockets for event notification. Below are some incomplete considerations for a potential websockets implementation. Subscribers SHOULD only use and Hub's SHOULD only accept connections made over the secure wss:// websocket protocol and not the unsecured ws:// websocket protocol. The WebSockets standard defines an Origin header, sent from the client to the server and intended to contain the url of the client. Subscribers using websockets may be running in a browser, in which case the browser enforces origin reporting to the Hub, or native apps in which the origin reported to the Hub can not be trusted. Therefore, a Hub exposing a websocket connection MUST not rely upon the origin sent by the subscriber. While native app subscribers can send any standard HTTP headers, notably including Authorization: Bearer , browser-based subscribers are limited to only HTTP Basic Auth or cookies. Therefore, the typical use of the OAuth 2.0 access_token for bearer authentication does not consistently work with websockets. FHIRcast describes a \"ticket\"-based authentication system, in which the hub.topic provided to the subscriber as part of the secured SMART app launch serves not only as a unique session identifier, but also as an \"authorization ticket\". This authorization ticket effectively acts as a bearer token. The Hub should therefore take care to generate opaque and unique hub.topic values. The WebSocket Protocol RFC 6455 Heroku's excellent explanation of websocket security","title":"Experimental Websockets support"},{"location":"syncconsiderations/","text":"Implementer guidance This page contains guidance to implementers and is not part of the normative-track FHIRcast specification . Synchronization Considerations FHIRcast describes a mechanism for synchronizing distinct applications. Sometimes things go wrong and applications fail to synchronize or become out of sync. For example, the user within the EHR opens a new patient's record, but the app fails to process the update and continues displaying the initial patient. Depending upon the expectations of the user and the error handling of the applications in use, this scenario is potentially risky. Identified below are four distinct synchronization scenarios, ranging from lowest level of expected synchronization to highest. Overall, FHIRcast does not dictate how applications should react to synchronization failure. You should design your product to meet your customer's expectations and needs. Appropriate error handling is specific to the synchronization scenario, user expectations and implemeter. Also note that synchronization failure is a worst-case scenario and should rarely occur in production. Scenarios Below a couple of usage scenarios are listed where the risk of becoming out of sync are exemplified Machine-to-machine-to-machine: Different machines, different times Scenario : Clinician walks away from her desktop EHR and accesses an app on her mobile device which synchronizes to the EHR's hibernated session. Consideration Risk Synchronization failure significance low Performance expectations negligible User inability to distinguish between synchronized applications n/a Summary : This serial or sequential use-case is a convenience synchronization and the clinical risk for synchronization failure is low. Cross device: Different machines, same time Scenario : Clinician accesses her desktop EHR as well an app on her mobile device at the same time. Mobile device synchronizes with the EHR desktop session. Consideration Risk Synchronization failure significance medium Performance expectations low User inability to distinguish between synchronized applications low Summary : The user clearly distinguishes between the applications synchronized on multiple devices and therefore clinical risk for a synchronization failure depends upon the workflow and implementer's goals. User manual action may be appropriate when synchronization fails. Same machine, same time Scenario : Clinician is accessing two or more applications on the same machine in a single workflow. Consideration Risk Synchronization failure significance medium Performance expectations high User inability to distinguish between synchronized applications medium Summary : Although, disparate applications are distinguishable from one another, the workflow requires rapidly accessing one then another application. Application responsivity to synchronization is particularly important. Synchronization failure may introduce clinical risk and therefore user notification of synchronization failure is suggested. Embedded apps: Same machine, same time, same UI Scenario : Clinician accesses multiple applications within a single user interface. Consideration Risk Synchronization failure significance very high Performance expectations high User inability to distinguish between synchronized applications very high Summary : Disparate applications indistinguishable from one another require the greatest amount of context synchronization. Clinical risk of synchronization failure is critical. Application responsivity to synchronization should be high. Synchronization failure may introduce clinical risk and therefore user notification of synchronization failure is suggested. Synchronization recommendations FHIRcast is based on a subscription model where each subscribing client receives notifications of the updated state of the topic being subscribed to. There is no explicit requirement for a subscribing client to follow the context of another client. The subscription model also implies that it is the subscribing clients responsibility to maintain a contextual synchronization or to notify end users whenever the contextual synchronization is lost. However, as noted in above scenarios, there may be risk associated with the end user expectation of have two tightly synchronized applications if they fall out of sync. There are in some cases good reasons for a client not to follow the subscribed context and this section will outline some of the recommended approaches. Blocking action on subscribing client preventing context synchronization Many systems in some cases go into edit mode or start a modal dialog that locks the system from changing context without user intervention. Examples can be when modifying texts, reports, annotating images or performing administrative tasks. The clients may by design then decline to follow the subscribed context to prevent loss of end user data. System Failure mode Possible actions Subscribing Client Modal dialog open in UI, unable to change case without losing end user data Present end user with clear indication that contextual synchronization is lost Subscribing Client Unable to change context Respond with a http status code of 409 conflict Hub One of the subscribing clients cannot follow context No action/Update all subscribing clients with event sync-error Unresponsive callback url of subscribing client This error scenario is all about the Hub losing contact with its subscribing clients. This may be due to a client crash, mis-configured callback url or simply an underlying network failure. In these cases the clients are usually not aware of the fact that the context has changed or that the subscription messages are not received. System Failure mode Possible actions Subscribing Client No event received from Hub No action possible Hub Timeout or error from client callback url No action/Retry/Update all subscribing clients with event sync-error Race condition during launch Once an app is launched with initial context, for example, the currently in context patient, the app must subscribe before it receives notifications of updated context. Between the instant of launch and the instant of a confirmed subscription, it's technically possible for context to change, such that the newly launched app joins a session with stale contextual information. In most scenarios, this problem is likely noticeable by the end user. Apps should optimize the time required to launch and subscribe to reduce this likelihood. Sync-error event received from Hub In the scenarios where the Hub is aware of a synchronization error, it is advisable for the Hub to signal this to the subscribing applications to minimize any patient risk associated with having one or many applications out of sync. System Failure mode Possible actions Subscribing Client Sync-error event received from Hub Present end user with clear indication that contextual synchronization is lost","title":"Synchronization Considerations"},{"location":"syncconsiderations/#synchronization-considerations","text":"FHIRcast describes a mechanism for synchronizing distinct applications. Sometimes things go wrong and applications fail to synchronize or become out of sync. For example, the user within the EHR opens a new patient's record, but the app fails to process the update and continues displaying the initial patient. Depending upon the expectations of the user and the error handling of the applications in use, this scenario is potentially risky. Identified below are four distinct synchronization scenarios, ranging from lowest level of expected synchronization to highest. Overall, FHIRcast does not dictate how applications should react to synchronization failure. You should design your product to meet your customer's expectations and needs. Appropriate error handling is specific to the synchronization scenario, user expectations and implemeter. Also note that synchronization failure is a worst-case scenario and should rarely occur in production.","title":"Synchronization Considerations"},{"location":"syncconsiderations/#scenarios","text":"Below a couple of usage scenarios are listed where the risk of becoming out of sync are exemplified","title":"Scenarios"},{"location":"syncconsiderations/#machine-to-machine-to-machine-different-machines-different-times","text":"Scenario : Clinician walks away from her desktop EHR and accesses an app on her mobile device which synchronizes to the EHR's hibernated session. Consideration Risk Synchronization failure significance low Performance expectations negligible User inability to distinguish between synchronized applications n/a Summary : This serial or sequential use-case is a convenience synchronization and the clinical risk for synchronization failure is low.","title":"Machine-to-machine-to-machine: Different machines, different times"},{"location":"syncconsiderations/#cross-device-different-machines-same-time","text":"Scenario : Clinician accesses her desktop EHR as well an app on her mobile device at the same time. Mobile device synchronizes with the EHR desktop session. Consideration Risk Synchronization failure significance medium Performance expectations low User inability to distinguish between synchronized applications low Summary : The user clearly distinguishes between the applications synchronized on multiple devices and therefore clinical risk for a synchronization failure depends upon the workflow and implementer's goals. User manual action may be appropriate when synchronization fails.","title":"Cross device: Different machines, same time"},{"location":"syncconsiderations/#same-machine-same-time","text":"Scenario : Clinician is accessing two or more applications on the same machine in a single workflow. Consideration Risk Synchronization failure significance medium Performance expectations high User inability to distinguish between synchronized applications medium Summary : Although, disparate applications are distinguishable from one another, the workflow requires rapidly accessing one then another application. Application responsivity to synchronization is particularly important. Synchronization failure may introduce clinical risk and therefore user notification of synchronization failure is suggested.","title":"Same machine, same time"},{"location":"syncconsiderations/#embedded-apps-same-machine-same-time-same-ui","text":"Scenario : Clinician accesses multiple applications within a single user interface. Consideration Risk Synchronization failure significance very high Performance expectations high User inability to distinguish between synchronized applications very high Summary : Disparate applications indistinguishable from one another require the greatest amount of context synchronization. Clinical risk of synchronization failure is critical. Application responsivity to synchronization should be high. Synchronization failure may introduce clinical risk and therefore user notification of synchronization failure is suggested.","title":"Embedded apps: Same machine, same time, same UI"},{"location":"syncconsiderations/#synchronization-recommendations","text":"FHIRcast is based on a subscription model where each subscribing client receives notifications of the updated state of the topic being subscribed to. There is no explicit requirement for a subscribing client to follow the context of another client. The subscription model also implies that it is the subscribing clients responsibility to maintain a contextual synchronization or to notify end users whenever the contextual synchronization is lost. However, as noted in above scenarios, there may be risk associated with the end user expectation of have two tightly synchronized applications if they fall out of sync. There are in some cases good reasons for a client not to follow the subscribed context and this section will outline some of the recommended approaches.","title":"Synchronization recommendations"},{"location":"syncconsiderations/#blocking-action-on-subscribing-client-preventing-context-synchronization","text":"Many systems in some cases go into edit mode or start a modal dialog that locks the system from changing context without user intervention. Examples can be when modifying texts, reports, annotating images or performing administrative tasks. The clients may by design then decline to follow the subscribed context to prevent loss of end user data. System Failure mode Possible actions Subscribing Client Modal dialog open in UI, unable to change case without losing end user data Present end user with clear indication that contextual synchronization is lost Subscribing Client Unable to change context Respond with a http status code of 409 conflict Hub One of the subscribing clients cannot follow context No action/Update all subscribing clients with event sync-error","title":"Blocking action on subscribing client preventing context synchronization"},{"location":"syncconsiderations/#unresponsive-callback-url-of-subscribing-client","text":"This error scenario is all about the Hub losing contact with its subscribing clients. This may be due to a client crash, mis-configured callback url or simply an underlying network failure. In these cases the clients are usually not aware of the fact that the context has changed or that the subscription messages are not received. System Failure mode Possible actions Subscribing Client No event received from Hub No action possible Hub Timeout or error from client callback url No action/Retry/Update all subscribing clients with event sync-error","title":"Unresponsive callback url of subscribing client"},{"location":"syncconsiderations/#race-condition-during-launch","text":"Once an app is launched with initial context, for example, the currently in context patient, the app must subscribe before it receives notifications of updated context. Between the instant of launch and the instant of a confirmed subscription, it's technically possible for context to change, such that the newly launched app joins a session with stale contextual information. In most scenarios, this problem is likely noticeable by the end user. Apps should optimize the time required to launch and subscribe to reduce this likelihood.","title":"Race condition during launch"},{"location":"syncconsiderations/#sync-error-event-received-from-hub","text":"In the scenarios where the Hub is aware of a synchronization error, it is advisable for the Hub to signal this to the subscribing applications to minimize any patient risk associated with having one or many applications out of sync. System Failure mode Possible actions Subscribing Client Sync-error event received from Hub Present end user with clear indication that contextual synchronization is lost","title":"Sync-error event received from Hub"},{"location":"events/encounter-close/","text":"Encounter-close eventMaturity | 0 - Draft Workflow User closed patient's medical record encounter context. A previously open and in context patient encounter is no longer open nor in context. Context Key Optionality Fhir operation to generate context Description patient REQUIRED Patient/{id}?_elements=identifier FHIR Patient resource describing the patient whose encounter was previously in context. encounter REQUIRED Encounter/{id}?_elements=identifier FHIR Encounter resource previously in context. Examples { timestamp : 2018-01-08T01:37:05.14 , id : q9v3jubddqt63n1 , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : encounter-close , context : [ { key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 , identifier : [ { type : { coding : [ { system : http://terminology.hl7.org/CodeSystem/v2-0203 , value : MR , display : Medical Record Number } ] } }, { key : encounter , resource : { resourceType : Encounter , id : 90235y2347t7nwer7gw7rnhgf , identifier : [ { system : 28255 , value : 344384384 } ], patient : { reference : Patient/ewUbXT9RWEbSj5wPEdgRaBw3 } } } ] } } ] } } Change Log Version Description 1.0 Initial Release","title":"Encounter-close"},{"location":"events/encounter-close/#encounter-close","text":"eventMaturity | 0 - Draft","title":"Encounter-close"},{"location":"events/encounter-close/#workflow","text":"User closed patient's medical record encounter context. A previously open and in context patient encounter is no longer open nor in context.","title":"Workflow"},{"location":"events/encounter-close/#context","text":"Key Optionality Fhir operation to generate context Description patient REQUIRED Patient/{id}?_elements=identifier FHIR Patient resource describing the patient whose encounter was previously in context. encounter REQUIRED Encounter/{id}?_elements=identifier FHIR Encounter resource previously in context.","title":"Context"},{"location":"events/encounter-close/#examples","text":"{ timestamp : 2018-01-08T01:37:05.14 , id : q9v3jubddqt63n1 , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : encounter-close , context : [ { key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 , identifier : [ { type : { coding : [ { system : http://terminology.hl7.org/CodeSystem/v2-0203 , value : MR , display : Medical Record Number } ] } }, { key : encounter , resource : { resourceType : Encounter , id : 90235y2347t7nwer7gw7rnhgf , identifier : [ { system : 28255 , value : 344384384 } ], patient : { reference : Patient/ewUbXT9RWEbSj5wPEdgRaBw3 } } } ] } } ] } }","title":"Examples"},{"location":"events/encounter-close/#change-log","text":"Version Description 1.0 Initial Release","title":"Change Log"},{"location":"events/encounter-open/","text":"Encounter-open eventMaturity | 0 - Draft Workflow User opened patient's medical record in the context of a single encounter. Only a single patient and encounter is currently in context. Context Key Optionality Fhir operation to generate context Description patient REQUIRED Patient/{id}?_elements=identifier FHIR Patient resource describing the patient whose encounter is currently in context. encounter REQUIRED Encounter/{id}?_elements=identifier FHIR Encounter resource in context. Examples { timestamp : 2018-01-08T01:37:05.14 , id : q9v3jubddqt63n1 , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : encounter-open , context : [ { key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 , identifier : [ { type : { coding : [ { system : http://terminology.hl7.org/CodeSystem/v2-0203 , value : MR , display : Medical Record Number } ] } }, { key : encounter , resource : { resourceType : Encounter , id : 90235y2347t7nwer7gw7rnhgf , identifier : [ { system : 28255 , value : 344384384 } ], patient : { reference : Patient/ewUbXT9RWEbSj5wPEdgRaBw3 } } } ] } } ] } } Change Log Version Description 1.0 Initial Release","title":"Encounter-open"},{"location":"events/encounter-open/#encounter-open","text":"eventMaturity | 0 - Draft","title":"Encounter-open"},{"location":"events/encounter-open/#workflow","text":"User opened patient's medical record in the context of a single encounter. Only a single patient and encounter is currently in context.","title":"Workflow"},{"location":"events/encounter-open/#context","text":"Key Optionality Fhir operation to generate context Description patient REQUIRED Patient/{id}?_elements=identifier FHIR Patient resource describing the patient whose encounter is currently in context. encounter REQUIRED Encounter/{id}?_elements=identifier FHIR Encounter resource in context.","title":"Context"},{"location":"events/encounter-open/#examples","text":"{ timestamp : 2018-01-08T01:37:05.14 , id : q9v3jubddqt63n1 , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : encounter-open , context : [ { key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 , identifier : [ { type : { coding : [ { system : http://terminology.hl7.org/CodeSystem/v2-0203 , value : MR , display : Medical Record Number } ] } }, { key : encounter , resource : { resourceType : Encounter , id : 90235y2347t7nwer7gw7rnhgf , identifier : [ { system : 28255 , value : 344384384 } ], patient : { reference : Patient/ewUbXT9RWEbSj5wPEdgRaBw3 } } } ] } } ] } }","title":"Examples"},{"location":"events/encounter-open/#change-log","text":"Version Description 1.0 Initial Release","title":"Change Log"},{"location":"events/imagingstudy-close/","text":"ImagingStudy-close eventMaturity | 2 - Tested Workflow User opened record of imaging study. User closed patient's medical record. A previously open and in context study is no longer open nor in context. The previously open study may have been associated with a specific patient, or not. Context Key Optionality Fhir operation to generate context Description patient REQUIRED Patient/{id}?_elements=identifier FHIR Patient resource describing the patient associated with the study currently in context. study REQUIRED ImagingStudy/{id}?_elements=identifier,accession FHIR ImagingStudy resource previously in context. Note that in addition to the request identifier and accession elements, the DICOM uid and FHIR patient reference are included because they're required by the FHIR specification. Examples { timestamp : 2018-01-08T01:37:05.14 , id : q9v3jubddqt63n1 , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : imagingstudy-close , context : [ { key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 , identifier : [ { system : urn:oid:1.2.840.114350 , value : 185444 }, { system : urn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000 , value : 2667 } ] } }, { key : study , resource : { resourceType : ImagingStudy , id : 8i7tbu6fby5ftfbku6fniuf , uid : urn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045 , identifier : [ { system : 7678 , value : 185444 } ], patient : { reference : Patient/ewUbXT9RWEbSj5wPEdgRaBw3 } } } ] } } Change Log Version Description 1.0 Initial Release","title":"ImagingStudy-close"},{"location":"events/imagingstudy-close/#imagingstudy-close","text":"eventMaturity | 2 - Tested","title":"ImagingStudy-close"},{"location":"events/imagingstudy-close/#workflow","text":"User opened record of imaging study. User closed patient's medical record. A previously open and in context study is no longer open nor in context. The previously open study may have been associated with a specific patient, or not.","title":"Workflow"},{"location":"events/imagingstudy-close/#context","text":"Key Optionality Fhir operation to generate context Description patient REQUIRED Patient/{id}?_elements=identifier FHIR Patient resource describing the patient associated with the study currently in context. study REQUIRED ImagingStudy/{id}?_elements=identifier,accession FHIR ImagingStudy resource previously in context. Note that in addition to the request identifier and accession elements, the DICOM uid and FHIR patient reference are included because they're required by the FHIR specification.","title":"Context"},{"location":"events/imagingstudy-close/#examples","text":"{ timestamp : 2018-01-08T01:37:05.14 , id : q9v3jubddqt63n1 , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : imagingstudy-close , context : [ { key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 , identifier : [ { system : urn:oid:1.2.840.114350 , value : 185444 }, { system : urn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000 , value : 2667 } ] } }, { key : study , resource : { resourceType : ImagingStudy , id : 8i7tbu6fby5ftfbku6fniuf , uid : urn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045 , identifier : [ { system : 7678 , value : 185444 } ], patient : { reference : Patient/ewUbXT9RWEbSj5wPEdgRaBw3 } } } ] } }","title":"Examples"},{"location":"events/imagingstudy-close/#change-log","text":"Version Description 1.0 Initial Release","title":"Change Log"},{"location":"events/imagingstudy-open/","text":"ImagingStudy-open eventMaturity | 2 - Tested Workflow User opened record of imaging study. The newly open study may have been associated with a specific patient, or not. Context Key Optionality Fhir operation to generate context Description patient REQUIRED Patient/{id}?_elements=identifier FHIR Patient resource describing the patient associated with the study currently in context. study REQUIRED ImagingStudy/{id}?_elements=identifier,accession FHIR ImagingStudy resource in context. Note that in addition to the request identifier and accession elements, the DICOM uid and FHIR patient reference are included because they're required by the FHIR specification. Examples { timestamp : 2018-01-08T01:37:05.14 , id : q9v3jubddqt63n1 , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : imagingstudy-open , context : [ { key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 , identifier : [ { system : urn:oid:1.2.840.114350 , value : 185444 }, { system : urn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000 , value : 2667 } ] } }, { key : study , resource : { resourceType : ImagingStudy , id : 8i7tbu6fby5ftfbku6fniuf , uid : urn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045 , identifier : [ { system : 7678 , value : 185444 } ], patient : { reference : Patient/ewUbXT9RWEbSj5wPEdgRaBw3 } } } ] } } Change Log Version Description 1.0 Initial Release","title":"ImagingStudy-open"},{"location":"events/imagingstudy-open/#imagingstudy-open","text":"eventMaturity | 2 - Tested","title":"ImagingStudy-open"},{"location":"events/imagingstudy-open/#workflow","text":"User opened record of imaging study. The newly open study may have been associated with a specific patient, or not.","title":"Workflow"},{"location":"events/imagingstudy-open/#context","text":"Key Optionality Fhir operation to generate context Description patient REQUIRED Patient/{id}?_elements=identifier FHIR Patient resource describing the patient associated with the study currently in context. study REQUIRED ImagingStudy/{id}?_elements=identifier,accession FHIR ImagingStudy resource in context. Note that in addition to the request identifier and accession elements, the DICOM uid and FHIR patient reference are included because they're required by the FHIR specification.","title":"Context"},{"location":"events/imagingstudy-open/#examples","text":"{ timestamp : 2018-01-08T01:37:05.14 , id : q9v3jubddqt63n1 , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : imagingstudy-open , context : [ { key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 , identifier : [ { system : urn:oid:1.2.840.114350 , value : 185444 }, { system : urn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000 , value : 2667 } ] } }, { key : study , resource : { resourceType : ImagingStudy , id : 8i7tbu6fby5ftfbku6fniuf , uid : urn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045 , identifier : [ { system : 7678 , value : 185444 } ], patient : { reference : Patient/ewUbXT9RWEbSj5wPEdgRaBw3 } } } ] } }","title":"Examples"},{"location":"events/imagingstudy-open/#change-log","text":"Version Description 1.0 Initial Release","title":"Change Log"},{"location":"events/patient-close/","text":"Patient-close eventMaturity | 2 - Tested Workflow User closed patient's medical record. A previously open and in context patient chart is no longer open nor in context. Context Key Optionality Fhir operation to generate context Description patient REQUIRED Patient/{id}?_elements=identifier FHIR Patient resource describing the patient whose chart was previously in context. ~~ encounter ~~ ~~REQUIRED, if exists~~ ~~ Encounter/{id}?_elements=identifier ~~ ~~FHIR Encounter resource previously in context in the now closed patient's chart.~~ DEPRECATED in favor of dedicated encounter-close event. Examples { timestamp : 2018-01-08T01:37:05.14 , id : q9v3jubddqt63n1 , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : patient-close , context : [ { key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 , identifier : [ { type : { coding : [ { system : http://terminology.hl7.org/CodeSystem/v2-0203 , value : MR , display : Medical Record Number } ] } } ] } } ] } } Change Log Version Description 1.0 Initial Release 1.1 Deprecate encounter element in favor of dedicated encounter-close event.","title":"Patient-close"},{"location":"events/patient-close/#patient-close","text":"eventMaturity | 2 - Tested","title":"Patient-close"},{"location":"events/patient-close/#workflow","text":"User closed patient's medical record. A previously open and in context patient chart is no longer open nor in context.","title":"Workflow"},{"location":"events/patient-close/#context","text":"Key Optionality Fhir operation to generate context Description patient REQUIRED Patient/{id}?_elements=identifier FHIR Patient resource describing the patient whose chart was previously in context. ~~ encounter ~~ ~~REQUIRED, if exists~~ ~~ Encounter/{id}?_elements=identifier ~~ ~~FHIR Encounter resource previously in context in the now closed patient's chart.~~ DEPRECATED in favor of dedicated encounter-close event.","title":"Context"},{"location":"events/patient-close/#examples","text":"{ timestamp : 2018-01-08T01:37:05.14 , id : q9v3jubddqt63n1 , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : patient-close , context : [ { key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 , identifier : [ { type : { coding : [ { system : http://terminology.hl7.org/CodeSystem/v2-0203 , value : MR , display : Medical Record Number } ] } } ] } } ] } }","title":"Examples"},{"location":"events/patient-close/#change-log","text":"Version Description 1.0 Initial Release 1.1 Deprecate encounter element in favor of dedicated encounter-close event.","title":"Change Log"},{"location":"events/patient-open/","text":"Patient-open eventMaturity | 2 - Tested Workflow User opened patient's medical record. Only a single patient is currently in context. Context Key Optionality Fhir operation to generate context Description patient REQUIRED Patient/{id}?_elements=identifier FHIR Patient resource describing the patient whose chart is currently in context. ~~ encounter ~~ ~~REQUIRED, if exists~~ ~~ Encounter/{id}?_elements=identifier ~~ ~~FHIR Encounter resource in context in the newly opened patient's chart.~~ DEPRECATED in favor of a dedicated encounter-open event. Examples { timestamp : 2018-01-08T01:37:05.14 , id : q9v3jubddqt63n1 , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : patient-open , context : [ { key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 , identifier : [ { type : { coding : [ { system : http://terminology.hl7.org/CodeSystem/v2-0203 , value : MR , display : Medical Record Number } ] } } ] } } ] } } Change Log Version Description 1.0 Initial Release 1.1 Deprecate encounter element in favor of dedicated encounter-open event.","title":"Patient-open"},{"location":"events/patient-open/#patient-open","text":"eventMaturity | 2 - Tested","title":"Patient-open"},{"location":"events/patient-open/#workflow","text":"User opened patient's medical record. Only a single patient is currently in context.","title":"Workflow"},{"location":"events/patient-open/#context","text":"Key Optionality Fhir operation to generate context Description patient REQUIRED Patient/{id}?_elements=identifier FHIR Patient resource describing the patient whose chart is currently in context. ~~ encounter ~~ ~~REQUIRED, if exists~~ ~~ Encounter/{id}?_elements=identifier ~~ ~~FHIR Encounter resource in context in the newly opened patient's chart.~~ DEPRECATED in favor of a dedicated encounter-open event.","title":"Context"},{"location":"events/patient-open/#examples","text":"{ timestamp : 2018-01-08T01:37:05.14 , id : q9v3jubddqt63n1 , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : patient-open , context : [ { key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 , identifier : [ { type : { coding : [ { system : http://terminology.hl7.org/CodeSystem/v2-0203 , value : MR , display : Medical Record Number } ] } } ] } } ] } }","title":"Examples"},{"location":"events/patient-open/#change-log","text":"Version Description 1.0 Initial Release 1.1 Deprecate encounter element in favor of dedicated encounter-open event.","title":"Change Log"},{"location":"events/syncerror/","text":"syncerror eventMaturity | 2 - Tested Workflow A synchronization error has been detected. Inform subscribed clients. Unlike most of FHIRcast events, syncerror is an infrastructural event and does not follow the FHIR-resource - [open|close] syntax and is directly referenced in the underlying specification . Context Key Optionality Fhir operation to generate context Description operationoutcome OPTIONAL OperationOutcome FHIR resource describing an outcome of an unsuccessful system action. The OperationOutcome SHALL use a code of processing . The OperationOutcome's details.coding.code SHALL contain the id of the event that this error is related to as a code with the system value of \"https://fhircast.hl7.org/events/syncerror/eventid\" and the name of the relevant event with a system value of \"https://fhircast.hl7.org/events/syncerror/eventname\" . Other coding values can be included with different system values so as to include extra information about the syncerror . Examples { timestamp : 2018-01-08T01:37:05.14 , id : q9v3jubddqt63n1 , event : { hub.topic : 7544fe65-ea26-44b5-835d-14287e46390b , hub.event : syncerror , context : [ { key : operationoutcome , resource : { resourceType : OperationOutcome , issue : [ { severity : warning , code : processing , diagnostics : AppId3456 failed to follow context , details : { coding : [ { system : https://fhircast.hl7.org/events/syncerror/eventid , code : fdb2f928-5546-4f52-87a0-0648e9ded065 }, { system : https://fhircast.hl7.org/events/syncerror/eventname , code : patient-open }, { system : http://example.com/events/syncerror/your-error-code-system , code : FHIRcast sync error } ] } } ] } } ] } } Change Log Version Description 1.0 Initial Release 2.0 Require id of event syncerror is about, in OperationOutcome.details.coding.code","title":"syncerror"},{"location":"events/syncerror/#syncerror","text":"eventMaturity | 2 - Tested","title":"syncerror"},{"location":"events/syncerror/#workflow","text":"A synchronization error has been detected. Inform subscribed clients. Unlike most of FHIRcast events, syncerror is an infrastructural event and does not follow the FHIR-resource - [open|close] syntax and is directly referenced in the underlying specification .","title":"Workflow"},{"location":"events/syncerror/#context","text":"Key Optionality Fhir operation to generate context Description operationoutcome OPTIONAL OperationOutcome FHIR resource describing an outcome of an unsuccessful system action. The OperationOutcome SHALL use a code of processing . The OperationOutcome's details.coding.code SHALL contain the id of the event that this error is related to as a code with the system value of \"https://fhircast.hl7.org/events/syncerror/eventid\" and the name of the relevant event with a system value of \"https://fhircast.hl7.org/events/syncerror/eventname\" . Other coding values can be included with different system values so as to include extra information about the syncerror .","title":"Context"},{"location":"events/syncerror/#examples","text":"{ timestamp : 2018-01-08T01:37:05.14 , id : q9v3jubddqt63n1 , event : { hub.topic : 7544fe65-ea26-44b5-835d-14287e46390b , hub.event : syncerror , context : [ { key : operationoutcome , resource : { resourceType : OperationOutcome , issue : [ { severity : warning , code : processing , diagnostics : AppId3456 failed to follow context , details : { coding : [ { system : https://fhircast.hl7.org/events/syncerror/eventid , code : fdb2f928-5546-4f52-87a0-0648e9ded065 }, { system : https://fhircast.hl7.org/events/syncerror/eventname , code : patient-open }, { system : http://example.com/events/syncerror/your-error-code-system , code : FHIRcast sync error } ] } } ] } } ] } }","title":"Examples"},{"location":"events/syncerror/#change-log","text":"Version Description 1.0 Initial Release 2.0 Require id of event syncerror is about, in OperationOutcome.details.coding.code","title":"Change Log"},{"location":"events/template/","text":"[FHIR resource]-[open|close] eventMaturity | 0 - Draft Workflow Describe when this event occurs in a workflow. Describe how the context fields relate to one another. Event creators SHOULD include as much detail and clarity as possible to minimize any ambiguity or confusion amongst implementors. Context Define context values that are provided when this event occurs, and indicate whether they must be provided, and the FHIR query used to generate the resource. Key Optionality FHIR operation to generate context Description example REQUIRED FHIRresource/{id}?_elements=identifer Describe the context value encounter OPTIONAL Encounter/{id} Describe the context value Examples { timestamp : 2018-01-08T01:37:05.14 , id : q9v3jubddqt63n1 , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : patient-open , context : [ { key : key-from-above , resource : { resourceType : resource-type-from-above } }, { key : encounter , resource : { resourceType : Encounter } } ] } } Change Log Version Description 1.0 Initial Release","title":"new-event-template"},{"location":"events/template/#fhir-resource-openclose","text":"eventMaturity | 0 - Draft","title":"[FHIR resource]-[open|close]"},{"location":"events/template/#workflow","text":"Describe when this event occurs in a workflow. Describe how the context fields relate to one another. Event creators SHOULD include as much detail and clarity as possible to minimize any ambiguity or confusion amongst implementors.","title":"Workflow"},{"location":"events/template/#context","text":"Define context values that are provided when this event occurs, and indicate whether they must be provided, and the FHIR query used to generate the resource. Key Optionality FHIR operation to generate context Description example REQUIRED FHIRresource/{id}?_elements=identifer Describe the context value encounter OPTIONAL Encounter/{id} Describe the context value","title":"Context"},{"location":"events/template/#examples","text":"{ timestamp : 2018-01-08T01:37:05.14 , id : q9v3jubddqt63n1 , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : patient-open , context : [ { key : key-from-above , resource : { resourceType : resource-type-from-above } }, { key : encounter , resource : { resourceType : Encounter } } ] } }","title":"Examples"},{"location":"events/template/#change-log","text":"Version Description 1.0 Initial Release","title":"Change Log"},{"location":"events/userhibernate/","text":"userhibernate eventMaturity | 1 - Submitted Workflow User temporarily suspended their session. The user's session will eventually resume. Unlike most of FHIRcast events, userhibernate is a statically named event and therefore does not follow the FHIR-resource - [open|close] syntax. Context The context is empty. Examples { timestamp : 2019-11-25T13:16:00.00 , id : 35d0b1d4-de45-4b5b-a0e9-9c51b21ee71a , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : userHibernate , context : [] } } Change Log Version Description 1.0 Initial Release","title":"userhibernate"},{"location":"events/userhibernate/#userhibernate","text":"eventMaturity | 1 - Submitted","title":"userhibernate"},{"location":"events/userhibernate/#workflow","text":"User temporarily suspended their session. The user's session will eventually resume. Unlike most of FHIRcast events, userhibernate is a statically named event and therefore does not follow the FHIR-resource - [open|close] syntax.","title":"Workflow"},{"location":"events/userhibernate/#context","text":"The context is empty.","title":"Context"},{"location":"events/userhibernate/#examples","text":"{ timestamp : 2019-11-25T13:16:00.00 , id : 35d0b1d4-de45-4b5b-a0e9-9c51b21ee71a , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : userHibernate , context : [] } }","title":"Examples"},{"location":"events/userhibernate/#change-log","text":"Version Description 1.0 Initial Release","title":"Change Log"},{"location":"events/userlogout/","text":"userlogout eventMaturity | 1 - Submitted Workflow User's session has ended, perhaps by exiting the application through a logout, session time-out or other reason. Unlike most of FHIRcast events, userlogout is a statically named event and therefore does not follow the FHIR-resource - [open|close] syntax. Context The context is empty. Examples { timestamp : 2019-11-25T13:16:00.00 , id : 35d0b1d4-de45-4b5b-a0e9-9c51b21ee71a , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : userLogout , context : [] } } Change Log Version Description 1.0 Initial Release","title":"userlogout"},{"location":"events/userlogout/#userlogout","text":"eventMaturity | 1 - Submitted","title":"userlogout"},{"location":"events/userlogout/#workflow","text":"User's session has ended, perhaps by exiting the application through a logout, session time-out or other reason. Unlike most of FHIRcast events, userlogout is a statically named event and therefore does not follow the FHIR-resource - [open|close] syntax.","title":"Workflow"},{"location":"events/userlogout/#context","text":"The context is empty.","title":"Context"},{"location":"events/userlogout/#examples","text":"{ timestamp : 2019-11-25T13:16:00.00 , id : 35d0b1d4-de45-4b5b-a0e9-9c51b21ee71a , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : userLogout , context : [] } }","title":"Examples"},{"location":"events/userlogout/#change-log","text":"Version Description 1.0 Initial Release","title":"Change Log"},{"location":"specification/Feb2020Ballot/","text":"FHIRcast Draft \"Standard for Trial Use\" (STU2) This is the draft of the 1.1 release of the FHIRcast specification. We are currently working towards a 1.1 release and would love your feedback and proposed changes. Look at our current issue list and get involved! Overview The FHIRcast specification describes the APIs used to synchronize disparate healthcare applications' user interfaces in real time, allowing them to show the same clinical content to a user (or group of users). Once the subscribing app knows about the session , the app may subscribe to specific workflow-related events for the given session. The subscription is verified and the app is notified when those workflow-related events occur; for example, by the clinician opening a patient's chart. The subscribing app may initiate context changes by accessing APIs exposed by the Hub; for example, closing the patient's chart. The app deletes its subscription to no longer receive notifications. The notification message describing the workflow event is a simple json wrapper around one or more FHIR resources. FHIRcast recommends the HL7 SMART on FHIR launch protocol for both session discovery and API authentication. FHIRcast enables a subscriber to receive notifications either through a webhook or over a websocket connection, and is modeled on the W3C WebSub RFC , such as its use of GET vs POST interactions and a Hub for managing subscriptions. The below flow diagram illustrates the series of interactions. All data exchanged through the HTTP APIs SHALL be sent and received as JSON structures, and SHALL be transmitted over channels secured using the Hypertext Transfer Protocol (HTTP) over Transport Layer Security (TLS), also known as HTTPS and defined in RFC2818 . Session Discovery A session is an abstract concept representing a shared workspace, such as user's login session over multiple applications or a shared view of one application distributed to multiple users. FHIRcast requires a session to have a unique, unguessable and opaque identifier. This identifier is exchanged as the value of the hub.topic parameter. Before establishing a subscription, an app must not only know the hub.topic , but also the the hub.url which contains the base url of the Hub. Systems SHOULD use SMART on FHIR to authorize, authenticate and exchange initial shared context. If using SMART, following a SMART on FHIR EHR launch or SMART on FHIR standalone launch , the app SHALL request and, if authorized, SHALL be granted one or more fhircast OAuth 2.0 scopes. Accompanying this scope grant, the authorization server SHALL supply the hub.url and hub.topic SMART launch parameters alongside the access token and other parameters appropriate to establish initial shared context. Per SMART, when scopes of openid and fhirUser are granted, the authorization server additionally sends the current user's identity in an id_token . Although FHIRcast works best with the SMART on FHIR launch and authorization process, implementation-specific launch, authentication, and authorization protocols may be possible. If not using SMART on FHIR, the mechanism enabling the app to discover the hub.url and hub.topic is not defined in FHIRcast. See other launch scenarios for guidance. FHIRcast Authorization SMART scopes FHIRcast defines OAuth 2.0 access scopes that correspond directly to FHIRcast events . Our scopes associate read or write permissions to an event. Apps that need to receive workflow related events should ask for read scopes. Apps that request context changes should ask for write scopes. Hubs may decide what specific interactions and operations will be enabled by these scopes. Expressed in EBNF notation, FHIRcast's scope syntax is: scope ::= ( 'fhircast' ) '/' ( FHIRcast-event ) '.' ( 'read' | 'write' | '*' ) The FHIRcast event name is also a computable syntax , the complete syntax for FHIRcast scopes is: scope ::= 'fhircast' '/' fhir-resource '-' ( 'open' | 'close' | '*' ) '.' ( 'read' | 'write' | '*' ) SMART Launch Example Note that the SMART launch parameters include the Hub's base url and the session identifier in the hub.url and hub.topic fields. { access_token : i8hweunweunweofiwweoijewiwe , token_type : bearer , patient : 123 , expires_in : 3600, encounter : 456 , imagingstudy : 789 , hub.url : https://hub.example.com , hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , } Subscribing and Unsubscribing Subscribing consists of two exchanges: Subscriber requests a subscription at the hub.url url. For hub.channel.type = webhook , Hub confirms the subscription was actually requested by the subscriber by contacting the hub.callback url. For hub.channel.type = websocket , Hub returns a wss url and subscriber establishes websocket connection. Unsubscribing works in the same way, except with a single parameter changed to indicate the desire to unsubscribe. Subscription Request To create a subscription, the subscribing app SHALL perform an HTTP POST ( RFC7231 ) to the Hub's base url (as specified in hub.url ) with the parameters in the table below. This request SHALL have a Content-Type header of application/x-www-form-urlencoded and SHALL use the following parameters in its body, formatted accordingly: Field Optionality Type Description hub.channel.type Required string The subscriber SHALL specify a channel type of websocket or webhook . Subscription requests without this field SHOULD be rejected by the Hub. hub.mode Required string The literal string \"subscribe\" or \"unsubscribe\", depending on the goal of the request. hub.topic Required string The identifier of the user's session that the subscriber wishes to subscribe to or unsubscribe from. MAY be a guid. hub.events Required string Comma-separated list of event types from the Event Catalog for which the Subscriber wants notifications. hub.lease_seconds Optional number Number of seconds for which the subscriber would like to have the subscription active, given as a positive decimal integer. Hubs MAY choose to respect this value or not, depending on their own policies, and MAY set a default value if the subscriber omits the parameter. If using OAuth 2.0, the Hub SHALL limit the subscription lease seconds to be less than or equal to the access token's expiration. hub.callback Conditional string Required when hub.channel.type = webhook . SHALL not be present when hub.channel.type = websocket . The Subscriber's callback URL where notifications should be delivered. The callback URL SHOULD be an unguessable URL that is unique per subscription. hub.secret Conditional string Required when hub.channel.type = webhook . SHALL not be present when hub.channel.type = websocket . A subscriber-provided cryptographically random unique secret string that SHALL be used to compute an HMAC digest delivered in each notification. This parameter SHALL be less than 200 bytes in length. hub.channel.endpoint Conditional string Required when hub.channel.type = websocket for re-subscribes and unsubscribes. SHALL not be present when hub.channel.type = webhook . The wss url identifying an existing websocket subscription. If OAuth 2.0 authentication is used, this POST request SHALL contain the Bearer access token in the HTTP Authorization header. Hubs SHALL allow subscribers to re-request subscriptions that are already activated. Each subsequent and verified request to a Hub to subscribe or unsubscribe SHALL override the previous subscription state for a specific hub.topic , hub.callback / hub.channel.endpoint url, and hub.events combination. For example, a subscriber MAY modify its subscription by subscribing to or unsubscribing from additional events by sending subscription requests for additional events with the same topic and callback/endpoint url. The webhook callback URL MAY contain arbitrary query string parameters (e.g., ?foo=bar red=fish ). Hubs SHALL preserve the query string during subscription verification by appending new, Hub-defined, parameters to the end of the list using the (ampersand) character to join. When sending the event notifications, the Hub SHALL make a POST request to the callback URL including any query string parameters in the URL portion of the request, not as POST body parameters. The client that creates the subscription may not be the same system as the server hosting the callback url or connecting to the wss url. (For example, some type of federated authorization model could possibly exist between these two systems.) However, in FHIRcast, the Hub assumes that the same authorization and access rights apply to both the subscribing client and the system receiving notifications. Subscription Response If the Hub URL supports FHIRcast and is able to handle the subscription or unsubscription request, the Hub SHALL respond to a subscription request with an HTTP 202 \"Accepted\" response to indicate that the request was received and will now be verified by the Hub. If using websockets and supported by the Hub, the Content-Location HTTP header of the response SHALL contain a wss url. If webhooks, the Hub SHOULD perform the verification of intent as soon as possible. The websocket wss url SHALL be cryptographically random, unique and unguessable. If a Hub finds any errors in the subscription request, an appropriate HTTP error response code (4xx or 5xx) SHALL be returned. In the event of an error, the Hub SHOULD return a description of the error in the response body as plain text, used to assist the client developer in understanding the error. This is not meant to be shown to the end user. Hubs MAY decide to reject some subscription requests based on their own policies. webhook Subscription Request Example In this example, the app asks to be notified of the patient-open and patient-close events. POST https://hub.example.com Host: hub.example.com Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/x-www-form-urlencoded hub.channel.type=webhook hub.callback=https%3A%2F%2Fapp.example.com%2Fsession%2Fcallback%2Fv7tfwuk17a hub.mode=subscribe hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065 hub.secret=shhh-this-is-a-secret hub.events=patient-open,patient-close webhook Subscription Response Example HTTP/1.1 202 Accepted websocket Initial Subscription Request Example In this example, the app creates an initial subscription and asks to be notified of the patient-open and patient-close events. POST https://hub.example.com Host: hub.example.com Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/x-www-form-urlencoded hub.channel.type=websocket hub.mode=subscribe hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065 hub.events=patient-open,patient-close websocket Subscription Response Example HTTP/1.1 202 Accepted Content-Location: wss://hub.example.com/ee30d3b9-1558-464f-a299-cbad6f8135de Subscription Denial If (and when) the subscription is denied, the Hub SHALL inform the subscriber. This can occur when the subscription is requested for a variety of reasons, or it can occur after the subscription had already been accepted because the Hub no longer supports that subscription (e.g. it has expired). The communication mechanism for a subscription denial varies per hub.channel.type , but the information communicated from the Hub to the subscriber does not. Field Optionality Type Description hub.mode Required string The literal string \"denied\". hub.topic Required string The topic given in the corresponding subscription request. MAY be a guid. hub.events Required string A comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request, which are being denied. hub.reason Optional string The Hub may include a reason. The subscription MAY be denied by the Hub at any point (even if it was previously accepted). The Subscriber SHOULD then consider that the subscription is not possible anymore. The below webhook flow diagram and websocket flow diagram and examples illustrate the subscription denial sequence and message details. webhook Subscription Denial To deny a subscription with hub.channel.type = webhook , the Hub sends an HTTP GET request to the subscriber's callback URL as given in the subscription request. This request appends the fields as query string arguments. The subscriber SHALL respond with an HTTP success (2xx) code. webhook Subscription Denial Sequence webhook Subscription Denial Example GET https://app.example.com/session/callback/v7tfwuk17a?hub.mode=denied hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065hub.events=patient-open,patient-close hub.reason=session+unexpectedly+stopped HTTP 1.1 Host: subscriber websocket Subscription Denial To deny a subscription with hub.channel.type = websocket , the Hub sends a json object to the subscriber through the established websocket connection. websocket Subscription Denial Sequence websocket Subscription Denial Example { hub.mode : denied , hub.topic : fba7b1e2-53e9-40aa-883a-2af57ab4e2c , hub.events : patient-open,patient-close , hub.reason : session unexpectedly stopped } Subscription Confirmation If a subscription or unsubscription is not denied, the Hub SHALL confirm the subscription. For hub.channel.type = webhook , the confirmation verifies the intent of the subscriber and ensures that the subscriber actually controls the callback url. For hub.channel.type s of both webhook and websocket , this subscription confirmation step informs the subscriber of the details of Hub's recently created subscription. webhook Intent Verification Request In order to prevent an attacker from creating unwanted subscriptions on behalf of a subscriber (or unsubscribing desired ones), a Hub must ensure that a webhook subscriber did indeed send the subscription request. The Hub SHALL verify a subscription request by sending an HTTPS GET request to the subscriber's callback URL as given in the subscription request. This request SHALL have the following query string arguments appended Field Optionality Type Description hub.mode Required string The literal string \"subscribe\" or \"unsubscribe\", which matches the original request to the Hub from the subscriber. hub.topic Required string The session topic given in the corresponding subscription request. MAY be a guid. hub.events Required string A comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request. hub.challenge Required string A Hub-generated, random string that SHALL be echoed by the subscriber to verify the subscription. hub.lease_seconds Required number The Hub-determined number of seconds that the subscription will stay active before expiring, measured from the time the verification request was made from the Hub to the subscriber. If provided to the client, the Hub SHALL unsubscribe the client once lease_seconds has expired and MAY send a subscription denial. If the subscriber wishes to continue the subscription it MAY resubscribe. webhook Intent Verification Request Example GET https://app.example.com/session/callback/v7tfwuk17a?hub.mode=subscribe hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065 hub.events=patient-open,patient-close hub.challenge=meu3we944ix80ox hub.lease_seconds=7200 HTTP 1.1 Host: subscriber webhook Intent Verification Response If the hub.topic of the Intent Verification Request corresponds to a pending subscription or unsubscription that the subscriber wishes to carry out it SHALL respond with an HTTP success (2xx) code, a header of Content-Type: text/html , and a response body equal to the hub.challenge parameter. If the subscriber does not agree with the action, the subscriber SHALL respond with a 404 \"Not Found\" response. The Hub SHALL consider other server response codes (3xx, 4xx, 5xx) to mean that the verification request has failed. If the subscriber returns an HTTP success (2xx) but the content body does not match the hub.challenge parameter, the Hub SHALL also consider verification to have failed. The below flow diagram and example illustrate the successful subscription sequence and message details. webhook Successful Subscription Sequence webhook Intent Verification Response Example HTTP/1.1 200 OK Content-Type: text/html meu3we944ix80ox NOTE The spec uses GET vs POST to differentiate between the confirmation/denial of the subscription request and delivering the content. While this is not considered \"best practice\" from a web architecture perspective, it does make implementation of the callback URL simpler. Since the POST body of the content distribution request may be any arbitrary content type and only includes the actual content of the document, using the GET vs POST distinction to switch between handling these two modes makes implementations simpler. websocket Subscription Confirmation To confirm a subscription request, upon the subscriber establishing a websocket connection to the hub.channel.endpoint wss url, the Hub SHALL send a confirmation. This confirmation includes the following elements: Field Optionality Type Description hub.mode Required string The literal string \"subscribe\". hub.topic Required string The session topic given in the corresponding subscription request. hub.events Required string A comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request. hub.lease_seconds Required number The Hub-determined number of seconds that the subscription will stay active before expiring, measured from the time the verification request was made from the Hub to the subscriber. If provided to the client, the Hub SHALL unsubscribe the client once lease_seconds has expired and MAY send a subscription denial. If the subscriber wishes to continue the subscription it MAY resubscribe. websocket Intent Verification Request Example { hub.mode : subscribe , hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.events : patient-open,patient-close , hub.lease-seconds : 7200 } Unsubscribe Once a subscribing app no longer wants to receive event notifications, it SHALL unsubscribe from the session. The unsubscribe request message mirrors the subscribe request message. To unsubscribe, the hub.mode SHALL be equal to the lowercase string unsubscribe . Only unsubscribes for hub.channel.type = webhook SHALL include the hub.callback , hub.secret , and hub.challenge . Only unsubscribes for hub.channel.type = websocket SHALL include the wss websocket url in hub.channel.endpoint . Note that the unsubscribe request is performed over HTTP, even for subscriptions using websockets. Field Optionality Type Description hub.channel.type Required string The subscriber SHALL specify a channel type of websocket or webhook . Subscription requests without this field SHOULD be rejected by the Hub. hub.mode Required string The literal string \"unsubscribe\". hub.topic Required string The identifier of the user's session that the subscriber wishes to subscribe to or unsubscribe from. MAY be a guid. hub.events Required string Comma-separated list of event types from the Event Catalog for which the Subscriber no longer wants notifications. hub.callback Conditional string Required when hub.channel.type = webhook . SHALL not be present when hub.channel.type = websocket . hub.secret Conditional string Required when hub.channel.type = webhook . SHALL not be present when hub.channel.type = websocket . A subscriber-provided cryptographically random unique secret string that SHALL be used to compute an HMAC digest delivered in each notification. This parameter SHALL be less than 200 bytes in length. hub.challenge Conditional string Required when hub.channel.type = webhook . SHALL not be present when hub.channel.type = websocket . A Hub-generated, random string communicated during Intent Verification. hub.channel.endpoint Conditional string Required when hub.channel.type = websocket for re-subscribes and unsubscribes. SHALL not be present when hub.channel.type = webhook . The wss url identifying an existing websocket subscription. webhook Unsubscribe Request Example POST https://hub.example.com Host: hub Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/x-www-form-urlencoded hub.channel.type=webhook hub.callback=https%3A%2F%2Fapp.example.com%2Fsession%2Fcallback%2Fv7tfwuk17a hub.mode=unsubscribe hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065 hub.secret=shhh-this-is-a-secret hub.events=patient-open,patient-close hub.challenge=meu3we944ix80ox websocket Unsubscribe Request Example POST https://hub.example.com Host: hub Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/x-www-form-urlencoded hub.channel.type=websocket hub.channel.endpoint=wss%3A%2F%2Fhub.example.com%2Fee30d3b9-1558-464f-a299-cbad6f8135de%0A hub.mode=unsubscribe hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065 hub.events=patient-open,patient-close Event Notification The Hub SHALL notify subscribed apps of workflow-related events to which the app is subscribed. The notification is a JSON object communicated over the a webhook or websocket channel. webhook vs websocket A subsciber specifies the preferred hub.channel.type of either webhook or websocket during creation of its subscription. Only the event notification and subscription denied exchanges are affected by the channel type. Subscribers SHOULD use websockets when they are unable to host an accessible callback url. Implementer feedback is solicited around the preference and desired optionality of webhooks and websockets. Event Notification Request The notification to the subscriber SHALL include a description of the subscribed event that just occurred, an ISO 8601-2 formatted timestamp in UTC and an event identifier that is universally unique for the Hub. The timestamp MAY be used by subscribers to establish message affinity (message ordering) through the use of a message queue. The event identifier MAY be used to differentiate retried messages from user actions. Event Notification Request Details The notification's hub.event and context fields inform the subscriber of the current state of the user's session. The hub.event is a user workflow event, from the Event Catalog (or an organization-specific event in reverse-domain name notation). The context is an array of named FHIR resources (similar to CDS Hooks's context field) that describe the current content of the user's session. Each event in the Event Catalog defines what context is expected in the notification. Hubs MAY use the FHIR _elements parameter to limit the size of the data being passed while also including additional, local identifiers that are likely already in use in production implementations. Subscribers SHALL accept a full FHIR resource or the _elements -limited resource as defined in the Event Catalog. Field Optionality Type Description timestamp Required string ISO 8601-2 timestamp in UTC describing the time at which the event occurred with subsecond accuracy. id Required string Event identifier used to recognize retried notifications. This id SHALL be unique for the Hub, for example a GUID. event Required object A json object describing the event. See below. Field Optionality Type Description hub.topic Required string The session topic given in the subscription request. MAY be a guid. hub.event Required string The event that triggered this notification, taken from the list of events from the subscription request. context Required array An array of named FHIR objects corresponding to the user's context after the given event has occurred. Common FHIR resources are: Patient, Encounter, ImagingStudy and List. The Hub SHALL only return FHIR resources that are authorized to be accessed with the existing OAuth 2.0 access_token. webhook Event Notification Request Details Only for subscriptions with hub.channel.type = webhook , using the hub.secret from the subscription request, the Hub SHALL generate an HMAC signature of the payload and include that signature in the request headers of the notification. The X-Hub-Signature header's value SHALL be in the form method=signature where method is one of the recognized algorithm names and signature is the hexadecimal representation of the signature. The signature SHALL be computed using the HMAC algorithm ( RFC6151 ) with the request body as the data and the hub.secret as the key. POST https://app.example.com/session/callback/v7tfwuk17a HTTP/1.1 Host: subscriber X-Hub-Signature: sha256=dce85dc8dfde2426079063ad413268ac72dcf845f9f923193285e693be6ff3ae json object Event Notification Request Example For both webhook and websocket subscriptions, the event notification content is the same. { timestamp : 2018-01-08T01:37:05.14 , id : q9v3jubddqt63n1 , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : patient-open , context : [ { key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 , identifier : [ { type : { coding : [ { system : http://terminology.hl7.org/CodeSystem/v2-0203 , value : MR , display : Medication Record Number } text : MRN ] } } ] } } ] } } Event Notification Response The subscriber SHALL respond to the notification with an appropriate HTTP status code. In the case of a successful notification, the subscriber SHALL respond with an HTTP [RFC7231] 2xx response code to indicate a success; otherwise, the subscriber SHALL respond with an HTTP error status code. The Hub MAY use these statuses to track synchronization state. webhook Event Notification Response Example For webhook subscriptions, the HTTP status code is communicated in the HTTP response, as expected. HTTP/1.1 200 OK websocket Event Notification Response Example For websocket subscriptions, the id of the event notification and the HTTP status code is communicated from the client to Hub through the existing websocket channel, wrapped in a json object. Since the websocket channel does not have a synchronous request/response, this id is necessary for the Hub to correlate the response to the correct notification. Feedback from implementers is requested here. This is the only proposed communication from the subscriber to the Hub over websockets and the use of an HTTP status within a websocket connection, wrapped in json is weird. However, it seems important to enable the Hub to optionally track and/or broadcast synchronization state. Field Optionality Type Description id Required string Event identifier from the event notification to which this response corresponds. status Required numeric HTTP status code Numeric HTTP [RFC7231] response code to indicate success or failure of the event notification within the subscribing app. Any 2xx code indicates success, any other code indicates failure. { id : q9v3jubddqt63n1 , status : 200 } Event Notification Errors All standard events are defined outside of the base FHIRcast specification in the Event Catalog with the single exception of the infrastructural syncerror event. If the subscriber cannot follow the context of the event, for instance due to an error or a deliberate choice to not follow a context, the subscriber SHALL respond with an HTTP error status code as described in Event Notification Response . If the Hub does not receive a successful HTTP status from a event notification, it SHOULD generate a syncerror event to the other subscribers of that topic. A syncerror notification has the same structure as the other event notification with a single FHIR OperationOutcome as the event's context. Event Notification Error Request Request Context Change Parameters Field Optionality Type Description timestamp Required string ISO 8601-2 timestamp in UTC describing the time at which the event occurred with subsecond accuracy. id Required string Event identifier, which MAY be used to recognize retried notifications. This id SHALL be unique and could be a GUID. This id SHOULD be re-used from the previous event communicated to subscribers related to the synchronization failure. event Required object A json object describing the event. See below . Event Notification Error Event Object Parameters Field Optionality Type Description hub.topic Required string The session topic given in the subscription request. hub.event Required string Shall be the string syncerror . context Required array An array containing a single FHIR OperationOutcome. The OperationOutcome SHALL use a code of processing . Event Notification Error Example POST https://hub.example.com/7jaa86kgdudewiaq0wtu HTTP/1.1 Host: hub Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/json { timestamp : 2018-01-08T01:37:05.14 , id : q9v3jubddqt63n1 , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : syncerror , context : [ { key : operationoutcome , resource : { resourceType : OperationOutcome , issue : [ { severity : warning , code : processing , diagnostics : AppId3456 failed to follow context } ] } } ] } } Request Context Change Similar to the Hub's notifications to the subscriber, the subscriber MAY request context changes with an HTTP POST to the hub.url . The Hub SHALL either accept this context change by responding with any successful HTTP status or reject it by responding with any 4xx or 5xx HTTP status. The subscriber SHALL be capable of gracefully handling a rejected context request. Once a requested context change is accepted, the Hub SHALL broadcast the context notification to all subscribers, including the original requestor. Request Context Change Request Request Context Change Parameters Field Optionality Type Description timestamp Required string ISO 8601-2 timestamp in UTC describing the time at which the event occurred with subsecond accuracy. id Required string Event identifier, which MAY be used to recognize retried notifications. This id SHALL be uniquely generated by the subscriber and could be a GUID. Following an accepted context change request, the Hub MAY re-use this value in the broadcasted event notifications. event Required object A json object describing the event. See below . Request Context Change Event Object Parameters Field Optionality Type Description hub.topic Required string The session topic given in the subscription request. hub.event Required string The event that triggered this request for the subscriber, taken from the list of events from the subscription request. context Required array An array of named FHIR objects corresponding to the user's context after the given event has occurred. Common FHIR resources are: Patient, Encounter, ImagingStudy and List. POST https://hub.example.com/7jaa86kgdudewiaq0wtu HTTP/1.1 Host: hub Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/json { timestamp : 2018-01-08T01:40:05.14 , id : wYXStHqxFQyHFELh , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : close-patient-chart , context : [ { key : patient , resource : { resourceType : Patient , id : 798E4MyMcpCWHab9 , identifier : [ { type : { coding : [ { system : http://terminology.hl7.org/CodeSystem/v2-0203 , value : MR , display : Medication Record Number } text : MRN ] } } ] } } ] } } Events FHIRcast describes an workflow event subscription and notification scheme towards the goal of improving a clinician's workflow across multiple disparate applications. The set of events defined here are not a closed set; anyone is able to define new events to fit their use cases and propose those events to the community. New events are proposed in a prescribed format using the documentation template by submitting a pull request . FHIRcast events are versioned, and mature according to the Event Maturity Model . FHIRcast events are stateless. Context changes are a complete replacement of any previously communicated context, not \"deltas\". Understanding an event SHALL not require receiving a previous or future event. Event Definition Format Each event definition, specifies a single event name, a description of the workflow in which the event occurs, and contextual information associated with the event. FHIR is the interoperable data model used by FHIRcast. The context information associated with an event is communicated as subsets of FHIR resources. Event notifications SHALL include the elements of the FHIR resources defined in the context from the event definition. Event notification MAY include other elements of these resources. The source of these resources is the application's context or the FHIR server. The Hub SHALL return FHIR resources from the application's context. If the resource is not part of the application's context, it SHALL read them from the FHIR server. For example, when the ImagingStudy-open event occurs, the notification sent to a subscriber SHALL include the ImagingStudy FHIR resource. Hubs should send the results of an ImagingStudy FHIR read using the _elements query parameter, like so: ImagingStudy/{id}?_elements=identifier,accession and in accordance with the FHIR specification . A Hub may not support the _elements query parameter; a subscriber SHALL gracefully handle receiving a full FHIR resource in the context of a notification. Each defined event in the standard event catalog SHALL be defined in the following format. Event Definition Format: hook-name Most FHIRcast events conform to an extensible syntax based upon FHIR resources. In the rare case where the FHIR data model doesn't describe content in the session, FHIRcast events MAY be statically named. For example, FHIR doesn't cleanly contain the concept of a user or user's session. FHIRcast events SHOULD conform to this extensible syntax, patterned after the SMART on FHIR scope syntax. Expressed in EBNF notation, the FHIRcast syntax for workflow related events is: hub.events ::= ( fhir-resource ) '-' ( 'open' | 'close' | '*' ) Event names are unique and case-insensitive. Statically named events, specific to an organization, SHALL be named with reverse domain notation (e.g. org.example.patient-transmogrify ). Reverse domain notation SHALL not be used by a standard event catalog. Statically named events SHALL not contain a dash (\"-\"). Event Definition Format: Workflow Describe the workflow in which the event occurs. Event creators SHOULD include as much detail and clarity as possible to minimize any ambiguity or confusion amongst implementors. Event Definition Format: Context Describe the set of contextual data associated with this event. Only data logically and necessarily associated with the purpose of this workflow related event should be represented in context. An event SHALL contain all required data fields, MAY contain optional data fields and SHALL not contain any additional fields. All fields available within an event's context SHALL be defined in a table where each field is described by the following attributes: Key : The name of the field in the context JSON object. Event authors SHOULD name their context fields to be consistent with other existing events when referring to the same context field. Optionality : A string value of either REQUIRED , OPTIONAL or Required, if exists FHIR operation to generate context : A FHIR read or search string illustrating the intended content of the event. Description : A functional description of the context value. If this value can change according to the FHIR version in use, the description SHOULD describe the value for each supported FHIR version. Event Maturity Model The intent of the FHIRcast Event Maturity Model is to attain broad community engagement and consensus, before an event is labeled as mature, and to ensure that the event is necessary, implementable, and worthwhile to the systems that would reasonably be expected to use it. Implementer feedback should drive the maturity of new events. Diverse participation in open developer forums and events, such as HL7 FHIR Connectathons, is necessary to achieve significant implementer feedback. The below criteria will be evaluated with these goals in mind. Maturity Level Maturity title Requirements 0 Draft Event is correctly named and defined per the FHIRcast event template . 1 Submitted The above, and \u2026 Event definition is written up as a pull request using the Event template and community feedback is solicited from the community (e.g. the zulip FHIRcast stream](https://chat.fhir.org/#narrow/stream/179271-FHIRcast)). 2 Tested The above, and \u2026 The event has been tested and successfully supports interoperability among at least one Hub and two independent subscribing apps using semi-realistic data and scenarios (e.g. at a FHIR Connectathon). The github pull request defining the event is approved and published. 3 Considered The above, and \u2026 At least 3 distinct organizations recorded ten distinct implementer comments (including a github issue, tracker item, or comment on the event definition page), including at least two Hubs and three subscribing apps. The event has been tested at two connectathons. 4 Documented The above, and \u2026 The author agrees that the artifact is sufficiently stable to require implementer consultation for subsequent non-backward compatible changes. The event is implemented in the standard FHIRcast reference implementation and multiple prototype projects. The Event specification SHALL: Identify a broad set of example contexts in which the event may be used with a minimum of three, but as many as 8-10. Clearly differentiate the event from similar events or other standards to help an implementer determine if the event is correct for their scenario. Explicitly document example scenarios when the event should not be used. 5 Mature The above, and ... The event has been implemented in production in at least two Hubs and three independent subscribing apps. An HL7 working group ballots the event and the event has passed HL7 STU ballot. 6 Normative The above, and ... the responsible HL7 working group and the sponsoring working group agree the material is ready to lock down and the event has passed HL7 normative ballot Event Maturity As each event progresses through a process of being defined, tested, implemented, used in production environments, and balloted, the event's formal maturity level increases. Each event has its own maturity level, which SHALL be defined in the event's definition and correspond to the Event Maturity Model . Change Log Changes made to an event's definition SHALL be documented in a change log to ensure event consumers can track what has been changed over the life of an event. The change log SHALL contain the following elements: Version: The version of the change Description: A description of the change and its impact For example: Version Description 1.1 Added new context FHIR object 1.0.1 Clarified workflow description 1.0 Initial Release ---","title":"Feb2020Ballot"},{"location":"specification/Feb2020Ballot/#fhircast","text":"Draft \"Standard for Trial Use\" (STU2) This is the draft of the 1.1 release of the FHIRcast specification. We are currently working towards a 1.1 release and would love your feedback and proposed changes. Look at our current issue list and get involved!","title":"FHIRcast"},{"location":"specification/Feb2020Ballot/#overview","text":"The FHIRcast specification describes the APIs used to synchronize disparate healthcare applications' user interfaces in real time, allowing them to show the same clinical content to a user (or group of users). Once the subscribing app knows about the session , the app may subscribe to specific workflow-related events for the given session. The subscription is verified and the app is notified when those workflow-related events occur; for example, by the clinician opening a patient's chart. The subscribing app may initiate context changes by accessing APIs exposed by the Hub; for example, closing the patient's chart. The app deletes its subscription to no longer receive notifications. The notification message describing the workflow event is a simple json wrapper around one or more FHIR resources. FHIRcast recommends the HL7 SMART on FHIR launch protocol for both session discovery and API authentication. FHIRcast enables a subscriber to receive notifications either through a webhook or over a websocket connection, and is modeled on the W3C WebSub RFC , such as its use of GET vs POST interactions and a Hub for managing subscriptions. The below flow diagram illustrates the series of interactions. All data exchanged through the HTTP APIs SHALL be sent and received as JSON structures, and SHALL be transmitted over channels secured using the Hypertext Transfer Protocol (HTTP) over Transport Layer Security (TLS), also known as HTTPS and defined in RFC2818 .","title":"Overview"},{"location":"specification/Feb2020Ballot/#session-discovery","text":"A session is an abstract concept representing a shared workspace, such as user's login session over multiple applications or a shared view of one application distributed to multiple users. FHIRcast requires a session to have a unique, unguessable and opaque identifier. This identifier is exchanged as the value of the hub.topic parameter. Before establishing a subscription, an app must not only know the hub.topic , but also the the hub.url which contains the base url of the Hub. Systems SHOULD use SMART on FHIR to authorize, authenticate and exchange initial shared context. If using SMART, following a SMART on FHIR EHR launch or SMART on FHIR standalone launch , the app SHALL request and, if authorized, SHALL be granted one or more fhircast OAuth 2.0 scopes. Accompanying this scope grant, the authorization server SHALL supply the hub.url and hub.topic SMART launch parameters alongside the access token and other parameters appropriate to establish initial shared context. Per SMART, when scopes of openid and fhirUser are granted, the authorization server additionally sends the current user's identity in an id_token . Although FHIRcast works best with the SMART on FHIR launch and authorization process, implementation-specific launch, authentication, and authorization protocols may be possible. If not using SMART on FHIR, the mechanism enabling the app to discover the hub.url and hub.topic is not defined in FHIRcast. See other launch scenarios for guidance.","title":"Session Discovery"},{"location":"specification/Feb2020Ballot/#fhircast-authorization-smart-scopes","text":"FHIRcast defines OAuth 2.0 access scopes that correspond directly to FHIRcast events . Our scopes associate read or write permissions to an event. Apps that need to receive workflow related events should ask for read scopes. Apps that request context changes should ask for write scopes. Hubs may decide what specific interactions and operations will be enabled by these scopes. Expressed in EBNF notation, FHIRcast's scope syntax is: scope ::= ( 'fhircast' ) '/' ( FHIRcast-event ) '.' ( 'read' | 'write' | '*' ) The FHIRcast event name is also a computable syntax , the complete syntax for FHIRcast scopes is: scope ::= 'fhircast' '/' fhir-resource '-' ( 'open' | 'close' | '*' ) '.' ( 'read' | 'write' | '*' )","title":"FHIRcast Authorization &amp; SMART scopes"},{"location":"specification/Feb2020Ballot/#smart-launch-example","text":"Note that the SMART launch parameters include the Hub's base url and the session identifier in the hub.url and hub.topic fields. { access_token : i8hweunweunweofiwweoijewiwe , token_type : bearer , patient : 123 , expires_in : 3600, encounter : 456 , imagingstudy : 789 , hub.url : https://hub.example.com , hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , }","title":"SMART Launch Example"},{"location":"specification/Feb2020Ballot/#subscribing-and-unsubscribing","text":"Subscribing consists of two exchanges: Subscriber requests a subscription at the hub.url url. For hub.channel.type = webhook , Hub confirms the subscription was actually requested by the subscriber by contacting the hub.callback url. For hub.channel.type = websocket , Hub returns a wss url and subscriber establishes websocket connection. Unsubscribing works in the same way, except with a single parameter changed to indicate the desire to unsubscribe.","title":"Subscribing and Unsubscribing"},{"location":"specification/Feb2020Ballot/#subscription-request","text":"To create a subscription, the subscribing app SHALL perform an HTTP POST ( RFC7231 ) to the Hub's base url (as specified in hub.url ) with the parameters in the table below. This request SHALL have a Content-Type header of application/x-www-form-urlencoded and SHALL use the following parameters in its body, formatted accordingly: Field Optionality Type Description hub.channel.type Required string The subscriber SHALL specify a channel type of websocket or webhook . Subscription requests without this field SHOULD be rejected by the Hub. hub.mode Required string The literal string \"subscribe\" or \"unsubscribe\", depending on the goal of the request. hub.topic Required string The identifier of the user's session that the subscriber wishes to subscribe to or unsubscribe from. MAY be a guid. hub.events Required string Comma-separated list of event types from the Event Catalog for which the Subscriber wants notifications. hub.lease_seconds Optional number Number of seconds for which the subscriber would like to have the subscription active, given as a positive decimal integer. Hubs MAY choose to respect this value or not, depending on their own policies, and MAY set a default value if the subscriber omits the parameter. If using OAuth 2.0, the Hub SHALL limit the subscription lease seconds to be less than or equal to the access token's expiration. hub.callback Conditional string Required when hub.channel.type = webhook . SHALL not be present when hub.channel.type = websocket . The Subscriber's callback URL where notifications should be delivered. The callback URL SHOULD be an unguessable URL that is unique per subscription. hub.secret Conditional string Required when hub.channel.type = webhook . SHALL not be present when hub.channel.type = websocket . A subscriber-provided cryptographically random unique secret string that SHALL be used to compute an HMAC digest delivered in each notification. This parameter SHALL be less than 200 bytes in length. hub.channel.endpoint Conditional string Required when hub.channel.type = websocket for re-subscribes and unsubscribes. SHALL not be present when hub.channel.type = webhook . The wss url identifying an existing websocket subscription. If OAuth 2.0 authentication is used, this POST request SHALL contain the Bearer access token in the HTTP Authorization header. Hubs SHALL allow subscribers to re-request subscriptions that are already activated. Each subsequent and verified request to a Hub to subscribe or unsubscribe SHALL override the previous subscription state for a specific hub.topic , hub.callback / hub.channel.endpoint url, and hub.events combination. For example, a subscriber MAY modify its subscription by subscribing to or unsubscribing from additional events by sending subscription requests for additional events with the same topic and callback/endpoint url. The webhook callback URL MAY contain arbitrary query string parameters (e.g., ?foo=bar red=fish ). Hubs SHALL preserve the query string during subscription verification by appending new, Hub-defined, parameters to the end of the list using the (ampersand) character to join. When sending the event notifications, the Hub SHALL make a POST request to the callback URL including any query string parameters in the URL portion of the request, not as POST body parameters. The client that creates the subscription may not be the same system as the server hosting the callback url or connecting to the wss url. (For example, some type of federated authorization model could possibly exist between these two systems.) However, in FHIRcast, the Hub assumes that the same authorization and access rights apply to both the subscribing client and the system receiving notifications.","title":"Subscription Request"},{"location":"specification/Feb2020Ballot/#subscription-response","text":"If the Hub URL supports FHIRcast and is able to handle the subscription or unsubscription request, the Hub SHALL respond to a subscription request with an HTTP 202 \"Accepted\" response to indicate that the request was received and will now be verified by the Hub. If using websockets and supported by the Hub, the Content-Location HTTP header of the response SHALL contain a wss url. If webhooks, the Hub SHOULD perform the verification of intent as soon as possible. The websocket wss url SHALL be cryptographically random, unique and unguessable. If a Hub finds any errors in the subscription request, an appropriate HTTP error response code (4xx or 5xx) SHALL be returned. In the event of an error, the Hub SHOULD return a description of the error in the response body as plain text, used to assist the client developer in understanding the error. This is not meant to be shown to the end user. Hubs MAY decide to reject some subscription requests based on their own policies.","title":"Subscription Response"},{"location":"specification/Feb2020Ballot/#webhook-subscription-request-example","text":"In this example, the app asks to be notified of the patient-open and patient-close events. POST https://hub.example.com Host: hub.example.com Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/x-www-form-urlencoded hub.channel.type=webhook hub.callback=https%3A%2F%2Fapp.example.com%2Fsession%2Fcallback%2Fv7tfwuk17a hub.mode=subscribe hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065 hub.secret=shhh-this-is-a-secret hub.events=patient-open,patient-close","title":"webhook Subscription Request Example"},{"location":"specification/Feb2020Ballot/#webhook-subscription-response-example","text":"HTTP/1.1 202 Accepted","title":"webhook Subscription Response Example"},{"location":"specification/Feb2020Ballot/#websocket-initial-subscription-request-example","text":"In this example, the app creates an initial subscription and asks to be notified of the patient-open and patient-close events. POST https://hub.example.com Host: hub.example.com Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/x-www-form-urlencoded hub.channel.type=websocket hub.mode=subscribe hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065 hub.events=patient-open,patient-close","title":"websocket Initial Subscription Request Example"},{"location":"specification/Feb2020Ballot/#websocket-subscription-response-example","text":"HTTP/1.1 202 Accepted Content-Location: wss://hub.example.com/ee30d3b9-1558-464f-a299-cbad6f8135de","title":"websocket Subscription Response Example"},{"location":"specification/Feb2020Ballot/#subscription-denial","text":"If (and when) the subscription is denied, the Hub SHALL inform the subscriber. This can occur when the subscription is requested for a variety of reasons, or it can occur after the subscription had already been accepted because the Hub no longer supports that subscription (e.g. it has expired). The communication mechanism for a subscription denial varies per hub.channel.type , but the information communicated from the Hub to the subscriber does not. Field Optionality Type Description hub.mode Required string The literal string \"denied\". hub.topic Required string The topic given in the corresponding subscription request. MAY be a guid. hub.events Required string A comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request, which are being denied. hub.reason Optional string The Hub may include a reason. The subscription MAY be denied by the Hub at any point (even if it was previously accepted). The Subscriber SHOULD then consider that the subscription is not possible anymore. The below webhook flow diagram and websocket flow diagram and examples illustrate the subscription denial sequence and message details.","title":"Subscription Denial"},{"location":"specification/Feb2020Ballot/#webhook-subscription-denial","text":"To deny a subscription with hub.channel.type = webhook , the Hub sends an HTTP GET request to the subscriber's callback URL as given in the subscription request. This request appends the fields as query string arguments. The subscriber SHALL respond with an HTTP success (2xx) code.","title":"webhook Subscription Denial"},{"location":"specification/Feb2020Ballot/#webhook-subscription-denial-sequence","text":"","title":"webhook Subscription Denial Sequence"},{"location":"specification/Feb2020Ballot/#webhook-subscription-denial-example","text":"GET https://app.example.com/session/callback/v7tfwuk17a?hub.mode=denied hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065hub.events=patient-open,patient-close hub.reason=session+unexpectedly+stopped HTTP 1.1 Host: subscriber","title":"webhook Subscription Denial Example"},{"location":"specification/Feb2020Ballot/#websocket-subscription-denial","text":"To deny a subscription with hub.channel.type = websocket , the Hub sends a json object to the subscriber through the established websocket connection.","title":"websocket Subscription Denial"},{"location":"specification/Feb2020Ballot/#websocketsubscription-denial-sequence","text":"","title":"websocketSubscription Denial Sequence"},{"location":"specification/Feb2020Ballot/#websocket-subscription-denial-example","text":"{ hub.mode : denied , hub.topic : fba7b1e2-53e9-40aa-883a-2af57ab4e2c , hub.events : patient-open,patient-close , hub.reason : session unexpectedly stopped }","title":"websocket Subscription Denial Example"},{"location":"specification/Feb2020Ballot/#subscription-confirmation","text":"If a subscription or unsubscription is not denied, the Hub SHALL confirm the subscription. For hub.channel.type = webhook , the confirmation verifies the intent of the subscriber and ensures that the subscriber actually controls the callback url. For hub.channel.type s of both webhook and websocket , this subscription confirmation step informs the subscriber of the details of Hub's recently created subscription.","title":"Subscription Confirmation"},{"location":"specification/Feb2020Ballot/#webhook-intent-verification-request","text":"In order to prevent an attacker from creating unwanted subscriptions on behalf of a subscriber (or unsubscribing desired ones), a Hub must ensure that a webhook subscriber did indeed send the subscription request. The Hub SHALL verify a subscription request by sending an HTTPS GET request to the subscriber's callback URL as given in the subscription request. This request SHALL have the following query string arguments appended Field Optionality Type Description hub.mode Required string The literal string \"subscribe\" or \"unsubscribe\", which matches the original request to the Hub from the subscriber. hub.topic Required string The session topic given in the corresponding subscription request. MAY be a guid. hub.events Required string A comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request. hub.challenge Required string A Hub-generated, random string that SHALL be echoed by the subscriber to verify the subscription. hub.lease_seconds Required number The Hub-determined number of seconds that the subscription will stay active before expiring, measured from the time the verification request was made from the Hub to the subscriber. If provided to the client, the Hub SHALL unsubscribe the client once lease_seconds has expired and MAY send a subscription denial. If the subscriber wishes to continue the subscription it MAY resubscribe.","title":"webhook Intent Verification Request"},{"location":"specification/Feb2020Ballot/#webhook-intent-verification-request-example","text":"GET https://app.example.com/session/callback/v7tfwuk17a?hub.mode=subscribe hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065 hub.events=patient-open,patient-close hub.challenge=meu3we944ix80ox hub.lease_seconds=7200 HTTP 1.1 Host: subscriber","title":"webhook Intent Verification Request Example"},{"location":"specification/Feb2020Ballot/#webhook-intent-verification-response","text":"If the hub.topic of the Intent Verification Request corresponds to a pending subscription or unsubscription that the subscriber wishes to carry out it SHALL respond with an HTTP success (2xx) code, a header of Content-Type: text/html , and a response body equal to the hub.challenge parameter. If the subscriber does not agree with the action, the subscriber SHALL respond with a 404 \"Not Found\" response. The Hub SHALL consider other server response codes (3xx, 4xx, 5xx) to mean that the verification request has failed. If the subscriber returns an HTTP success (2xx) but the content body does not match the hub.challenge parameter, the Hub SHALL also consider verification to have failed. The below flow diagram and example illustrate the successful subscription sequence and message details.","title":"webhook Intent Verification Response"},{"location":"specification/Feb2020Ballot/#webhook-successful-subscription-sequence","text":"","title":"webhook Successful Subscription Sequence"},{"location":"specification/Feb2020Ballot/#webhook-intent-verification-response-example","text":"HTTP/1.1 200 OK Content-Type: text/html meu3we944ix80ox NOTE The spec uses GET vs POST to differentiate between the confirmation/denial of the subscription request and delivering the content. While this is not considered \"best practice\" from a web architecture perspective, it does make implementation of the callback URL simpler. Since the POST body of the content distribution request may be any arbitrary content type and only includes the actual content of the document, using the GET vs POST distinction to switch between handling these two modes makes implementations simpler.","title":"webhook Intent Verification Response Example"},{"location":"specification/Feb2020Ballot/#websocket-subscription-confirmation","text":"To confirm a subscription request, upon the subscriber establishing a websocket connection to the hub.channel.endpoint wss url, the Hub SHALL send a confirmation. This confirmation includes the following elements: Field Optionality Type Description hub.mode Required string The literal string \"subscribe\". hub.topic Required string The session topic given in the corresponding subscription request. hub.events Required string A comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request. hub.lease_seconds Required number The Hub-determined number of seconds that the subscription will stay active before expiring, measured from the time the verification request was made from the Hub to the subscriber. If provided to the client, the Hub SHALL unsubscribe the client once lease_seconds has expired and MAY send a subscription denial. If the subscriber wishes to continue the subscription it MAY resubscribe.","title":"websocket Subscription Confirmation"},{"location":"specification/Feb2020Ballot/#websocket-intent-verification-request-example","text":"{ hub.mode : subscribe , hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.events : patient-open,patient-close , hub.lease-seconds : 7200 }","title":"websocket Intent Verification Request Example"},{"location":"specification/Feb2020Ballot/#unsubscribe","text":"Once a subscribing app no longer wants to receive event notifications, it SHALL unsubscribe from the session. The unsubscribe request message mirrors the subscribe request message. To unsubscribe, the hub.mode SHALL be equal to the lowercase string unsubscribe . Only unsubscribes for hub.channel.type = webhook SHALL include the hub.callback , hub.secret , and hub.challenge . Only unsubscribes for hub.channel.type = websocket SHALL include the wss websocket url in hub.channel.endpoint . Note that the unsubscribe request is performed over HTTP, even for subscriptions using websockets. Field Optionality Type Description hub.channel.type Required string The subscriber SHALL specify a channel type of websocket or webhook . Subscription requests without this field SHOULD be rejected by the Hub. hub.mode Required string The literal string \"unsubscribe\". hub.topic Required string The identifier of the user's session that the subscriber wishes to subscribe to or unsubscribe from. MAY be a guid. hub.events Required string Comma-separated list of event types from the Event Catalog for which the Subscriber no longer wants notifications. hub.callback Conditional string Required when hub.channel.type = webhook . SHALL not be present when hub.channel.type = websocket . hub.secret Conditional string Required when hub.channel.type = webhook . SHALL not be present when hub.channel.type = websocket . A subscriber-provided cryptographically random unique secret string that SHALL be used to compute an HMAC digest delivered in each notification. This parameter SHALL be less than 200 bytes in length. hub.challenge Conditional string Required when hub.channel.type = webhook . SHALL not be present when hub.channel.type = websocket . A Hub-generated, random string communicated during Intent Verification. hub.channel.endpoint Conditional string Required when hub.channel.type = websocket for re-subscribes and unsubscribes. SHALL not be present when hub.channel.type = webhook . The wss url identifying an existing websocket subscription.","title":"Unsubscribe"},{"location":"specification/Feb2020Ballot/#webhook-unsubscribe-request-example","text":"POST https://hub.example.com Host: hub Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/x-www-form-urlencoded hub.channel.type=webhook hub.callback=https%3A%2F%2Fapp.example.com%2Fsession%2Fcallback%2Fv7tfwuk17a hub.mode=unsubscribe hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065 hub.secret=shhh-this-is-a-secret hub.events=patient-open,patient-close hub.challenge=meu3we944ix80ox","title":"webhook Unsubscribe Request Example"},{"location":"specification/Feb2020Ballot/#websocket-unsubscribe-request-example","text":"POST https://hub.example.com Host: hub Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/x-www-form-urlencoded hub.channel.type=websocket hub.channel.endpoint=wss%3A%2F%2Fhub.example.com%2Fee30d3b9-1558-464f-a299-cbad6f8135de%0A hub.mode=unsubscribe hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065 hub.events=patient-open,patient-close","title":"websocket Unsubscribe Request Example"},{"location":"specification/Feb2020Ballot/#event-notification","text":"The Hub SHALL notify subscribed apps of workflow-related events to which the app is subscribed. The notification is a JSON object communicated over the a webhook or websocket channel.","title":"Event Notification"},{"location":"specification/Feb2020Ballot/#webhook-vs-websocket","text":"A subsciber specifies the preferred hub.channel.type of either webhook or websocket during creation of its subscription. Only the event notification and subscription denied exchanges are affected by the channel type. Subscribers SHOULD use websockets when they are unable to host an accessible callback url. Implementer feedback is solicited around the preference and desired optionality of webhooks and websockets.","title":"webhook vs websocket"},{"location":"specification/Feb2020Ballot/#event-notification-request","text":"The notification to the subscriber SHALL include a description of the subscribed event that just occurred, an ISO 8601-2 formatted timestamp in UTC and an event identifier that is universally unique for the Hub. The timestamp MAY be used by subscribers to establish message affinity (message ordering) through the use of a message queue. The event identifier MAY be used to differentiate retried messages from user actions.","title":"Event Notification Request"},{"location":"specification/Feb2020Ballot/#event-notification-request-details","text":"The notification's hub.event and context fields inform the subscriber of the current state of the user's session. The hub.event is a user workflow event, from the Event Catalog (or an organization-specific event in reverse-domain name notation). The context is an array of named FHIR resources (similar to CDS Hooks's context field) that describe the current content of the user's session. Each event in the Event Catalog defines what context is expected in the notification. Hubs MAY use the FHIR _elements parameter to limit the size of the data being passed while also including additional, local identifiers that are likely already in use in production implementations. Subscribers SHALL accept a full FHIR resource or the _elements -limited resource as defined in the Event Catalog. Field Optionality Type Description timestamp Required string ISO 8601-2 timestamp in UTC describing the time at which the event occurred with subsecond accuracy. id Required string Event identifier used to recognize retried notifications. This id SHALL be unique for the Hub, for example a GUID. event Required object A json object describing the event. See below. Field Optionality Type Description hub.topic Required string The session topic given in the subscription request. MAY be a guid. hub.event Required string The event that triggered this notification, taken from the list of events from the subscription request. context Required array An array of named FHIR objects corresponding to the user's context after the given event has occurred. Common FHIR resources are: Patient, Encounter, ImagingStudy and List. The Hub SHALL only return FHIR resources that are authorized to be accessed with the existing OAuth 2.0 access_token.","title":"Event Notification Request Details"},{"location":"specification/Feb2020Ballot/#webhook-event-notification-request-details","text":"Only for subscriptions with hub.channel.type = webhook , using the hub.secret from the subscription request, the Hub SHALL generate an HMAC signature of the payload and include that signature in the request headers of the notification. The X-Hub-Signature header's value SHALL be in the form method=signature where method is one of the recognized algorithm names and signature is the hexadecimal representation of the signature. The signature SHALL be computed using the HMAC algorithm ( RFC6151 ) with the request body as the data and the hub.secret as the key. POST https://app.example.com/session/callback/v7tfwuk17a HTTP/1.1 Host: subscriber X-Hub-Signature: sha256=dce85dc8dfde2426079063ad413268ac72dcf845f9f923193285e693be6ff3ae json object","title":"webhook Event Notification Request Details"},{"location":"specification/Feb2020Ballot/#event-notification-request-example","text":"For both webhook and websocket subscriptions, the event notification content is the same. { timestamp : 2018-01-08T01:37:05.14 , id : q9v3jubddqt63n1 , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : patient-open , context : [ { key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 , identifier : [ { type : { coding : [ { system : http://terminology.hl7.org/CodeSystem/v2-0203 , value : MR , display : Medication Record Number } text : MRN ] } } ] } } ] } }","title":"Event Notification Request Example"},{"location":"specification/Feb2020Ballot/#event-notification-response","text":"The subscriber SHALL respond to the notification with an appropriate HTTP status code. In the case of a successful notification, the subscriber SHALL respond with an HTTP [RFC7231] 2xx response code to indicate a success; otherwise, the subscriber SHALL respond with an HTTP error status code. The Hub MAY use these statuses to track synchronization state.","title":"Event Notification Response"},{"location":"specification/Feb2020Ballot/#webhook-event-notification-response-example","text":"For webhook subscriptions, the HTTP status code is communicated in the HTTP response, as expected. HTTP/1.1 200 OK","title":"webhook Event Notification Response Example"},{"location":"specification/Feb2020Ballot/#websocket-event-notification-response-example","text":"For websocket subscriptions, the id of the event notification and the HTTP status code is communicated from the client to Hub through the existing websocket channel, wrapped in a json object. Since the websocket channel does not have a synchronous request/response, this id is necessary for the Hub to correlate the response to the correct notification. Feedback from implementers is requested here. This is the only proposed communication from the subscriber to the Hub over websockets and the use of an HTTP status within a websocket connection, wrapped in json is weird. However, it seems important to enable the Hub to optionally track and/or broadcast synchronization state. Field Optionality Type Description id Required string Event identifier from the event notification to which this response corresponds. status Required numeric HTTP status code Numeric HTTP [RFC7231] response code to indicate success or failure of the event notification within the subscribing app. Any 2xx code indicates success, any other code indicates failure. { id : q9v3jubddqt63n1 , status : 200 }","title":"websocket Event Notification Response Example"},{"location":"specification/Feb2020Ballot/#event-notification-errors","text":"All standard events are defined outside of the base FHIRcast specification in the Event Catalog with the single exception of the infrastructural syncerror event. If the subscriber cannot follow the context of the event, for instance due to an error or a deliberate choice to not follow a context, the subscriber SHALL respond with an HTTP error status code as described in Event Notification Response . If the Hub does not receive a successful HTTP status from a event notification, it SHOULD generate a syncerror event to the other subscribers of that topic. A syncerror notification has the same structure as the other event notification with a single FHIR OperationOutcome as the event's context.","title":"Event Notification Errors"},{"location":"specification/Feb2020Ballot/#event-notification-error-request","text":"","title":"Event Notification Error Request"},{"location":"specification/Feb2020Ballot/#request-context-change-parameters","text":"Field Optionality Type Description timestamp Required string ISO 8601-2 timestamp in UTC describing the time at which the event occurred with subsecond accuracy. id Required string Event identifier, which MAY be used to recognize retried notifications. This id SHALL be unique and could be a GUID. This id SHOULD be re-used from the previous event communicated to subscribers related to the synchronization failure. event Required object A json object describing the event. See below .","title":"Request Context Change Parameters"},{"location":"specification/Feb2020Ballot/#event-notification-error-event-object-parameters","text":"Field Optionality Type Description hub.topic Required string The session topic given in the subscription request. hub.event Required string Shall be the string syncerror . context Required array An array containing a single FHIR OperationOutcome. The OperationOutcome SHALL use a code of processing .","title":"Event Notification Error Event Object Parameters"},{"location":"specification/Feb2020Ballot/#event-notification-error-example","text":"POST https://hub.example.com/7jaa86kgdudewiaq0wtu HTTP/1.1 Host: hub Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/json { timestamp : 2018-01-08T01:37:05.14 , id : q9v3jubddqt63n1 , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : syncerror , context : [ { key : operationoutcome , resource : { resourceType : OperationOutcome , issue : [ { severity : warning , code : processing , diagnostics : AppId3456 failed to follow context } ] } } ] } }","title":"Event Notification Error Example"},{"location":"specification/Feb2020Ballot/#request-context-change","text":"Similar to the Hub's notifications to the subscriber, the subscriber MAY request context changes with an HTTP POST to the hub.url . The Hub SHALL either accept this context change by responding with any successful HTTP status or reject it by responding with any 4xx or 5xx HTTP status. The subscriber SHALL be capable of gracefully handling a rejected context request. Once a requested context change is accepted, the Hub SHALL broadcast the context notification to all subscribers, including the original requestor.","title":"Request Context Change"},{"location":"specification/Feb2020Ballot/#request-context-change-request","text":"","title":"Request Context Change Request"},{"location":"specification/Feb2020Ballot/#request-context-change-parameters_1","text":"Field Optionality Type Description timestamp Required string ISO 8601-2 timestamp in UTC describing the time at which the event occurred with subsecond accuracy. id Required string Event identifier, which MAY be used to recognize retried notifications. This id SHALL be uniquely generated by the subscriber and could be a GUID. Following an accepted context change request, the Hub MAY re-use this value in the broadcasted event notifications. event Required object A json object describing the event. See below .","title":"Request Context Change Parameters"},{"location":"specification/Feb2020Ballot/#request-context-change-event-object-parameters","text":"Field Optionality Type Description hub.topic Required string The session topic given in the subscription request. hub.event Required string The event that triggered this request for the subscriber, taken from the list of events from the subscription request. context Required array An array of named FHIR objects corresponding to the user's context after the given event has occurred. Common FHIR resources are: Patient, Encounter, ImagingStudy and List. POST https://hub.example.com/7jaa86kgdudewiaq0wtu HTTP/1.1 Host: hub Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/json { timestamp : 2018-01-08T01:40:05.14 , id : wYXStHqxFQyHFELh , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : close-patient-chart , context : [ { key : patient , resource : { resourceType : Patient , id : 798E4MyMcpCWHab9 , identifier : [ { type : { coding : [ { system : http://terminology.hl7.org/CodeSystem/v2-0203 , value : MR , display : Medication Record Number } text : MRN ] } } ] } } ] } }","title":"Request Context Change Event Object Parameters"},{"location":"specification/Feb2020Ballot/#events","text":"FHIRcast describes an workflow event subscription and notification scheme towards the goal of improving a clinician's workflow across multiple disparate applications. The set of events defined here are not a closed set; anyone is able to define new events to fit their use cases and propose those events to the community. New events are proposed in a prescribed format using the documentation template by submitting a pull request . FHIRcast events are versioned, and mature according to the Event Maturity Model . FHIRcast events are stateless. Context changes are a complete replacement of any previously communicated context, not \"deltas\". Understanding an event SHALL not require receiving a previous or future event.","title":"Events"},{"location":"specification/Feb2020Ballot/#event-definition-format","text":"Each event definition, specifies a single event name, a description of the workflow in which the event occurs, and contextual information associated with the event. FHIR is the interoperable data model used by FHIRcast. The context information associated with an event is communicated as subsets of FHIR resources. Event notifications SHALL include the elements of the FHIR resources defined in the context from the event definition. Event notification MAY include other elements of these resources. The source of these resources is the application's context or the FHIR server. The Hub SHALL return FHIR resources from the application's context. If the resource is not part of the application's context, it SHALL read them from the FHIR server. For example, when the ImagingStudy-open event occurs, the notification sent to a subscriber SHALL include the ImagingStudy FHIR resource. Hubs should send the results of an ImagingStudy FHIR read using the _elements query parameter, like so: ImagingStudy/{id}?_elements=identifier,accession and in accordance with the FHIR specification . A Hub may not support the _elements query parameter; a subscriber SHALL gracefully handle receiving a full FHIR resource in the context of a notification. Each defined event in the standard event catalog SHALL be defined in the following format.","title":"Event Definition Format"},{"location":"specification/Feb2020Ballot/#event-definition-format-hook-name","text":"Most FHIRcast events conform to an extensible syntax based upon FHIR resources. In the rare case where the FHIR data model doesn't describe content in the session, FHIRcast events MAY be statically named. For example, FHIR doesn't cleanly contain the concept of a user or user's session. FHIRcast events SHOULD conform to this extensible syntax, patterned after the SMART on FHIR scope syntax. Expressed in EBNF notation, the FHIRcast syntax for workflow related events is: hub.events ::= ( fhir-resource ) '-' ( 'open' | 'close' | '*' ) Event names are unique and case-insensitive. Statically named events, specific to an organization, SHALL be named with reverse domain notation (e.g. org.example.patient-transmogrify ). Reverse domain notation SHALL not be used by a standard event catalog. Statically named events SHALL not contain a dash (\"-\").","title":"Event Definition Format: hook-name"},{"location":"specification/Feb2020Ballot/#event-definition-format-workflow","text":"Describe the workflow in which the event occurs. Event creators SHOULD include as much detail and clarity as possible to minimize any ambiguity or confusion amongst implementors.","title":"Event Definition Format: Workflow"},{"location":"specification/Feb2020Ballot/#event-definition-format-context","text":"Describe the set of contextual data associated with this event. Only data logically and necessarily associated with the purpose of this workflow related event should be represented in context. An event SHALL contain all required data fields, MAY contain optional data fields and SHALL not contain any additional fields. All fields available within an event's context SHALL be defined in a table where each field is described by the following attributes: Key : The name of the field in the context JSON object. Event authors SHOULD name their context fields to be consistent with other existing events when referring to the same context field. Optionality : A string value of either REQUIRED , OPTIONAL or Required, if exists FHIR operation to generate context : A FHIR read or search string illustrating the intended content of the event. Description : A functional description of the context value. If this value can change according to the FHIR version in use, the description SHOULD describe the value for each supported FHIR version.","title":"Event Definition Format: Context"},{"location":"specification/Feb2020Ballot/#event-maturity-model","text":"The intent of the FHIRcast Event Maturity Model is to attain broad community engagement and consensus, before an event is labeled as mature, and to ensure that the event is necessary, implementable, and worthwhile to the systems that would reasonably be expected to use it. Implementer feedback should drive the maturity of new events. Diverse participation in open developer forums and events, such as HL7 FHIR Connectathons, is necessary to achieve significant implementer feedback. The below criteria will be evaluated with these goals in mind. Maturity Level Maturity title Requirements 0 Draft Event is correctly named and defined per the FHIRcast event template . 1 Submitted The above, and \u2026 Event definition is written up as a pull request using the Event template and community feedback is solicited from the community (e.g. the zulip FHIRcast stream](https://chat.fhir.org/#narrow/stream/179271-FHIRcast)). 2 Tested The above, and \u2026 The event has been tested and successfully supports interoperability among at least one Hub and two independent subscribing apps using semi-realistic data and scenarios (e.g. at a FHIR Connectathon). The github pull request defining the event is approved and published. 3 Considered The above, and \u2026 At least 3 distinct organizations recorded ten distinct implementer comments (including a github issue, tracker item, or comment on the event definition page), including at least two Hubs and three subscribing apps. The event has been tested at two connectathons. 4 Documented The above, and \u2026 The author agrees that the artifact is sufficiently stable to require implementer consultation for subsequent non-backward compatible changes. The event is implemented in the standard FHIRcast reference implementation and multiple prototype projects. The Event specification SHALL: Identify a broad set of example contexts in which the event may be used with a minimum of three, but as many as 8-10. Clearly differentiate the event from similar events or other standards to help an implementer determine if the event is correct for their scenario. Explicitly document example scenarios when the event should not be used. 5 Mature The above, and ... The event has been implemented in production in at least two Hubs and three independent subscribing apps. An HL7 working group ballots the event and the event has passed HL7 STU ballot. 6 Normative The above, and ... the responsible HL7 working group and the sponsoring working group agree the material is ready to lock down and the event has passed HL7 normative ballot","title":"Event Maturity Model"},{"location":"specification/Feb2020Ballot/#event-maturity","text":"As each event progresses through a process of being defined, tested, implemented, used in production environments, and balloted, the event's formal maturity level increases. Each event has its own maturity level, which SHALL be defined in the event's definition and correspond to the Event Maturity Model .","title":"Event Maturity"},{"location":"specification/Feb2020Ballot/#change-log","text":"Changes made to an event's definition SHALL be documented in a change log to ensure event consumers can track what has been changed over the life of an event. The change log SHALL contain the following elements: Version: The version of the change Description: A description of the change and its impact For example: Version Description 1.1 Added new context FHIR object 1.0.1 Clarified workflow description 1.0 Initial Release ---","title":"Change Log"},{"location":"specification/May2019Ballot/","text":"FHIRcast \"1.0 Draft\" This is the draft of the 1.0 release of the FHIRcast specification. We are currently working towards a 1.0 release and would love your feedback and proposed changes. Look at our current issue list and get involved! Overview The FHIRcast specification describes the APIs and interactions to synchronize healthcare applications in real time to show the same clinical content to a user. All data exchanged through the HTTP APIs MUST be sent and received as JSON structures, and MUST be transmitted over channels secured using the Hypertext Transfer Protocol (HTTP) over Transport Layer Security (TLS), also known as HTTPS and defined in RFC2818 . FHIRcast is modeled on the webhook design pattern and specifically the W3C WebSub RFC and builds on the HL7 SMART on FHIR launch protocol . An app subscribes to specific workflow events for a given session, the subscription is verified and the app is notified when those workflow events occur; for example, by the clinician opening a patient's chart. The subscring app may query a session's current context and initiate context changes by accessing APIs exposed by the Hub. The app deletes its subscription when it no longer wants to receive notifications. In all cases the app authenticates to the Hub with an OAuth 2.0 bearer token. Session Discovery Before establishing a subscription, an app must know the hub.topic which is an unique url identifying the session, and the cast-hub which is the base url of the Hub. The app discovers these two urls as part of a SMART on FHIR launch. The app MUST either be launched from the driving application following the SMART on FHIR EHR launch flow or the app may initiate the launch following the SMART on FHIR standalone launch . In either case, the app MUST request and be granted the fhircast OAuth2.0 scope. Accompanying this scope grant, the authorization server MUST supply the cast-hub and hub.topic SMART launch parameters alongside the access token. These parameters identify the Hub's base url, and a unique, opaque identifier of the current user's session, respectivly. Per SMART, when scopes of openid and fhirUser are granted, the app will additionally receive the current user's identity in an id_token . SMART Launch Example Note that the SMART launch parameters include the Hub's base url and and the session identifier in the cast-hub and hub.topic fields. { access_token : i8hweunweunweofiwweoijewiwe , token_type : bearer , expires_in : 3600, patient : 123 , encounter : 456 , imagingstudy : 789 , cast-hub : https://hub.example.com , hub.topic : https://hub.example.com/7jaa86kgdudewiaq0wtu , } Although FHIRcast works best with the SMART on FHIR launch and authorization process, implementation-specific launch, authentication, and authorization protocols may be possible. See other launch scenarios for guidance. Subscribing and Unsubscribing Subscribing consists of two exchanges: Subscriber requests a subscription at the cast-hub url. Hub confirms the subscription was actually requested by the subscriber by contacting the hub.callback url. Unsubscribing works in the same way, except with a single parameter changed to indicate the desire to unsubscribe. Subscription Request To create a subscription, the subscribing app performs an HTTP POST ( RFC7231 ) to the Hub's base url (as specified in cast-hub ) with the following parameters, authenticating with the Bearer access token. This request MUST have a Content-Type header of application/x-www-form-urlencoded and MUST use the following parameters in its body, formatted accordingly: Subscription Request Parameters Field Optionality Type Description hub.callback Required string The Subscriber's callback URL where notifications should be delivered. The callback URL SHOULD be an unguessable URL that is unique per subscription. hub.mode Required string The literal string \"subscribe\" or \"unsubscribe\", depending on the goal of the request. hub.topic Required string The uri of the user's session that the subscriber wishes to subscribe to or unsubscribe from. hub.secret Required string A subscriber-provided cryptographically random unique secret string that will be used to compute an HMAC digest delivered in each notification. This parameter MUST be less than 200 bytes in length. hub.events Required string Comma-separated list of event types from the Event Catalog for which the Subscriber wants notifications. hub.lease_seconds Optional number Number of seconds for which the subscriber would like to have the subscription active, given as a positive decimal integer. Hubs MAY choose to respect this value or not, depending on their own policies, and MAY set a default value if the subscriber omits the parameter. Hubs MUST allow subscribers to re-request subscriptions that are already activated. Each subsequent request to a hub to subscribe or unsubscribe MUST override the previous subscription state for a specific topic, and callback URL combination once the action is verified. The callback URL MAY contain arbitrary query string parameters (e.g., ?foo=bar red=fish). Hubs MUST preserve the query string during subscription verification by appending new parameters to the end of the list using the (ampersand) character to join. When sending the content distribution request, the hub will make a POST request to the callback URL including any query string parameters in the URL portion of the request, not as POST body parameters. Within FHIRcast, the client that creates a subscription and the server that hosts the callback url are the same entity. If these roles are split, the Hub assumes that the same authorization and access rights apply to both systems. Subscription Request Example In this example, the app asks to be notified of the open-patient-chart and close-patient-chart events. POST https://hub.example.com Host: hub.example.com Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/x-www-form-urlencoded hub.callback=https%3A%2F%2Fapp.example.com%2Fsession%2Fcallback%2Fv7tfwuk17a hub.mode=subscribe hub.topic=https%3A%2F%2Fhub.example.com%2F7jaa86kgdudewiaq0wtu hub.secret=shhh-this-is-a-secret hub.events=patient-open-chart,patient-close-chart Subscription Response If the Hub URL supports FHIRcast and is able to handle the subscription or unsubscription request, the Hub MUST respond to a subscription request with an HTTP 202 \"Accepted\" response to indicate that the request was received and will now be verified by the Hub. The Hub SHOULD perform the verification of intent as soon as possible. If a Hub finds any errors in the subscription request, an appropriate HTTP error response code (4xx or 5xx) MUST be returned. In the event of an error, the Hub SHOULD return a description of the error in the response body as plain text, used to assist the client developer in understanding the error. This is not meant to be shown to the end user. Hubs MAY decide to reject some callback URLs or topic URIs based on their own policies. Subscription Response Example HTTP/1.1 202 Accepted Subscription Denial If (and when) the subscription is denied, the Hub MUST inform the subscriber by sending an HTTP GET request to the subscriber's callback URL as given in the subscription request. This request has the following query string arguments appended. Subscription Denial Parameters Field Optionality Type Description hub.mode Required string The literal string \"denied\". hub.topic Required string The topic uri given in the corresponding subscription request. hub.events Required string A comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request. hub.reason Optional string The Hub may include a reason for which the subscription has been denied. The subscription MAY be denied by the Hub at any point (even if it was previously accepted). The Subscriber SHOULD then consider that the subscription is not possible anymore. Subscription Denial Example GET https://app.example.com/session/callback/v7tfwuk17a?hub.mode=denied hub.topic=https%3A%2F%2Fhub.example.com%2F7jaa86kgdudewiaq0wtu hub.events=open-patient-chart,close-patient-chart hub.challenge=meu3we944ix80ox hub.reason=session+unexpectedly+stopped HTTP 1.1 Host: subscriber Intent Verification If (and when) the subscription is accepted, the Hub MUST perform the verification of intent of the subscriber. The hub.callback url verification process ensures that the subscriber actually controls the callback url. Intent Verification Request In order to prevent an attacker from creating unwanted subscriptions on behalf of a subscriber (or unsubscribing desired ones), a Hub must ensure that the subscriber did indeed send the subscription request. The Hub verifies a subscription request by sending an HTTPS GET ( RFC2818 ) request to the subscriber's callback URL as given in the subscription request. This request has the following query string arguments appended: Verification Parameters Field Optionality Type Description hub.mode Required string The literal string \"subscribe\" or \"unsubscribe\", which matches the original request to the hub from the subscriber. hub.topic Required string The topic session uri given in the corresponding subscription request. hub.events Required string A comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request. hub.challenge Required string A Hub-generated, random string that MUST be echoed by the subscriber to verify the subscription. hub.lease_seconds Required number The Hub-determined number of seconds that the subscription will stay active before expiring, measured from the time the verification request was made from the Hub to the subscriber. Subscribers must renew their subscription before the lease seconds period is over to avoid interruption. Intent Verification Request Example GET https://app.example.com/session/callback/v7tfwuk17a?hub.mode=subscribe hub.topic=7jaa86kgdudewiaq0wtu hub.events=open-patient-chart,close-patient-chart hub.challenge=meu3we944ix80ox HTTP 1.1 Host: subscriber Intent Verification Response The subscriber MUST confirm that the hub.topic corresponds to a pending subscription or unsubscription that it wishes to carry out. If so, the subscriber MUST respond with an HTTP success (2xx) code with a response body equal to the hub.challenge parameter. If the subscriber does not agree with the action, the subscriber MUST respond with a 404 \"Not Found\" response. The Hub MUST consider other server response codes (3xx, 4xx, 5xx) to mean that the verification request has failed. If the subscriber returns an HTTP success (2xx) but the content body does not match the hub.challenge parameter, the Hub MUST also consider verification to have failed. Intent Verification Response Example HTTP/1.1 200 Success Content-Type: text/html meu3we944ix80ox Unsubscribe Once a subscribing app no longer wants to receive event notifications, it MUST unsubscribe from the session. The unsubscribe request message mirrors the subscribe request message with only a single difference: the hub.mode MUST be equal to the string unsubscribe . Unsubscribe Request Example POST https://hub.example.com Host: hub Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/x-www-form-urlencoded hub.callback=https%3A%2F%2Fapp.example.com%2Fsession%2Fcallback%2Fv7tfwuk17a hub.mode=unsubscribe hub.topic=https%3A%2F%2Fhub.example.com%2F7jaa86kgdudewiaq0wtu hub.secret=shhh-this-is-a-secret hub.events=open-patient-chart,close-patient-chart Event Notification The Hub MUST notify subscribed apps of workflow events to which the app is subscribed, as the event occurs. The notification is an HTTPS POST containing a JSON object in the request body. Event Notification Request Using the hub.secret from the subscription request, the hub MUST generate an HMAC signature of the payload and include that signature in the request headers of the notification. The X-Hub-Signature header's value MUST be in the form method=signature where method is one of the recognized algorithm names and signature is the hexadecimal representation of the signature. The signature MUST be computed using the HMAC algorithm ( RFC6151 ) with the request body as the data and the hub.secret as the key. In addition to a description of the subscribed event that just occurred, the notification to the subscriber MUST include an ISO 8601-2 formatted timestamp in UTC and an event identifer that is universally unique for the Hub. See the notification parameters table for details. The timestamp should be used by subscribers to establish message affinity through the use of a message queue. The event identifier should be used to differentiate retried messages from user actions. Event Notification Request Details The notification's hub.event and context fields inform the subscriber of the current state of the user's session. The hub.event is a user workflow event, from the Event Catalog. The context is an array of named FHIR objects (similar to CDS Hooks's context field) that describe the current content of the user's session. Each event in the Event Catalog defines what context is expected in the notification. Hubs MAY use the FHIR _elements parameter to limit the size of the data being passed while also including additional, local identifiers that are likely already in use in production implementations. Subscribers MUST accept a full FHIR resource or the _elements -limited resource as defined in the Event Catalog. Notification Parameters Field Optionality Type Description timestamp Required string ISO 8601-2 timestamp in UTC describing the time at which the event occurred with subsecond accuracy. id Required string Event identifier used to recognize retried notifications. This id MUST be globally unique for the Hub, SHOULD be opaque to the subscriber and MAY be a GUID. event Required object A json object describing the event. See below . Event Object Parameters Field Optionality Type Description hub.topic Required string The topic session uri given in the subscription request. hub.event Required string The event that triggered this notification, taken from the list of events from the subscription request. context Required array An array of named FHIR objects corresponding to the user's context after the given event has occurred. Common FHIR resources are: Patient, Encounter, ImagingStudy and List. The Hub MUST only return FHIR resources that are authorized to be accessed with the existing OAuth2 access_token. Event Notification Request Example POST https://app.example.com/session/callback/v7tfwuk17a HTTP/1.1 Host: subscriber X-Hub-Signature: sha256=dce85dc8dfde2426079063ad413268ac72dcf845f9f923193285e693be6ff3ae { timestamp : 2018-01-08T01:37:05.14 , id : q9v3jubddqt63n1 , event : { hub.topic : https://hub.example.com/7jaa86kgdudewiaq0wtu , hub.event : open-patient-chart , context : [ { key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 , identifier : [ { type : { coding : [ { system : http://terminology.hl7.org/CodeSystem/v2-0203 , value : MR , display : Medication Record Number } text : MRN ] } } ] } } ] } } Event Notification Response The subscriber MUST respond to the notification with an appropriate HTTP status code. In the case of a successful notification, the subscriber MUST respond with an HTTP 200; otherwise, the subscriber MUST respond with an HTTP error status code. The Hub MAY use these statuses to track synchronization state. Event Notification Response Example HTTP/1.1 200 Accepted Query for Current Context In addition to receiving notification of events as they occur, a subscribing app may request the current context of a given session. The client queries the Hub's hub.topic url to receive the current context for the session. Event-driven context notifications should take precedence. Note that no hub.event is present in the response. Query for Current Context Example GET https://hub.example.com/7jaa86kgdudewiaq0wtu Host: hub Authorization: Bearer i8hweunweunweofiwweoijewiwe { timestamp : 2018-01-08T01:40:05.14 , id : wYXStHqxFQyHFELh , event :{ hub.topic : https://hub.example.com/7jaa86kgdudewiaq0wtu , context :[ { key : patient , resource :{ resourceType : Patient , id : 798E4MyMcpCWHab9 , identifier : [ { type : { coding : [ { system : http://terminology.hl7.org/CodeSystem/v2-0203 , value : MR , display : Medication Record Number } text : MRN ] } } ] } }, { key : encounter , resource :{ resourceType : Encounter , id : ecgXt3jVqNNpsXnNXZ3KljA3 , identifier :[ { use : usual , system : http://healthcare.example.org/identifiers/encounter , value : 1853 } ] } }, { key : study , resource :{ resourceType : ImagingStudy , id : 8i7tbu6fby5ftfbku6fniuf , uid : urn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045 , accession :{ use : usual , type :{ coding :[ { system : http://hl7.org/fhir/v2/0203 , code : ACSN } ] } }, identifier :[ { system : 7678 , value : 185444 } ] } } ] } } Request Context Change Similar to the Hub's notifications to the subscriber, the subscriber MAY request context changes with an HTTP POST to the hub.topic url. The Hub MUST either accept this context change by responding with any successful HTTP status or reject it by responding with any 4xx or 5xx HTTP status. The subscriber MUST be capable of gracefully handling a rejected context request. Once a requested context change is accepted, the Hub MUST broadcast the context notification to all subscribers, including the original requestor. Request Context Change Request POST https://hub.example.com/7jaa86kgdudewiaq0wtu HTTP/1.1 Host: hub Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/json { timestamp : 2018-01-08T01:40:05.14 , id : wYXStHqxFQyHFELh , event : { hub.topic : https://hub.example.com/7jaa86kgdudewiaq0wtu , hub.event : close-patient-chart , context : [ { key : patient , resource : { resourceType : Patient , id : 798E4MyMcpCWHab9 , identifier : [ { type : { coding : [ { system : http://terminology.hl7.org/CodeSystem/v2-0203 , value : MR , display : Medication Record Number } text : MRN ] } } ] } } ] } } Event Notification Errors If the subscriber cannot follow the context of the event, for instance due to an error or a deliberate choice to not follow a context, the subscriber MAY respond with a 'sync-error' event. The Hub MAY use these events to track synchronization state and MAY also forward these events to other subscribers of the same topic. Event Notification Error Example POST https://hub.example.com/7jaa86kgdudewiaq0wtu HTTP/1.1 Host: hub Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/json { timestamp : 2018-01-08T01:37:05.14 , id : q9v3jubddqt63n1 , event : { hub.topic : https://hub.example.com/7jaa86kgdudewiaq0wtu , hub.event : sync-error , context : [ { key : operationoutcome , resource : { resourceType : OperationOutcome , issue : [ { severity : warning , code : processing , diagnostics : AppId3456 failed to follow context } ] } } ] } } Event Catalog Each event definition in the catalog, below, specifies a single event name, a description of the event, and the required or optional contextual information associated with the event. Alongside the event name, the contextual information is used by the subscriber. FHIR is the interoperable data model used by FHIRcast. The fields within context are subsets of FHIR resources. Hubs MUST send the results of FHIR reads in the context, as specified below. For example, when the open-image-study event occurs, the notification sent to a subscriber MUST include the ImagingStudy FHIR resource. Hubs SHOULD send the results of an ImagingStudy FHIR read using the _elements query parameter, like so: ImagingStudy/{id}?_elements=identifier,accession and in accordance with the FHIR specification . A FHIR server may not support the _elements query parameter; a subscriber MUST gracefully handle receiving a full FHIR resource in the context of a notification. The name of the event SHOULD succinctly and clearly describe the activity or event. Event names are unique so event creators SHOULD take care to ensure newly proposed events do not conflict with an existing event name. Event creators SHALL name their event with reverse domain notation (e.g. org.example.patient-transmogrify ) if the event is specific to an organization. Reverse domain notation SHALL not be used by a standard event catalog. open-patient-chart Description: User opened patient's medical record. Example: { context : [ { key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 , identifier : [ { type : { coding : [ { system : http://terminology.hl7.org/CodeSystem/v2-0203 , value : MR , display : Medication Record Number } text : MRN ] } } ] } } ] } Context Optionality FHIR operation to generate context Description patient Required Patient/{id}?_elements=identifier FHIR Patient resource describing the patient whose chart is currently in context. encounter Optional Encounter/{id}?_elements=identifier FHIR Encounter resource in context in the newly opened patient's chart. switch-patient-chart Description: User changed from one open patient's medical record to another previously opened patient's medical record. The context documents the patient whose record is currently open. Example: { context : [ { key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 , identifier : [ { type : { coding : [ { system : http://terminology.hl7.org/CodeSystem/v2-0203 , value : MR , display : Medication Record Number } text : MRN ] } } ] } } ] } Context Optionality FHIR operation to generate context Description patient Required Patient/{id}?_elements=identifier FHIR Patient resource describing the patient whose chart is currently in context.. encounter Optional Encounter/{id}?_elements=identifier FHIR Encounter resource in context in the newly opened patient's chart. close-patient-chart Description: User closed patient's medical record. Example: { context : [ { key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 , identifier : [ { type : { coding : [ { system : http://terminology.hl7.org/CodeSystem/v2-0203 , value : MR , display : Medication Record Number } text : MRN ] } } ] } } ] } Context Optionality FHIR operation to generate context Description patient Required Patient/{id}?_elements=identifier FHIR Patient resource describing the patient whose chart is currently in context.. encounter Optional Encounter/{id}?_elements=identifier FHIR Encounter resource in context in the newly opened patient's chart. open-imaging-study Description: User opened record of imaging study. Example: { context : [ { key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 , identifier : [ { system : urn:oid:1.2.840.114350 , value : 185444 }, { system : urn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000 , value : 2667 } ] } }, { key : study , resource : { resourceType : ImagingStudy , id : 8i7tbu6fby5ftfbku6fniuf , uid : urn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045 , identifier : [ { system : 7678 , value : 185444 } ], patient : { reference : Patient/ewUbXT9RWEbSj5wPEdgRaBw3 } } } ] } Context Optionality FHIR operation to generate context Description patient Optional Patient/{id}?_elements=identifier FHIR Patient resource describing the patient whose chart is currently in context. study Required ImagingStudy/{id}?_elements=identifier,accession FHIR ImagingStudy resource in context. Note that in addition to the request identifier and accession elements, the DICOM uid and FHIR patient reference are included because they're required by the FHIR specification. switch-imaging-study Description: User changed from one open imaging study to another previously opened imaging study. The context documents the study, and optionally patient, for the currently open record. Example: { context : [ { key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 , identifier : [ { system : urn:oid:1.2.840.114350 , value : 185444 }, { system : urn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000 , value : 2667 } ] } }, { key : study , resource : { resourceType : ImagingStudy , id : 8i7tbu6fby5ftfbku6fniuf , uid : urn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045 , identifier : [ { system : 7678 , value : 185444 } ], patient : { reference : Patient/ewUbXT9RWEbSj5wPEdgRaBw3 } } } ] } Context Optionality FHIR operation to generate context Description patient Optional Patient/{id}?_elements=identifier FHIR Patient resource describing the patient whose chart is currently in context. study Required ImagingStudy/{id}?_elements=identifier,accession FHIR ImagingStudy resource in context. Note that in addition to the request identifier and accession elements, the DICOM uid and FHIR patient reference are included because they're required by the FHIR specification. close-imaging-study Description: User closed imaging study. Example: { context : [ { key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 , identifier : [ { system : urn:oid:1.2.840.114350 , value : 185444 }, { system : urn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000 , value : 2667 } ] } }, { key : study , resource : { resourceType : ImagingStudy , id : 8i7tbu6fby5ftfbku6fniuf , uid : urn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045 , identifier : [ { system : 7678 , value : 185444 } ], patient : { reference : Patient/ewUbXT9RWEbSj5wPEdgRaBw3 } } } ] } Context Optionality FHIR operation to generate context Description patient Optional Patient/{id}?_elements=identifier FHIR Patient resource describing the patient whose chart is currently in context. study Required ImagingStudy/{id}?_elements=identifier,accession FHIR ImagingStudy resource in context. Note that in addition to the request identifier and accession elements, the DICOM uid and FHIR patient reference are included because they're required by the FHIR specification. user-logout Description: User gracefully exited the application. Example: { } No Context user-hibernate Description: User temporarily suspended her session. The user's session will eventually resume. Example: { } No Context sync-error Description: A syncronization error has been detected. Inform subscribed clients. Example: { context : [ { key : operationoutcome , resource : { resourceType : OperationOutcome , issue : [ { severity : warning , code : processing , diagnostics : AppId3456 failed to follow context } ] } } ] } Context Optionality FHIR operation to generate context Description operationoutcome Optional OperationOutcome FHIR resource describing an outcome of an unsuccessful system action..","title":"May2019Ballot"},{"location":"specification/May2019Ballot/#fhircast","text":"\"1.0 Draft\" This is the draft of the 1.0 release of the FHIRcast specification. We are currently working towards a 1.0 release and would love your feedback and proposed changes. Look at our current issue list and get involved!","title":"FHIRcast"},{"location":"specification/May2019Ballot/#overview","text":"The FHIRcast specification describes the APIs and interactions to synchronize healthcare applications in real time to show the same clinical content to a user. All data exchanged through the HTTP APIs MUST be sent and received as JSON structures, and MUST be transmitted over channels secured using the Hypertext Transfer Protocol (HTTP) over Transport Layer Security (TLS), also known as HTTPS and defined in RFC2818 . FHIRcast is modeled on the webhook design pattern and specifically the W3C WebSub RFC and builds on the HL7 SMART on FHIR launch protocol . An app subscribes to specific workflow events for a given session, the subscription is verified and the app is notified when those workflow events occur; for example, by the clinician opening a patient's chart. The subscring app may query a session's current context and initiate context changes by accessing APIs exposed by the Hub. The app deletes its subscription when it no longer wants to receive notifications. In all cases the app authenticates to the Hub with an OAuth 2.0 bearer token.","title":"Overview"},{"location":"specification/May2019Ballot/#session-discovery","text":"Before establishing a subscription, an app must know the hub.topic which is an unique url identifying the session, and the cast-hub which is the base url of the Hub. The app discovers these two urls as part of a SMART on FHIR launch. The app MUST either be launched from the driving application following the SMART on FHIR EHR launch flow or the app may initiate the launch following the SMART on FHIR standalone launch . In either case, the app MUST request and be granted the fhircast OAuth2.0 scope. Accompanying this scope grant, the authorization server MUST supply the cast-hub and hub.topic SMART launch parameters alongside the access token. These parameters identify the Hub's base url, and a unique, opaque identifier of the current user's session, respectivly. Per SMART, when scopes of openid and fhirUser are granted, the app will additionally receive the current user's identity in an id_token .","title":"Session Discovery"},{"location":"specification/May2019Ballot/#smart-launch-example","text":"Note that the SMART launch parameters include the Hub's base url and and the session identifier in the cast-hub and hub.topic fields. { access_token : i8hweunweunweofiwweoijewiwe , token_type : bearer , expires_in : 3600, patient : 123 , encounter : 456 , imagingstudy : 789 , cast-hub : https://hub.example.com , hub.topic : https://hub.example.com/7jaa86kgdudewiaq0wtu , } Although FHIRcast works best with the SMART on FHIR launch and authorization process, implementation-specific launch, authentication, and authorization protocols may be possible. See other launch scenarios for guidance.","title":"SMART Launch Example"},{"location":"specification/May2019Ballot/#subscribing-and-unsubscribing","text":"Subscribing consists of two exchanges: Subscriber requests a subscription at the cast-hub url. Hub confirms the subscription was actually requested by the subscriber by contacting the hub.callback url. Unsubscribing works in the same way, except with a single parameter changed to indicate the desire to unsubscribe.","title":"Subscribing and Unsubscribing"},{"location":"specification/May2019Ballot/#subscription-request","text":"To create a subscription, the subscribing app performs an HTTP POST ( RFC7231 ) to the Hub's base url (as specified in cast-hub ) with the following parameters, authenticating with the Bearer access token. This request MUST have a Content-Type header of application/x-www-form-urlencoded and MUST use the following parameters in its body, formatted accordingly:","title":"Subscription Request"},{"location":"specification/May2019Ballot/#subscription-request-parameters","text":"Field Optionality Type Description hub.callback Required string The Subscriber's callback URL where notifications should be delivered. The callback URL SHOULD be an unguessable URL that is unique per subscription. hub.mode Required string The literal string \"subscribe\" or \"unsubscribe\", depending on the goal of the request. hub.topic Required string The uri of the user's session that the subscriber wishes to subscribe to or unsubscribe from. hub.secret Required string A subscriber-provided cryptographically random unique secret string that will be used to compute an HMAC digest delivered in each notification. This parameter MUST be less than 200 bytes in length. hub.events Required string Comma-separated list of event types from the Event Catalog for which the Subscriber wants notifications. hub.lease_seconds Optional number Number of seconds for which the subscriber would like to have the subscription active, given as a positive decimal integer. Hubs MAY choose to respect this value or not, depending on their own policies, and MAY set a default value if the subscriber omits the parameter. Hubs MUST allow subscribers to re-request subscriptions that are already activated. Each subsequent request to a hub to subscribe or unsubscribe MUST override the previous subscription state for a specific topic, and callback URL combination once the action is verified. The callback URL MAY contain arbitrary query string parameters (e.g., ?foo=bar red=fish). Hubs MUST preserve the query string during subscription verification by appending new parameters to the end of the list using the (ampersand) character to join. When sending the content distribution request, the hub will make a POST request to the callback URL including any query string parameters in the URL portion of the request, not as POST body parameters. Within FHIRcast, the client that creates a subscription and the server that hosts the callback url are the same entity. If these roles are split, the Hub assumes that the same authorization and access rights apply to both systems.","title":"Subscription Request Parameters"},{"location":"specification/May2019Ballot/#subscription-request-example","text":"In this example, the app asks to be notified of the open-patient-chart and close-patient-chart events. POST https://hub.example.com Host: hub.example.com Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/x-www-form-urlencoded hub.callback=https%3A%2F%2Fapp.example.com%2Fsession%2Fcallback%2Fv7tfwuk17a hub.mode=subscribe hub.topic=https%3A%2F%2Fhub.example.com%2F7jaa86kgdudewiaq0wtu hub.secret=shhh-this-is-a-secret hub.events=patient-open-chart,patient-close-chart","title":"Subscription Request Example"},{"location":"specification/May2019Ballot/#subscription-response","text":"If the Hub URL supports FHIRcast and is able to handle the subscription or unsubscription request, the Hub MUST respond to a subscription request with an HTTP 202 \"Accepted\" response to indicate that the request was received and will now be verified by the Hub. The Hub SHOULD perform the verification of intent as soon as possible. If a Hub finds any errors in the subscription request, an appropriate HTTP error response code (4xx or 5xx) MUST be returned. In the event of an error, the Hub SHOULD return a description of the error in the response body as plain text, used to assist the client developer in understanding the error. This is not meant to be shown to the end user. Hubs MAY decide to reject some callback URLs or topic URIs based on their own policies.","title":"Subscription Response"},{"location":"specification/May2019Ballot/#subscription-response-example","text":"HTTP/1.1 202 Accepted","title":"Subscription Response Example"},{"location":"specification/May2019Ballot/#subscription-denial","text":"If (and when) the subscription is denied, the Hub MUST inform the subscriber by sending an HTTP GET request to the subscriber's callback URL as given in the subscription request. This request has the following query string arguments appended.","title":"Subscription Denial"},{"location":"specification/May2019Ballot/#subscription-denial-parameters","text":"Field Optionality Type Description hub.mode Required string The literal string \"denied\". hub.topic Required string The topic uri given in the corresponding subscription request. hub.events Required string A comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request. hub.reason Optional string The Hub may include a reason for which the subscription has been denied. The subscription MAY be denied by the Hub at any point (even if it was previously accepted). The Subscriber SHOULD then consider that the subscription is not possible anymore.","title":"Subscription Denial Parameters"},{"location":"specification/May2019Ballot/#subscription-denial-example","text":"GET https://app.example.com/session/callback/v7tfwuk17a?hub.mode=denied hub.topic=https%3A%2F%2Fhub.example.com%2F7jaa86kgdudewiaq0wtu hub.events=open-patient-chart,close-patient-chart hub.challenge=meu3we944ix80ox hub.reason=session+unexpectedly+stopped HTTP 1.1 Host: subscriber","title":"Subscription Denial Example"},{"location":"specification/May2019Ballot/#intent-verification","text":"If (and when) the subscription is accepted, the Hub MUST perform the verification of intent of the subscriber. The hub.callback url verification process ensures that the subscriber actually controls the callback url.","title":"Intent Verification"},{"location":"specification/May2019Ballot/#intent-verification-request","text":"In order to prevent an attacker from creating unwanted subscriptions on behalf of a subscriber (or unsubscribing desired ones), a Hub must ensure that the subscriber did indeed send the subscription request. The Hub verifies a subscription request by sending an HTTPS GET ( RFC2818 ) request to the subscriber's callback URL as given in the subscription request. This request has the following query string arguments appended:","title":"Intent Verification Request"},{"location":"specification/May2019Ballot/#verification-parameters","text":"Field Optionality Type Description hub.mode Required string The literal string \"subscribe\" or \"unsubscribe\", which matches the original request to the hub from the subscriber. hub.topic Required string The topic session uri given in the corresponding subscription request. hub.events Required string A comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request. hub.challenge Required string A Hub-generated, random string that MUST be echoed by the subscriber to verify the subscription. hub.lease_seconds Required number The Hub-determined number of seconds that the subscription will stay active before expiring, measured from the time the verification request was made from the Hub to the subscriber. Subscribers must renew their subscription before the lease seconds period is over to avoid interruption.","title":"Verification Parameters"},{"location":"specification/May2019Ballot/#intent-verification-request-example","text":"GET https://app.example.com/session/callback/v7tfwuk17a?hub.mode=subscribe hub.topic=7jaa86kgdudewiaq0wtu hub.events=open-patient-chart,close-patient-chart hub.challenge=meu3we944ix80ox HTTP 1.1 Host: subscriber","title":"Intent Verification Request Example"},{"location":"specification/May2019Ballot/#intent-verification-response","text":"The subscriber MUST confirm that the hub.topic corresponds to a pending subscription or unsubscription that it wishes to carry out. If so, the subscriber MUST respond with an HTTP success (2xx) code with a response body equal to the hub.challenge parameter. If the subscriber does not agree with the action, the subscriber MUST respond with a 404 \"Not Found\" response. The Hub MUST consider other server response codes (3xx, 4xx, 5xx) to mean that the verification request has failed. If the subscriber returns an HTTP success (2xx) but the content body does not match the hub.challenge parameter, the Hub MUST also consider verification to have failed.","title":"Intent Verification Response"},{"location":"specification/May2019Ballot/#intent-verification-response-example","text":"HTTP/1.1 200 Success Content-Type: text/html meu3we944ix80ox","title":"Intent Verification Response Example"},{"location":"specification/May2019Ballot/#unsubscribe","text":"Once a subscribing app no longer wants to receive event notifications, it MUST unsubscribe from the session. The unsubscribe request message mirrors the subscribe request message with only a single difference: the hub.mode MUST be equal to the string unsubscribe .","title":"Unsubscribe"},{"location":"specification/May2019Ballot/#unsubscribe-request-example","text":"POST https://hub.example.com Host: hub Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/x-www-form-urlencoded hub.callback=https%3A%2F%2Fapp.example.com%2Fsession%2Fcallback%2Fv7tfwuk17a hub.mode=unsubscribe hub.topic=https%3A%2F%2Fhub.example.com%2F7jaa86kgdudewiaq0wtu hub.secret=shhh-this-is-a-secret hub.events=open-patient-chart,close-patient-chart","title":"Unsubscribe Request Example"},{"location":"specification/May2019Ballot/#event-notification","text":"The Hub MUST notify subscribed apps of workflow events to which the app is subscribed, as the event occurs. The notification is an HTTPS POST containing a JSON object in the request body.","title":"Event Notification"},{"location":"specification/May2019Ballot/#event-notification-request","text":"Using the hub.secret from the subscription request, the hub MUST generate an HMAC signature of the payload and include that signature in the request headers of the notification. The X-Hub-Signature header's value MUST be in the form method=signature where method is one of the recognized algorithm names and signature is the hexadecimal representation of the signature. The signature MUST be computed using the HMAC algorithm ( RFC6151 ) with the request body as the data and the hub.secret as the key. In addition to a description of the subscribed event that just occurred, the notification to the subscriber MUST include an ISO 8601-2 formatted timestamp in UTC and an event identifer that is universally unique for the Hub. See the notification parameters table for details. The timestamp should be used by subscribers to establish message affinity through the use of a message queue. The event identifier should be used to differentiate retried messages from user actions.","title":"Event Notification Request"},{"location":"specification/May2019Ballot/#event-notification-request-details","text":"The notification's hub.event and context fields inform the subscriber of the current state of the user's session. The hub.event is a user workflow event, from the Event Catalog. The context is an array of named FHIR objects (similar to CDS Hooks's context field) that describe the current content of the user's session. Each event in the Event Catalog defines what context is expected in the notification. Hubs MAY use the FHIR _elements parameter to limit the size of the data being passed while also including additional, local identifiers that are likely already in use in production implementations. Subscribers MUST accept a full FHIR resource or the _elements -limited resource as defined in the Event Catalog.","title":"Event Notification Request Details"},{"location":"specification/May2019Ballot/#notification-parameters","text":"Field Optionality Type Description timestamp Required string ISO 8601-2 timestamp in UTC describing the time at which the event occurred with subsecond accuracy. id Required string Event identifier used to recognize retried notifications. This id MUST be globally unique for the Hub, SHOULD be opaque to the subscriber and MAY be a GUID. event Required object A json object describing the event. See below .","title":"Notification Parameters"},{"location":"specification/May2019Ballot/#event-object-parameters","text":"Field Optionality Type Description hub.topic Required string The topic session uri given in the subscription request. hub.event Required string The event that triggered this notification, taken from the list of events from the subscription request. context Required array An array of named FHIR objects corresponding to the user's context after the given event has occurred. Common FHIR resources are: Patient, Encounter, ImagingStudy and List. The Hub MUST only return FHIR resources that are authorized to be accessed with the existing OAuth2 access_token.","title":"Event Object Parameters"},{"location":"specification/May2019Ballot/#event-notification-request-example","text":"POST https://app.example.com/session/callback/v7tfwuk17a HTTP/1.1 Host: subscriber X-Hub-Signature: sha256=dce85dc8dfde2426079063ad413268ac72dcf845f9f923193285e693be6ff3ae { timestamp : 2018-01-08T01:37:05.14 , id : q9v3jubddqt63n1 , event : { hub.topic : https://hub.example.com/7jaa86kgdudewiaq0wtu , hub.event : open-patient-chart , context : [ { key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 , identifier : [ { type : { coding : [ { system : http://terminology.hl7.org/CodeSystem/v2-0203 , value : MR , display : Medication Record Number } text : MRN ] } } ] } } ] } }","title":"Event Notification Request Example"},{"location":"specification/May2019Ballot/#event-notification-response","text":"The subscriber MUST respond to the notification with an appropriate HTTP status code. In the case of a successful notification, the subscriber MUST respond with an HTTP 200; otherwise, the subscriber MUST respond with an HTTP error status code. The Hub MAY use these statuses to track synchronization state.","title":"Event Notification Response"},{"location":"specification/May2019Ballot/#event-notification-response-example","text":"HTTP/1.1 200 Accepted","title":"Event Notification Response Example"},{"location":"specification/May2019Ballot/#query-for-current-context","text":"In addition to receiving notification of events as they occur, a subscribing app may request the current context of a given session. The client queries the Hub's hub.topic url to receive the current context for the session. Event-driven context notifications should take precedence. Note that no hub.event is present in the response.","title":"Query for Current Context"},{"location":"specification/May2019Ballot/#query-for-current-context-example","text":"GET https://hub.example.com/7jaa86kgdudewiaq0wtu Host: hub Authorization: Bearer i8hweunweunweofiwweoijewiwe { timestamp : 2018-01-08T01:40:05.14 , id : wYXStHqxFQyHFELh , event :{ hub.topic : https://hub.example.com/7jaa86kgdudewiaq0wtu , context :[ { key : patient , resource :{ resourceType : Patient , id : 798E4MyMcpCWHab9 , identifier : [ { type : { coding : [ { system : http://terminology.hl7.org/CodeSystem/v2-0203 , value : MR , display : Medication Record Number } text : MRN ] } } ] } }, { key : encounter , resource :{ resourceType : Encounter , id : ecgXt3jVqNNpsXnNXZ3KljA3 , identifier :[ { use : usual , system : http://healthcare.example.org/identifiers/encounter , value : 1853 } ] } }, { key : study , resource :{ resourceType : ImagingStudy , id : 8i7tbu6fby5ftfbku6fniuf , uid : urn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045 , accession :{ use : usual , type :{ coding :[ { system : http://hl7.org/fhir/v2/0203 , code : ACSN } ] } }, identifier :[ { system : 7678 , value : 185444 } ] } } ] } }","title":"Query for Current Context Example"},{"location":"specification/May2019Ballot/#request-context-change","text":"Similar to the Hub's notifications to the subscriber, the subscriber MAY request context changes with an HTTP POST to the hub.topic url. The Hub MUST either accept this context change by responding with any successful HTTP status or reject it by responding with any 4xx or 5xx HTTP status. The subscriber MUST be capable of gracefully handling a rejected context request. Once a requested context change is accepted, the Hub MUST broadcast the context notification to all subscribers, including the original requestor.","title":"Request Context Change"},{"location":"specification/May2019Ballot/#request-context-change-request","text":"POST https://hub.example.com/7jaa86kgdudewiaq0wtu HTTP/1.1 Host: hub Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/json { timestamp : 2018-01-08T01:40:05.14 , id : wYXStHqxFQyHFELh , event : { hub.topic : https://hub.example.com/7jaa86kgdudewiaq0wtu , hub.event : close-patient-chart , context : [ { key : patient , resource : { resourceType : Patient , id : 798E4MyMcpCWHab9 , identifier : [ { type : { coding : [ { system : http://terminology.hl7.org/CodeSystem/v2-0203 , value : MR , display : Medication Record Number } text : MRN ] } } ] } } ] } }","title":"Request Context Change Request"},{"location":"specification/May2019Ballot/#event-notification-errors","text":"If the subscriber cannot follow the context of the event, for instance due to an error or a deliberate choice to not follow a context, the subscriber MAY respond with a 'sync-error' event. The Hub MAY use these events to track synchronization state and MAY also forward these events to other subscribers of the same topic.","title":"Event Notification Errors"},{"location":"specification/May2019Ballot/#event-notification-error-example","text":"POST https://hub.example.com/7jaa86kgdudewiaq0wtu HTTP/1.1 Host: hub Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/json { timestamp : 2018-01-08T01:37:05.14 , id : q9v3jubddqt63n1 , event : { hub.topic : https://hub.example.com/7jaa86kgdudewiaq0wtu , hub.event : sync-error , context : [ { key : operationoutcome , resource : { resourceType : OperationOutcome , issue : [ { severity : warning , code : processing , diagnostics : AppId3456 failed to follow context } ] } } ] } }","title":"Event Notification Error Example"},{"location":"specification/May2019Ballot/#event-catalog","text":"Each event definition in the catalog, below, specifies a single event name, a description of the event, and the required or optional contextual information associated with the event. Alongside the event name, the contextual information is used by the subscriber. FHIR is the interoperable data model used by FHIRcast. The fields within context are subsets of FHIR resources. Hubs MUST send the results of FHIR reads in the context, as specified below. For example, when the open-image-study event occurs, the notification sent to a subscriber MUST include the ImagingStudy FHIR resource. Hubs SHOULD send the results of an ImagingStudy FHIR read using the _elements query parameter, like so: ImagingStudy/{id}?_elements=identifier,accession and in accordance with the FHIR specification . A FHIR server may not support the _elements query parameter; a subscriber MUST gracefully handle receiving a full FHIR resource in the context of a notification. The name of the event SHOULD succinctly and clearly describe the activity or event. Event names are unique so event creators SHOULD take care to ensure newly proposed events do not conflict with an existing event name. Event creators SHALL name their event with reverse domain notation (e.g. org.example.patient-transmogrify ) if the event is specific to an organization. Reverse domain notation SHALL not be used by a standard event catalog.","title":"Event Catalog"},{"location":"specification/May2019Ballot/#open-patient-chart","text":"","title":"open-patient-chart"},{"location":"specification/May2019Ballot/#description","text":"User opened patient's medical record.","title":"Description:"},{"location":"specification/May2019Ballot/#example","text":"{ context : [ { key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 , identifier : [ { type : { coding : [ { system : http://terminology.hl7.org/CodeSystem/v2-0203 , value : MR , display : Medication Record Number } text : MRN ] } } ] } } ] } Context Optionality FHIR operation to generate context Description patient Required Patient/{id}?_elements=identifier FHIR Patient resource describing the patient whose chart is currently in context. encounter Optional Encounter/{id}?_elements=identifier FHIR Encounter resource in context in the newly opened patient's chart.","title":"Example:"},{"location":"specification/May2019Ballot/#switch-patient-chart","text":"","title":"switch-patient-chart"},{"location":"specification/May2019Ballot/#description_1","text":"User changed from one open patient's medical record to another previously opened patient's medical record. The context documents the patient whose record is currently open.","title":"Description:"},{"location":"specification/May2019Ballot/#example_1","text":"{ context : [ { key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 , identifier : [ { type : { coding : [ { system : http://terminology.hl7.org/CodeSystem/v2-0203 , value : MR , display : Medication Record Number } text : MRN ] } } ] } } ] } Context Optionality FHIR operation to generate context Description patient Required Patient/{id}?_elements=identifier FHIR Patient resource describing the patient whose chart is currently in context.. encounter Optional Encounter/{id}?_elements=identifier FHIR Encounter resource in context in the newly opened patient's chart.","title":"Example:"},{"location":"specification/May2019Ballot/#close-patient-chart","text":"","title":"close-patient-chart"},{"location":"specification/May2019Ballot/#description-user-closed-patients-medical-record","text":"","title":"Description: User closed patient's medical record."},{"location":"specification/May2019Ballot/#example_2","text":"{ context : [ { key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 , identifier : [ { type : { coding : [ { system : http://terminology.hl7.org/CodeSystem/v2-0203 , value : MR , display : Medication Record Number } text : MRN ] } } ] } } ] } Context Optionality FHIR operation to generate context Description patient Required Patient/{id}?_elements=identifier FHIR Patient resource describing the patient whose chart is currently in context.. encounter Optional Encounter/{id}?_elements=identifier FHIR Encounter resource in context in the newly opened patient's chart.","title":"Example:"},{"location":"specification/May2019Ballot/#open-imaging-study","text":"","title":"open-imaging-study"},{"location":"specification/May2019Ballot/#description-user-opened-record-of-imaging-study","text":"","title":"Description: User opened record of imaging study."},{"location":"specification/May2019Ballot/#example_3","text":"{ context : [ { key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 , identifier : [ { system : urn:oid:1.2.840.114350 , value : 185444 }, { system : urn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000 , value : 2667 } ] } }, { key : study , resource : { resourceType : ImagingStudy , id : 8i7tbu6fby5ftfbku6fniuf , uid : urn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045 , identifier : [ { system : 7678 , value : 185444 } ], patient : { reference : Patient/ewUbXT9RWEbSj5wPEdgRaBw3 } } } ] } Context Optionality FHIR operation to generate context Description patient Optional Patient/{id}?_elements=identifier FHIR Patient resource describing the patient whose chart is currently in context. study Required ImagingStudy/{id}?_elements=identifier,accession FHIR ImagingStudy resource in context. Note that in addition to the request identifier and accession elements, the DICOM uid and FHIR patient reference are included because they're required by the FHIR specification.","title":"Example:"},{"location":"specification/May2019Ballot/#switch-imaging-study","text":"","title":"switch-imaging-study"},{"location":"specification/May2019Ballot/#description-user-changed-from-one-open-imaging-study-to-another-previously-opened-imaging-study-the-context-documents-the-study-and-optionally-patient-for-the-currently-open-record","text":"","title":"Description: User changed from one open imaging study to another previously opened imaging study. The context documents the study, and optionally patient, for the currently open record."},{"location":"specification/May2019Ballot/#example_4","text":"{ context : [ { key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 , identifier : [ { system : urn:oid:1.2.840.114350 , value : 185444 }, { system : urn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000 , value : 2667 } ] } }, { key : study , resource : { resourceType : ImagingStudy , id : 8i7tbu6fby5ftfbku6fniuf , uid : urn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045 , identifier : [ { system : 7678 , value : 185444 } ], patient : { reference : Patient/ewUbXT9RWEbSj5wPEdgRaBw3 } } } ] } Context Optionality FHIR operation to generate context Description patient Optional Patient/{id}?_elements=identifier FHIR Patient resource describing the patient whose chart is currently in context. study Required ImagingStudy/{id}?_elements=identifier,accession FHIR ImagingStudy resource in context. Note that in addition to the request identifier and accession elements, the DICOM uid and FHIR patient reference are included because they're required by the FHIR specification.","title":"Example:"},{"location":"specification/May2019Ballot/#close-imaging-study","text":"","title":"close-imaging-study"},{"location":"specification/May2019Ballot/#description-user-closed-imaging-study","text":"","title":"Description: User closed imaging study."},{"location":"specification/May2019Ballot/#example_5","text":"{ context : [ { key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 , identifier : [ { system : urn:oid:1.2.840.114350 , value : 185444 }, { system : urn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000 , value : 2667 } ] } }, { key : study , resource : { resourceType : ImagingStudy , id : 8i7tbu6fby5ftfbku6fniuf , uid : urn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045 , identifier : [ { system : 7678 , value : 185444 } ], patient : { reference : Patient/ewUbXT9RWEbSj5wPEdgRaBw3 } } } ] } Context Optionality FHIR operation to generate context Description patient Optional Patient/{id}?_elements=identifier FHIR Patient resource describing the patient whose chart is currently in context. study Required ImagingStudy/{id}?_elements=identifier,accession FHIR ImagingStudy resource in context. Note that in addition to the request identifier and accession elements, the DICOM uid and FHIR patient reference are included because they're required by the FHIR specification.","title":"Example:"},{"location":"specification/May2019Ballot/#user-logout","text":"","title":"user-logout"},{"location":"specification/May2019Ballot/#description-user-gracefully-exited-the-application","text":"","title":"Description: User gracefully exited the application."},{"location":"specification/May2019Ballot/#example_6","text":"{ } No Context","title":"Example:"},{"location":"specification/May2019Ballot/#user-hibernate","text":"","title":"user-hibernate"},{"location":"specification/May2019Ballot/#description-user-temporarily-suspended-her-session-the-users-session-will-eventually-resume","text":"","title":"Description: User temporarily suspended her session. The user's session will eventually resume."},{"location":"specification/May2019Ballot/#example_7","text":"{ } No Context","title":"Example:"},{"location":"specification/May2019Ballot/#sync-error","text":"","title":"sync-error"},{"location":"specification/May2019Ballot/#description-a-syncronization-error-has-been-detected-inform-subscribed-clients","text":"","title":"Description: A syncronization error has been detected. Inform subscribed clients."},{"location":"specification/May2019Ballot/#example_8","text":"{ context : [ { key : operationoutcome , resource : { resourceType : OperationOutcome , issue : [ { severity : warning , code : processing , diagnostics : AppId3456 failed to follow context } ] } } ] } Context Optionality FHIR operation to generate context Description operationoutcome Optional OperationOutcome FHIR resource describing an outcome of an unsuccessful system action..","title":"Example:"},{"location":"specification/STU1/","text":"FHIRcast \"Standard for Trial Use\" (STU1) This is the 1.0 release of the FHIRcast specification. Overview The FHIRcast specification describes the APIs used to synchronize disparate healthcare applications' user interfaces in real time, allowing them to show the same clinical content to a user (or group of users). Once the subscribing app knows about the session , the app may subscribe to specific workflow-related events for the given session. The subscription is verified and the app is notified when those workflow-related events occur; for example, by the clinician opening a patient's chart. The subscribing app may initiate context changes by accessing APIs exposed by the Hub; for example, closing the patient's chart. The app deletes its subscription to no longer receive notifications. The notification message describing the workflow event is a simple json wrapper around one or more FHIR resources. FHIRcast is modeled on the webhook design pattern and specifically the W3C WebSub RFC , such as its use of GET vs POST interactions and a Hub for managing subscriptions. FHIRcast recommends the HL7 SMART on FHIR launch protocol for both session discovery and API authentication. The below flow diagram illustrates the series of interactions. All data exchanged through the HTTP APIs SHALL be sent and received as JSON structures, and SHALL be transmitted over channels secured using the Hypertext Transfer Protocol (HTTP) over Transport Layer Security (TLS), also known as HTTPS and defined in RFC2818 . Session Discovery A session is an abstract concept representing a shared workspace, such as user's login session over multiple applications or a shared view of one application distributed to multiple users. FHIRcast requires a session to have a unique, unguessable and opaque identifier. This identifier is exchanged as the value of the hub.topic parameter. Before establishing a subscription, an app must not only know the hub.topic , but also the hub.url which contains the base url of the Hub. Systems SHOULD use SMART on FHIR to authorize, authenticate and exchange initial shared context. If using SMART, following a SMART on FHIR EHR launch or SMART on FHIR standalone launch , the app SHALL request and, if authorized, SHALL be granted one or more fhircast OAuth 2.0 scopes. Accompanying this scope grant, the authorization server SHALL supply the hub.url and hub.topic SMART launch parameters alongside the access token and other parameters appropriate to establish initial shared context. Per SMART, when scopes of openid and fhirUser are granted, the authorization server additionally sends the current user's identity in an id_token . Although FHIRcast works best with the SMART on FHIR launch and authorization process, implementation-specific launch, authentication, and authorization protocols may be possible. If not using SMART on FHIR, the mechanism enabling the app to discover the hub.url and hub.topic is not defined in FHIRcast. See other launch scenarios for guidance. FHIRcast Authorization SMART scopes FHIRcast defines OAuth 2.0 access scopes that correspond directly to FHIRcast events . Our scopes associate read or write permissions to an event. Apps that need to receive workflow related events should ask for read scopes. Apps that request context changes should ask for write scopes. Hubs may decide what specific interactions and operations will be enabled by these scopes. Expressed in EBNF notation, FHIRcast's scope syntax is: scope ::= ( 'fhircast' ) '/' ( FHIRcast-event ) '.' ( 'read' | 'write' | '*' ) The FHIRcast event name is also a computable syntax , the complete syntax for FHIRcast scopes is: scope ::= 'fhircast' '/' fhir-resource '-' ( 'open' | 'close' | '*' ) '.' ( 'read' | 'write' | '*' ) SMART Launch Example Note that the SMART launch parameters include the Hub's base url and the session identifier in the hub.url and hub.topic fields. { access_token : i8hweunweunweofiwweoijewiwe , token_type : bearer , patient : 123 , expires_in : 3600, encounter : 456 , imagingstudy : 789 , hub.url : https://hub.example.com , hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , } Subscribing and Unsubscribing Subscribing consists of two exchanges: Subscriber requests a subscription at the hub.url url. Hub confirms the subscription was actually requested by the subscriber by contacting the hub.callback url. Unsubscribing works in the same way, except with a single parameter changed to indicate the desire to unsubscribe. Subscription Request To create a subscription, the subscribing app SHALL perform an HTTP POST ( RFC7231 ) to the Hub's base url (as specified in hub.url ) with the parameters in the table below. This request SHALL have a Content-Type header of application/x-www-form-urlencoded and SHALL use the following parameters in its body, formatted accordingly: Field Optionality Type Description hub.callback Required string The Subscriber's callback URL where notifications should be delivered. The callback URL SHOULD be an unguessable URL that is unique per subscription. hub.mode Required string The literal string \"subscribe\" or \"unsubscribe\", depending on the goal of the request. hub.topic Required string The identifier of the user's session that the subscriber wishes to subscribe to or unsubscribe from. MAY be a guid. hub.secret Required string A subscriber-provided cryptographically random unique secret string that SHALL be used to compute an HMAC digest delivered in each notification. This parameter SHALL be less than 200 bytes in length. hub.events Required string Comma-separated list of event types from the Event Catalog for which the Subscriber wants notifications. hub.lease_seconds Optional number Number of seconds for which the subscriber would like to have the subscription active, given as a positive decimal integer. Hubs MAY choose to respect this value or not, depending on their own policies, and MAY set a default value if the subscriber omits the parameter. If using OAuth 2.0, the Hub SHALL limit the subscription lease seconds to be less than or equal to the access token's expiration. If OAuth 2.0 authentication is used, this POST request SHALL contain the Bearer access token in the HTTP Authorization header. Hubs SHALL allow subscribers to re-request subscriptions that are already activated. Each subsequent and verified request to a Hub to subscribe or unsubscribe SHALL override the previous subscription state for a specific topic / callback URL combination. The callback URL MAY contain arbitrary query string parameters (e.g., ?foo=bar red=fish ). Hubs SHALL preserve the query string during subscription verification by appending new, Hub-defined, parameters to the end of the list using the (ampersand) character to join. When sending the event notifications, the Hub SHALL make a POST request to the callback URL including any query string parameters in the URL portion of the request, not as POST body parameters. The client that creates the subscription may not be the same system as the server hosting the callback url. (For example, some type of federated authorization model could possibly exist between these two systems.) However, in FHIRcast, the Hub assumes that the same authorization and access rights apply to both the subscribing client and the callback url. Subscription Request Example In this example, the app asks to be notified of the patient-open and patient-close events. POST https://hub.example.com Host: hub.example.com Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/x-www-form-urlencoded hub.callback=https%3A%2F%2Fapp.example.com%2Fsession%2Fcallback%2Fv7tfwuk17a hub.mode=subscribe hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065 hub.secret=shhh-this-is-a-secret hub.events=patient-open,patient-close Subscription Response If the Hub URL supports FHIRcast and is able to handle the subscription or unsubscription request, the Hub SHALL respond to a subscription request with an HTTP 202 \"Accepted\" response to indicate that the request was received and will now be verified by the Hub. The Hub SHOULD perform the verification of intent as soon as possible. If a Hub finds any errors in the subscription request, an appropriate HTTP error response code (4xx or 5xx) MUST be returned. In the event of an error, the Hub SHOULD return a description of the error in the response body as plain text, used to assist the client developer in understanding the error. This is not meant to be shown to the end user. Hubs MAY decide to reject some callback URLs or topic based on their own policies. Subscription Response Example HTTP/1.1 202 Accepted Subscription Denial If (and when) the subscription is denied, the Hub SHALL inform the subscriber by sending an HTTP GET request to the subscriber's callback URL as given in the subscription request. This can occur when the subscription is requested for a variety of reasons, or it can occur after the subscription had already been accepted because the Hub no longer supports that subscription (e.g. it has expired). This request has the following query string arguments appended, to which the subscriber SHALL respond with an HTTP success (2xx) code. Field Optionality Type Description hub.mode Required string The literal string \"denied\". hub.topic Required string The topic given in the corresponding subscription request. MAY be a guid. hub.events Required string A comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request, which are being denied. hub.reason Optional string The Hub may include a reason. The subscription MAY be denied by the Hub at any point (even if it was previously accepted). The Subscriber SHOULD then consider that the subscription is not possible anymore. The below flow diagram and example illustrate the subscription denial sequence and message details. Subscription Denial Sequence Subscription Denial Example GET https://app.example.com/session/callback/v7tfwuk17a?hub.mode=denied hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065hub.events=patient-open,patient-close hub.reason=session+unexpectedly+stopped HTTP 1.1 Host: subscriber Intent Verification If the subscription is not denied, the Hub SHALL perform the verification of intent of the subscriber, this applies to apps unsubscribing as well. The hub.callback url verification process ensures that the subscriber actually controls the callback url. Intent Verification Request In order to prevent an attacker from creating unwanted subscriptions on behalf of a subscriber (or unsubscribing desired ones), a Hub must ensure that the subscriber did indeed send the subscription request. The Hub SHALL verify a subscription request by sending an HTTPS GET request to the subscriber's callback URL as given in the subscription request. This request SHALL have the following query string arguments appended Field Optionality Type Description hub.mode Required string The literal string \"subscribe\" or \"unsubscribe\", which matches the original request to the Hub from the subscriber. hub.topic Required string The session topic given in the corresponding subscription request. MAY be a guid. hub.events Required string A comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request. hub.challenge Required string A Hub-generated, random string that SHALL be echoed by the subscriber to verify the subscription. hub.lease_seconds Required number The Hub-determined number of seconds that the subscription will stay active before expiring, measured from the time the verification request was made from the Hub to the subscriber. If provided to the client, the Hub SHALL unsubscribe the client once lease_seconds has expired and MAY send a subscription denial. If the subscriber wishes to continue the subscription it MAY resubscribe. Intent Verification Request Example GET https://app.example.com/session/callback/v7tfwuk17a?hub.mode=subscribe hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065 hub.events=patient-open,patient-close hub.challenge=meu3we944ix80ox hub.lease_seconds=7200 HTTP 1.1 Host: subscriber Intent Verification Response If the hub.topic of the Intent Verification Request corresponds to a pending subscription or unsubscription that the subscriber wishes to carry out it SHALL respond with an HTTP success (2xx) code, a header of Content-Type: text/html , and a response body equal to the hub.challenge parameter. If the subscriber does not agree with the action, the subscriber SHALL respond with a 404 \"Not Found\" response. The Hub SHALL consider other server response codes (3xx, 4xx, 5xx) to mean that the verification request has failed. If the subscriber returns an HTTP success (2xx) but the content body does not match the hub.challenge parameter, the Hub SHALL also consider verification to have failed. The below flow diagram and example illustrate the successful subscription sequence and message details. Successful Subscription Sequence Intent Verification Response Example HTTP/1.1 200 OK Content-Type: text/html meu3we944ix80ox NOTE The spec uses GET vs POST to differentiate between the confirmation/denial of the subscription request and delivering the content. While this is not considered \"best practice\" from a web architecture perspective, it does make implementation of the callback URL simpler. Since the POST body of the content distribution request may be any arbitrary content type and only includes the actual content of the document, using the GET vs POST distinction to switch between handling these two modes makes implementations simpler. Unsubscribe Once a subscribing app no longer wants to receive event notifications, it SHALL unsubscribe from the session. The unsubscribe request message mirrors the subscribe request message with only a single difference: the hub.mode MUST be equal to the lowercase string unsubscribe . Unsubscribe Request Example POST https://hub.example.com Host: hub Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/x-www-form-urlencoded hub.callback=https%3A%2F%2Fapp.example.com%2Fsession%2Fcallback%2Fv7tfwuk17a hub.mode=unsubscribe hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065 hub.secret=shhh-this-is-a-secret hub.events=patient-open,patient-close Event Notification The Hub SHALL notify subscribed apps of workflow-related events to which the app is subscribed. The notification is an HTTPS POST containing a JSON object in the request body. Event Notification Request Using the hub.secret from the subscription request, the Hub SHALL generate an HMAC signature of the payload and include that signature in the request headers of the notification. The X-Hub-Signature header's value SHALL be in the form method=signature where method is one of the recognized algorithm names and signature is the hexadecimal representation of the signature. The signature SHALL be computed using the HMAC algorithm ( RFC6151 ) with the request body as the data and the hub.secret as the key. The notification to the subscriber SHALL include a description of the subscribed event that just occurred, an ISO 8601-2 formatted timestamp in UTC and an event identifier that is universally unique for the Hub. The timestamp MAY be used by subscribers to establish message affinity (message ordering) through the use of a message queue. The event identifier MAY be used to differentiate retried messages from user actions. Event Notification Request Details The notification's hub.event and context fields inform the subscriber of the current state of the user's session. The hub.event is a user workflow event, from the Event Catalog (or an organization-specific event in reverse-domain name notation). The context is an array of named FHIR resources (similar to CDS Hooks's context field) that describe the current content of the user's session. Each event in the Event Catalog defines what context is expected in the notification. Hubs MAY use the FHIR _elements parameter to limit the size of the data being passed while also including additional, local identifiers that are likely already in use in production implementations. Subscribers SHALL accept a full FHIR resource or the _elements -limited resource as defined in the Event Catalog. Field Optionality Type Description timestamp Required string ISO 8601-2 timestamp in UTC describing the time at which the event occurred with subsecond accuracy. id Required string Event identifier used to recognize retried notifications. This id SHALL be unique for the Hub, for example a GUID. event Required object A json object describing the event. See below. Field Optionality Type Description hub.topic Required string The session topic given in the subscription request. MAY be a guid. hub.event Required string The event that triggered this notification, taken from the list of events from the subscription request. context Required array An array of named FHIR objects corresponding to the user's context after the given event has occurred. Common FHIR resources are: Patient, Encounter, ImagingStudy and List. The Hub SHALL only return FHIR resources that are authorized to be accessed with the existing OAuth 2.0 access_token. Event Notification Request Example POST https://app.example.com/session/callback/v7tfwuk17a HTTP/1.1 Host: subscriber X-Hub-Signature: sha256=dce85dc8dfde2426079063ad413268ac72dcf845f9f923193285e693be6ff3ae { timestamp : 2018-01-08T01:37:05.14 , id : q9v3jubddqt63n1 , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : patient-open , context : [ { key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 , identifier : [ { type : { coding : [ { system : http://terminology.hl7.org/CodeSystem/v2-0203 , value : MR , display : Medication Record Number } text : MRN ] } } ] } } ] } } Event Notification Response The subscriber SHALL respond to the notification with an appropriate HTTP status code. In the case of a successful notification, the subscriber SHALL respond with an HTTP [RFC7231] 2xx response code to indicate a success; otherwise, the subscriber SHALL respond with an HTTP error status code. The Hub MAY use these statuses to track synchronization state. Event Notification Response Example HTTP/1.1 200 OK Event Notification Errors All standard events are defined outside of the base FHIRcast specification in the Event Catalog with the single exception of the infrastructural syncerror event. If the subscriber cannot follow the context of the event, for instance due to an error or a deliberate choice to not follow a context, the subscriber SHALL respond with an HTTP error status code as described in Event Notification Response . If the Hub does not receive a successful HTTP status from an event notification, it SHOULD generate a syncerror event to the other subscribers of that topic. A syncerror notification has the same structure as the other event notification with a single FHIR OperationOutcome as the event's context. Event Notification Error Request Request Context Change Parameters Field Optionality Type Description timestamp Required string ISO 8601-2 timestamp in UTC describing the time at which the event occurred with subsecond accuracy. id Required string Event identifier, which MAY be used to recognize retried notifications. This id SHALL be unique and could be a GUID. This id SHOULD be re-used from the previous event communicated to subscribers related to the synchronization failure. event Required object A json object describing the event. See below . Event Notification Error Event Object Parameters Field Optionality Type Description hub.topic Required string The session topic given in the subscription request. hub.event Required string Shall be the string syncerror . context Required array An array containing a single FHIR OperationOutcome. The OperationOutcome SHALL use a code of processing . Event Notification Error Example POST https://hub.example.com/7jaa86kgdudewiaq0wtu HTTP/1.1 Host: hub Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/json { timestamp : 2018-01-08T01:37:05.14 , id : q9v3jubddqt63n1 , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : syncerror , context : [ { key : operationoutcome , resource : { resourceType : OperationOutcome , issue : [ { severity : warning , code : processing , diagnostics : AppId3456 failed to follow context } ] } } ] } } Request Context Change Similar to the Hub's notifications to the subscriber, the subscriber MAY request context changes with an HTTP POST to the hub.url . The Hub SHALL either accept this context change by responding with any successful HTTP status or reject it by responding with any 4xx or 5xx HTTP status. The subscriber SHALL be capable of gracefully handling a rejected context request. Once a requested context change is accepted, the Hub SHALL broadcast the context notification to all subscribers, including the original requestor. Request Context Change Request Request Context Change Parameters Field Optionality Type Description timestamp Required string ISO 8601-2 timestamp in UTC describing the time at which the event occurred with subsecond accuracy. id Required string Event identifier, which MAY be used to recognize retried notifications. This id SHALL be uniquely generated by the subscriber and could be a GUID. Following an accepted context change request, the Hub MAY re-use this value in the broadcasted event notifications. event Required object A json object describing the event. See below . Request Context Change Event Object Parameters Field Optionality Type Description hub.topic Required string The session topic given in the subscription request. hub.event Required string The event that triggered this request for the subscriber, taken from the list of events from the subscription request. context Required array An array of named FHIR objects corresponding to the user's context after the given event has occurred. Common FHIR resources are: Patient, Encounter, ImagingStudy and List. POST https://hub.example.com/7jaa86kgdudewiaq0wtu HTTP/1.1 Host: hub Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/json { timestamp : 2018-01-08T01:40:05.14 , id : wYXStHqxFQyHFELh , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : close-patient-chart , context : [ { key : patient , resource : { resourceType : Patient , id : 798E4MyMcpCWHab9 , identifier : [ { type : { coding : [ { system : http://terminology.hl7.org/CodeSystem/v2-0203 , value : MR , display : Medication Record Number } text : MRN ] } } ] } } ] } } Events FHIRcast describes a workflow event subscription and notification scheme towards the goal of improving a clinician's workflow across multiple disparate applications. The set of events defined here are not a closed set; anyone is able to define new events to fit their use cases and propose those events to the community. New events are proposed in a prescribed format using the documentation template by submitting a pull request . FHIRcast events are versioned, and mature according to the Event Maturity Model . FHIRcast events are stateless. Context changes are a complete replacement of any previously communicated context, not \"deltas\". Understanding an event SHALL not require receiving a previous or future event. Event Definition Format Each event definition, specifies a single event name, a description of the workflow in which the event occurs, and contextual information associated with the event. FHIR is the interoperable data model used by FHIRcast. The context information associated with an event is communicated as subsets of FHIR resources. Event notifications SHALL include the elements of the FHIR resources defined in the context from the event definition. Event notification MAY include other elements of these resources. The source of these resources is the application's context or the FHIR server. The Hub SHALL return FHIR resources from the application's context. If the resource is not part of the application's context, it SHALL read them from the FHIR server. For example, when the ImagingStudy-open event occurs, the notification sent to a subscriber SHALL include the ImagingStudy FHIR resource. Hubs should send the results of an ImagingStudy FHIR read using the _elements query parameter, like so: ImagingStudy/{id}?_elements=identifier,accession and in accordance with the FHIR specification . A Hub may not support the _elements query parameter; a subscriber SHALL gracefully handle receiving a full FHIR resource in the context of a notification. Each defined event in the standard event catalog SHALL be defined in the following format. Event Definition Format: hook-name Most FHIRcast events conform to an extensible syntax based upon FHIR resources. In the rare case where the FHIR data model doesn't describe content in the session, FHIRcast events MAY be statically named. For example, FHIR doesn't cleanly contain the concept of a user or user's session. FHIRcast events SHOULD conform to this extensible syntax, patterned after the SMART on FHIR scope syntax. Expressed in EBNF notation, the FHIRcast syntax for workflow related events is: hub.events ::= ( fhir-resource ) '-' ( 'open' | 'close' | '*' ) Event names are unique and case-insensitive. Statically named events, specific to an organization, SHALL be named with reverse domain notation (e.g. org.example.patient-transmogrify ). Reverse domain notation SHALL not be used by a standard event catalog. Statically named events SHALL not contain a dash (\"-\"). Event Definition Format: Workflow Describe the workflow in which the event occurs. Event creators SHOULD include as much detail and clarity as possible to minimize any ambiguity or confusion amongst implementors. Event Definition Format: Context Describe the set of contextual data associated with this event. Only data logically and necessarily associated with the purpose of this workflow related event should be represented in context. An event SHALL contain all required data fields, MAY contain optional data fields and SHALL not contain any additional fields. All fields available within an event's context SHALL be defined in a table where each field is described by the following attributes: Key : The name of the field in the context JSON object. Event authors SHOULD name their context fields to be consistent with other existing events when referring to the same context field. Optionality : A string value of either REQUIRED , OPTIONAL or Required, if exists FHIR operation to generate context : A FHIR read or search string illustrating the intended content of the event. Description : A functional description of the context value. If this value can change according to the FHIR version in use, the description SHOULD describe the value for each supported FHIR version. Event Maturity Model The intent of the FHIRcast Event Maturity Model is to attain broad community engagement and consensus, before an event is labeled as mature, and to ensure that the event is necessary, implementable, and worthwhile to the systems that would reasonably be expected to use it. Implementer feedback should drive the maturity of new events. Diverse participation in open developer forums and events, such as HL7 FHIR Connectathons, is necessary to achieve significant implementer feedback. The below criteria will be evaluated with these goals in mind. Maturity Level Maturity title Requirements 0 Draft Event is correctly named and defined per the FHIRcast event template . 1 Submitted The above, and \u2026 Event definition is written up as a pull request using the Event template and community feedback is solicited from the community (e.g. the zulip FHIRcast stream](https://chat.fhir.org/#narrow/stream/179271-FHIRcast)). 2 Tested The above, and \u2026 The event has been tested and successfully supports interoperability among at least one Hub and two independent subscribing apps using semi-realistic data and scenarios (e.g. at a FHIR Connectathon). The github pull request defining the event is approved and published. 3 Considered The above, and \u2026 At least 3 distinct organizations recorded ten distinct implementer comments (including a github issue, tracker item, or comment on the event definition page), including at least two Hubs and three subscribing apps. The event has been tested at two connectathons. 4 Documented The above, and \u2026 The author agrees that the artifact is sufficiently stable to require implementer consultation for subsequent non-backward compatible changes. The event is implemented in the standard FHIRcast reference implementation and multiple prototype projects. The Event specification SHALL: Identify a broad set of example contexts in which the event may be used with a minimum of three, but as many as 8-10. Clearly differentiate the event from similar events or other standards to help an implementer determine if the event is correct for their scenario. Explicitly document example scenarios when the event should not be used. 5 Mature The above, and ... The event has been implemented in production in at least two Hubs and three independent subscribing apps. An HL7 working group ballots the event and the event has passed HL7 STU ballot. 6 Normative The above, and ... the responsible HL7 working group and the sponsoring working group agree the material is ready to lock down and the event has passed HL7 normative ballot Event Maturity As each event progresses through a process of being defined, tested, implemented, used in production environments, and balloted, the event's formal maturity level increases. Each event has its own maturity level, which SHALL be defined in the event's definition and correspond to the Event Maturity Model . Change Log Changes made to an event's definition SHALL be documented in a change log to ensure event consumers can track what has been changed over the life of an event. The change log SHALL contain the following elements: Version: The version of the change Description: A description of the change and its impact For example: Version Description 1.1 Added new context FHIR object 1.0.1 Clarified workflow description 1.0 Initial Release ---","title":"STU1"},{"location":"specification/STU1/#fhircast","text":"\"Standard for Trial Use\" (STU1) This is the 1.0 release of the FHIRcast specification.","title":"FHIRcast"},{"location":"specification/STU1/#overview","text":"The FHIRcast specification describes the APIs used to synchronize disparate healthcare applications' user interfaces in real time, allowing them to show the same clinical content to a user (or group of users). Once the subscribing app knows about the session , the app may subscribe to specific workflow-related events for the given session. The subscription is verified and the app is notified when those workflow-related events occur; for example, by the clinician opening a patient's chart. The subscribing app may initiate context changes by accessing APIs exposed by the Hub; for example, closing the patient's chart. The app deletes its subscription to no longer receive notifications. The notification message describing the workflow event is a simple json wrapper around one or more FHIR resources. FHIRcast is modeled on the webhook design pattern and specifically the W3C WebSub RFC , such as its use of GET vs POST interactions and a Hub for managing subscriptions. FHIRcast recommends the HL7 SMART on FHIR launch protocol for both session discovery and API authentication. The below flow diagram illustrates the series of interactions. All data exchanged through the HTTP APIs SHALL be sent and received as JSON structures, and SHALL be transmitted over channels secured using the Hypertext Transfer Protocol (HTTP) over Transport Layer Security (TLS), also known as HTTPS and defined in RFC2818 .","title":"Overview"},{"location":"specification/STU1/#session-discovery","text":"A session is an abstract concept representing a shared workspace, such as user's login session over multiple applications or a shared view of one application distributed to multiple users. FHIRcast requires a session to have a unique, unguessable and opaque identifier. This identifier is exchanged as the value of the hub.topic parameter. Before establishing a subscription, an app must not only know the hub.topic , but also the hub.url which contains the base url of the Hub. Systems SHOULD use SMART on FHIR to authorize, authenticate and exchange initial shared context. If using SMART, following a SMART on FHIR EHR launch or SMART on FHIR standalone launch , the app SHALL request and, if authorized, SHALL be granted one or more fhircast OAuth 2.0 scopes. Accompanying this scope grant, the authorization server SHALL supply the hub.url and hub.topic SMART launch parameters alongside the access token and other parameters appropriate to establish initial shared context. Per SMART, when scopes of openid and fhirUser are granted, the authorization server additionally sends the current user's identity in an id_token . Although FHIRcast works best with the SMART on FHIR launch and authorization process, implementation-specific launch, authentication, and authorization protocols may be possible. If not using SMART on FHIR, the mechanism enabling the app to discover the hub.url and hub.topic is not defined in FHIRcast. See other launch scenarios for guidance.","title":"Session Discovery"},{"location":"specification/STU1/#fhircast-authorization-smart-scopes","text":"FHIRcast defines OAuth 2.0 access scopes that correspond directly to FHIRcast events . Our scopes associate read or write permissions to an event. Apps that need to receive workflow related events should ask for read scopes. Apps that request context changes should ask for write scopes. Hubs may decide what specific interactions and operations will be enabled by these scopes. Expressed in EBNF notation, FHIRcast's scope syntax is: scope ::= ( 'fhircast' ) '/' ( FHIRcast-event ) '.' ( 'read' | 'write' | '*' ) The FHIRcast event name is also a computable syntax , the complete syntax for FHIRcast scopes is: scope ::= 'fhircast' '/' fhir-resource '-' ( 'open' | 'close' | '*' ) '.' ( 'read' | 'write' | '*' )","title":"FHIRcast Authorization &amp; SMART scopes"},{"location":"specification/STU1/#smart-launch-example","text":"Note that the SMART launch parameters include the Hub's base url and the session identifier in the hub.url and hub.topic fields. { access_token : i8hweunweunweofiwweoijewiwe , token_type : bearer , patient : 123 , expires_in : 3600, encounter : 456 , imagingstudy : 789 , hub.url : https://hub.example.com , hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , }","title":"SMART Launch Example"},{"location":"specification/STU1/#subscribing-and-unsubscribing","text":"Subscribing consists of two exchanges: Subscriber requests a subscription at the hub.url url. Hub confirms the subscription was actually requested by the subscriber by contacting the hub.callback url. Unsubscribing works in the same way, except with a single parameter changed to indicate the desire to unsubscribe.","title":"Subscribing and Unsubscribing"},{"location":"specification/STU1/#subscription-request","text":"To create a subscription, the subscribing app SHALL perform an HTTP POST ( RFC7231 ) to the Hub's base url (as specified in hub.url ) with the parameters in the table below. This request SHALL have a Content-Type header of application/x-www-form-urlencoded and SHALL use the following parameters in its body, formatted accordingly: Field Optionality Type Description hub.callback Required string The Subscriber's callback URL where notifications should be delivered. The callback URL SHOULD be an unguessable URL that is unique per subscription. hub.mode Required string The literal string \"subscribe\" or \"unsubscribe\", depending on the goal of the request. hub.topic Required string The identifier of the user's session that the subscriber wishes to subscribe to or unsubscribe from. MAY be a guid. hub.secret Required string A subscriber-provided cryptographically random unique secret string that SHALL be used to compute an HMAC digest delivered in each notification. This parameter SHALL be less than 200 bytes in length. hub.events Required string Comma-separated list of event types from the Event Catalog for which the Subscriber wants notifications. hub.lease_seconds Optional number Number of seconds for which the subscriber would like to have the subscription active, given as a positive decimal integer. Hubs MAY choose to respect this value or not, depending on their own policies, and MAY set a default value if the subscriber omits the parameter. If using OAuth 2.0, the Hub SHALL limit the subscription lease seconds to be less than or equal to the access token's expiration. If OAuth 2.0 authentication is used, this POST request SHALL contain the Bearer access token in the HTTP Authorization header. Hubs SHALL allow subscribers to re-request subscriptions that are already activated. Each subsequent and verified request to a Hub to subscribe or unsubscribe SHALL override the previous subscription state for a specific topic / callback URL combination. The callback URL MAY contain arbitrary query string parameters (e.g., ?foo=bar red=fish ). Hubs SHALL preserve the query string during subscription verification by appending new, Hub-defined, parameters to the end of the list using the (ampersand) character to join. When sending the event notifications, the Hub SHALL make a POST request to the callback URL including any query string parameters in the URL portion of the request, not as POST body parameters. The client that creates the subscription may not be the same system as the server hosting the callback url. (For example, some type of federated authorization model could possibly exist between these two systems.) However, in FHIRcast, the Hub assumes that the same authorization and access rights apply to both the subscribing client and the callback url.","title":"Subscription Request"},{"location":"specification/STU1/#subscription-request-example","text":"In this example, the app asks to be notified of the patient-open and patient-close events. POST https://hub.example.com Host: hub.example.com Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/x-www-form-urlencoded hub.callback=https%3A%2F%2Fapp.example.com%2Fsession%2Fcallback%2Fv7tfwuk17a hub.mode=subscribe hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065 hub.secret=shhh-this-is-a-secret hub.events=patient-open,patient-close","title":"Subscription Request Example"},{"location":"specification/STU1/#subscription-response","text":"If the Hub URL supports FHIRcast and is able to handle the subscription or unsubscription request, the Hub SHALL respond to a subscription request with an HTTP 202 \"Accepted\" response to indicate that the request was received and will now be verified by the Hub. The Hub SHOULD perform the verification of intent as soon as possible. If a Hub finds any errors in the subscription request, an appropriate HTTP error response code (4xx or 5xx) MUST be returned. In the event of an error, the Hub SHOULD return a description of the error in the response body as plain text, used to assist the client developer in understanding the error. This is not meant to be shown to the end user. Hubs MAY decide to reject some callback URLs or topic based on their own policies.","title":"Subscription Response"},{"location":"specification/STU1/#subscription-response-example","text":"HTTP/1.1 202 Accepted","title":"Subscription Response Example"},{"location":"specification/STU1/#subscription-denial","text":"If (and when) the subscription is denied, the Hub SHALL inform the subscriber by sending an HTTP GET request to the subscriber's callback URL as given in the subscription request. This can occur when the subscription is requested for a variety of reasons, or it can occur after the subscription had already been accepted because the Hub no longer supports that subscription (e.g. it has expired). This request has the following query string arguments appended, to which the subscriber SHALL respond with an HTTP success (2xx) code. Field Optionality Type Description hub.mode Required string The literal string \"denied\". hub.topic Required string The topic given in the corresponding subscription request. MAY be a guid. hub.events Required string A comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request, which are being denied. hub.reason Optional string The Hub may include a reason. The subscription MAY be denied by the Hub at any point (even if it was previously accepted). The Subscriber SHOULD then consider that the subscription is not possible anymore. The below flow diagram and example illustrate the subscription denial sequence and message details.","title":"Subscription Denial"},{"location":"specification/STU1/#subscription-denial-sequence","text":"","title":"Subscription Denial Sequence"},{"location":"specification/STU1/#subscription-denial-example","text":"GET https://app.example.com/session/callback/v7tfwuk17a?hub.mode=denied hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065hub.events=patient-open,patient-close hub.reason=session+unexpectedly+stopped HTTP 1.1 Host: subscriber","title":"Subscription Denial Example"},{"location":"specification/STU1/#intent-verification","text":"If the subscription is not denied, the Hub SHALL perform the verification of intent of the subscriber, this applies to apps unsubscribing as well. The hub.callback url verification process ensures that the subscriber actually controls the callback url.","title":"Intent Verification"},{"location":"specification/STU1/#intent-verification-request","text":"In order to prevent an attacker from creating unwanted subscriptions on behalf of a subscriber (or unsubscribing desired ones), a Hub must ensure that the subscriber did indeed send the subscription request. The Hub SHALL verify a subscription request by sending an HTTPS GET request to the subscriber's callback URL as given in the subscription request. This request SHALL have the following query string arguments appended Field Optionality Type Description hub.mode Required string The literal string \"subscribe\" or \"unsubscribe\", which matches the original request to the Hub from the subscriber. hub.topic Required string The session topic given in the corresponding subscription request. MAY be a guid. hub.events Required string A comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request. hub.challenge Required string A Hub-generated, random string that SHALL be echoed by the subscriber to verify the subscription. hub.lease_seconds Required number The Hub-determined number of seconds that the subscription will stay active before expiring, measured from the time the verification request was made from the Hub to the subscriber. If provided to the client, the Hub SHALL unsubscribe the client once lease_seconds has expired and MAY send a subscription denial. If the subscriber wishes to continue the subscription it MAY resubscribe.","title":"Intent Verification Request"},{"location":"specification/STU1/#intent-verification-request-example","text":"GET https://app.example.com/session/callback/v7tfwuk17a?hub.mode=subscribe hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065 hub.events=patient-open,patient-close hub.challenge=meu3we944ix80ox hub.lease_seconds=7200 HTTP 1.1 Host: subscriber","title":"Intent Verification Request Example"},{"location":"specification/STU1/#intent-verification-response","text":"If the hub.topic of the Intent Verification Request corresponds to a pending subscription or unsubscription that the subscriber wishes to carry out it SHALL respond with an HTTP success (2xx) code, a header of Content-Type: text/html , and a response body equal to the hub.challenge parameter. If the subscriber does not agree with the action, the subscriber SHALL respond with a 404 \"Not Found\" response. The Hub SHALL consider other server response codes (3xx, 4xx, 5xx) to mean that the verification request has failed. If the subscriber returns an HTTP success (2xx) but the content body does not match the hub.challenge parameter, the Hub SHALL also consider verification to have failed. The below flow diagram and example illustrate the successful subscription sequence and message details.","title":"Intent Verification Response"},{"location":"specification/STU1/#successful-subscription-sequence","text":"","title":"Successful Subscription Sequence"},{"location":"specification/STU1/#intent-verification-response-example","text":"HTTP/1.1 200 OK Content-Type: text/html meu3we944ix80ox NOTE The spec uses GET vs POST to differentiate between the confirmation/denial of the subscription request and delivering the content. While this is not considered \"best practice\" from a web architecture perspective, it does make implementation of the callback URL simpler. Since the POST body of the content distribution request may be any arbitrary content type and only includes the actual content of the document, using the GET vs POST distinction to switch between handling these two modes makes implementations simpler.","title":"Intent Verification Response Example"},{"location":"specification/STU1/#unsubscribe","text":"Once a subscribing app no longer wants to receive event notifications, it SHALL unsubscribe from the session. The unsubscribe request message mirrors the subscribe request message with only a single difference: the hub.mode MUST be equal to the lowercase string unsubscribe .","title":"Unsubscribe"},{"location":"specification/STU1/#unsubscribe-request-example","text":"POST https://hub.example.com Host: hub Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/x-www-form-urlencoded hub.callback=https%3A%2F%2Fapp.example.com%2Fsession%2Fcallback%2Fv7tfwuk17a hub.mode=unsubscribe hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065 hub.secret=shhh-this-is-a-secret hub.events=patient-open,patient-close","title":"Unsubscribe Request Example"},{"location":"specification/STU1/#event-notification","text":"The Hub SHALL notify subscribed apps of workflow-related events to which the app is subscribed. The notification is an HTTPS POST containing a JSON object in the request body.","title":"Event Notification"},{"location":"specification/STU1/#event-notification-request","text":"Using the hub.secret from the subscription request, the Hub SHALL generate an HMAC signature of the payload and include that signature in the request headers of the notification. The X-Hub-Signature header's value SHALL be in the form method=signature where method is one of the recognized algorithm names and signature is the hexadecimal representation of the signature. The signature SHALL be computed using the HMAC algorithm ( RFC6151 ) with the request body as the data and the hub.secret as the key. The notification to the subscriber SHALL include a description of the subscribed event that just occurred, an ISO 8601-2 formatted timestamp in UTC and an event identifier that is universally unique for the Hub. The timestamp MAY be used by subscribers to establish message affinity (message ordering) through the use of a message queue. The event identifier MAY be used to differentiate retried messages from user actions.","title":"Event Notification Request"},{"location":"specification/STU1/#event-notification-request-details","text":"The notification's hub.event and context fields inform the subscriber of the current state of the user's session. The hub.event is a user workflow event, from the Event Catalog (or an organization-specific event in reverse-domain name notation). The context is an array of named FHIR resources (similar to CDS Hooks's context field) that describe the current content of the user's session. Each event in the Event Catalog defines what context is expected in the notification. Hubs MAY use the FHIR _elements parameter to limit the size of the data being passed while also including additional, local identifiers that are likely already in use in production implementations. Subscribers SHALL accept a full FHIR resource or the _elements -limited resource as defined in the Event Catalog. Field Optionality Type Description timestamp Required string ISO 8601-2 timestamp in UTC describing the time at which the event occurred with subsecond accuracy. id Required string Event identifier used to recognize retried notifications. This id SHALL be unique for the Hub, for example a GUID. event Required object A json object describing the event. See below. Field Optionality Type Description hub.topic Required string The session topic given in the subscription request. MAY be a guid. hub.event Required string The event that triggered this notification, taken from the list of events from the subscription request. context Required array An array of named FHIR objects corresponding to the user's context after the given event has occurred. Common FHIR resources are: Patient, Encounter, ImagingStudy and List. The Hub SHALL only return FHIR resources that are authorized to be accessed with the existing OAuth 2.0 access_token.","title":"Event Notification Request Details"},{"location":"specification/STU1/#event-notification-request-example","text":"POST https://app.example.com/session/callback/v7tfwuk17a HTTP/1.1 Host: subscriber X-Hub-Signature: sha256=dce85dc8dfde2426079063ad413268ac72dcf845f9f923193285e693be6ff3ae { timestamp : 2018-01-08T01:37:05.14 , id : q9v3jubddqt63n1 , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : patient-open , context : [ { key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 , identifier : [ { type : { coding : [ { system : http://terminology.hl7.org/CodeSystem/v2-0203 , value : MR , display : Medication Record Number } text : MRN ] } } ] } } ] } }","title":"Event Notification Request Example"},{"location":"specification/STU1/#event-notification-response","text":"The subscriber SHALL respond to the notification with an appropriate HTTP status code. In the case of a successful notification, the subscriber SHALL respond with an HTTP [RFC7231] 2xx response code to indicate a success; otherwise, the subscriber SHALL respond with an HTTP error status code. The Hub MAY use these statuses to track synchronization state.","title":"Event Notification Response"},{"location":"specification/STU1/#event-notification-response-example","text":"HTTP/1.1 200 OK","title":"Event Notification Response Example"},{"location":"specification/STU1/#event-notification-errors","text":"All standard events are defined outside of the base FHIRcast specification in the Event Catalog with the single exception of the infrastructural syncerror event. If the subscriber cannot follow the context of the event, for instance due to an error or a deliberate choice to not follow a context, the subscriber SHALL respond with an HTTP error status code as described in Event Notification Response . If the Hub does not receive a successful HTTP status from an event notification, it SHOULD generate a syncerror event to the other subscribers of that topic. A syncerror notification has the same structure as the other event notification with a single FHIR OperationOutcome as the event's context.","title":"Event Notification Errors"},{"location":"specification/STU1/#event-notification-error-request","text":"","title":"Event Notification Error Request"},{"location":"specification/STU1/#request-context-change-parameters","text":"Field Optionality Type Description timestamp Required string ISO 8601-2 timestamp in UTC describing the time at which the event occurred with subsecond accuracy. id Required string Event identifier, which MAY be used to recognize retried notifications. This id SHALL be unique and could be a GUID. This id SHOULD be re-used from the previous event communicated to subscribers related to the synchronization failure. event Required object A json object describing the event. See below .","title":"Request Context Change Parameters"},{"location":"specification/STU1/#event-notification-error-event-object-parameters","text":"Field Optionality Type Description hub.topic Required string The session topic given in the subscription request. hub.event Required string Shall be the string syncerror . context Required array An array containing a single FHIR OperationOutcome. The OperationOutcome SHALL use a code of processing .","title":"Event Notification Error Event Object Parameters"},{"location":"specification/STU1/#event-notification-error-example","text":"POST https://hub.example.com/7jaa86kgdudewiaq0wtu HTTP/1.1 Host: hub Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/json { timestamp : 2018-01-08T01:37:05.14 , id : q9v3jubddqt63n1 , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : syncerror , context : [ { key : operationoutcome , resource : { resourceType : OperationOutcome , issue : [ { severity : warning , code : processing , diagnostics : AppId3456 failed to follow context } ] } } ] } }","title":"Event Notification Error Example"},{"location":"specification/STU1/#request-context-change","text":"Similar to the Hub's notifications to the subscriber, the subscriber MAY request context changes with an HTTP POST to the hub.url . The Hub SHALL either accept this context change by responding with any successful HTTP status or reject it by responding with any 4xx or 5xx HTTP status. The subscriber SHALL be capable of gracefully handling a rejected context request. Once a requested context change is accepted, the Hub SHALL broadcast the context notification to all subscribers, including the original requestor.","title":"Request Context Change"},{"location":"specification/STU1/#request-context-change-request","text":"","title":"Request Context Change Request"},{"location":"specification/STU1/#request-context-change-parameters_1","text":"Field Optionality Type Description timestamp Required string ISO 8601-2 timestamp in UTC describing the time at which the event occurred with subsecond accuracy. id Required string Event identifier, which MAY be used to recognize retried notifications. This id SHALL be uniquely generated by the subscriber and could be a GUID. Following an accepted context change request, the Hub MAY re-use this value in the broadcasted event notifications. event Required object A json object describing the event. See below .","title":"Request Context Change Parameters"},{"location":"specification/STU1/#request-context-change-event-object-parameters","text":"Field Optionality Type Description hub.topic Required string The session topic given in the subscription request. hub.event Required string The event that triggered this request for the subscriber, taken from the list of events from the subscription request. context Required array An array of named FHIR objects corresponding to the user's context after the given event has occurred. Common FHIR resources are: Patient, Encounter, ImagingStudy and List. POST https://hub.example.com/7jaa86kgdudewiaq0wtu HTTP/1.1 Host: hub Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/json { timestamp : 2018-01-08T01:40:05.14 , id : wYXStHqxFQyHFELh , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : close-patient-chart , context : [ { key : patient , resource : { resourceType : Patient , id : 798E4MyMcpCWHab9 , identifier : [ { type : { coding : [ { system : http://terminology.hl7.org/CodeSystem/v2-0203 , value : MR , display : Medication Record Number } text : MRN ] } } ] } } ] } }","title":"Request Context Change Event Object Parameters"},{"location":"specification/STU1/#events","text":"FHIRcast describes a workflow event subscription and notification scheme towards the goal of improving a clinician's workflow across multiple disparate applications. The set of events defined here are not a closed set; anyone is able to define new events to fit their use cases and propose those events to the community. New events are proposed in a prescribed format using the documentation template by submitting a pull request . FHIRcast events are versioned, and mature according to the Event Maturity Model . FHIRcast events are stateless. Context changes are a complete replacement of any previously communicated context, not \"deltas\". Understanding an event SHALL not require receiving a previous or future event.","title":"Events"},{"location":"specification/STU1/#event-definition-format","text":"Each event definition, specifies a single event name, a description of the workflow in which the event occurs, and contextual information associated with the event. FHIR is the interoperable data model used by FHIRcast. The context information associated with an event is communicated as subsets of FHIR resources. Event notifications SHALL include the elements of the FHIR resources defined in the context from the event definition. Event notification MAY include other elements of these resources. The source of these resources is the application's context or the FHIR server. The Hub SHALL return FHIR resources from the application's context. If the resource is not part of the application's context, it SHALL read them from the FHIR server. For example, when the ImagingStudy-open event occurs, the notification sent to a subscriber SHALL include the ImagingStudy FHIR resource. Hubs should send the results of an ImagingStudy FHIR read using the _elements query parameter, like so: ImagingStudy/{id}?_elements=identifier,accession and in accordance with the FHIR specification . A Hub may not support the _elements query parameter; a subscriber SHALL gracefully handle receiving a full FHIR resource in the context of a notification. Each defined event in the standard event catalog SHALL be defined in the following format.","title":"Event Definition Format"},{"location":"specification/STU1/#event-definition-format-hook-name","text":"Most FHIRcast events conform to an extensible syntax based upon FHIR resources. In the rare case where the FHIR data model doesn't describe content in the session, FHIRcast events MAY be statically named. For example, FHIR doesn't cleanly contain the concept of a user or user's session. FHIRcast events SHOULD conform to this extensible syntax, patterned after the SMART on FHIR scope syntax. Expressed in EBNF notation, the FHIRcast syntax for workflow related events is: hub.events ::= ( fhir-resource ) '-' ( 'open' | 'close' | '*' ) Event names are unique and case-insensitive. Statically named events, specific to an organization, SHALL be named with reverse domain notation (e.g. org.example.patient-transmogrify ). Reverse domain notation SHALL not be used by a standard event catalog. Statically named events SHALL not contain a dash (\"-\").","title":"Event Definition Format: hook-name"},{"location":"specification/STU1/#event-definition-format-workflow","text":"Describe the workflow in which the event occurs. Event creators SHOULD include as much detail and clarity as possible to minimize any ambiguity or confusion amongst implementors.","title":"Event Definition Format: Workflow"},{"location":"specification/STU1/#event-definition-format-context","text":"Describe the set of contextual data associated with this event. Only data logically and necessarily associated with the purpose of this workflow related event should be represented in context. An event SHALL contain all required data fields, MAY contain optional data fields and SHALL not contain any additional fields. All fields available within an event's context SHALL be defined in a table where each field is described by the following attributes: Key : The name of the field in the context JSON object. Event authors SHOULD name their context fields to be consistent with other existing events when referring to the same context field. Optionality : A string value of either REQUIRED , OPTIONAL or Required, if exists FHIR operation to generate context : A FHIR read or search string illustrating the intended content of the event. Description : A functional description of the context value. If this value can change according to the FHIR version in use, the description SHOULD describe the value for each supported FHIR version.","title":"Event Definition Format: Context"},{"location":"specification/STU1/#event-maturity-model","text":"The intent of the FHIRcast Event Maturity Model is to attain broad community engagement and consensus, before an event is labeled as mature, and to ensure that the event is necessary, implementable, and worthwhile to the systems that would reasonably be expected to use it. Implementer feedback should drive the maturity of new events. Diverse participation in open developer forums and events, such as HL7 FHIR Connectathons, is necessary to achieve significant implementer feedback. The below criteria will be evaluated with these goals in mind. Maturity Level Maturity title Requirements 0 Draft Event is correctly named and defined per the FHIRcast event template . 1 Submitted The above, and \u2026 Event definition is written up as a pull request using the Event template and community feedback is solicited from the community (e.g. the zulip FHIRcast stream](https://chat.fhir.org/#narrow/stream/179271-FHIRcast)). 2 Tested The above, and \u2026 The event has been tested and successfully supports interoperability among at least one Hub and two independent subscribing apps using semi-realistic data and scenarios (e.g. at a FHIR Connectathon). The github pull request defining the event is approved and published. 3 Considered The above, and \u2026 At least 3 distinct organizations recorded ten distinct implementer comments (including a github issue, tracker item, or comment on the event definition page), including at least two Hubs and three subscribing apps. The event has been tested at two connectathons. 4 Documented The above, and \u2026 The author agrees that the artifact is sufficiently stable to require implementer consultation for subsequent non-backward compatible changes. The event is implemented in the standard FHIRcast reference implementation and multiple prototype projects. The Event specification SHALL: Identify a broad set of example contexts in which the event may be used with a minimum of three, but as many as 8-10. Clearly differentiate the event from similar events or other standards to help an implementer determine if the event is correct for their scenario. Explicitly document example scenarios when the event should not be used. 5 Mature The above, and ... The event has been implemented in production in at least two Hubs and three independent subscribing apps. An HL7 working group ballots the event and the event has passed HL7 STU ballot. 6 Normative The above, and ... the responsible HL7 working group and the sponsoring working group agree the material is ready to lock down and the event has passed HL7 normative ballot","title":"Event Maturity Model"},{"location":"specification/STU1/#event-maturity","text":"As each event progresses through a process of being defined, tested, implemented, used in production environments, and balloted, the event's formal maturity level increases. Each event has its own maturity level, which SHALL be defined in the event's definition and correspond to the Event Maturity Model .","title":"Event Maturity"},{"location":"specification/STU1/#change-log","text":"Changes made to an event's definition SHALL be documented in a change log to ensure event consumers can track what has been changed over the life of an event. The change log SHALL contain the following elements: Version: The version of the change Description: A description of the change and its impact For example: Version Description 1.1 Added new context FHIR object 1.0.1 Clarified workflow description 1.0 Initial Release ---","title":"Change Log"},{"location":"specification/STU2/","text":"FHIRcast Overview The FHIRcast specification describes the APIs used to synchronize disparate healthcare applications' user interfaces in real time, allowing them to show the same clinical content to a user (or group of users). Once the subscribing app knows about the session , the app subscribes to specific workflow-related events for the given session. The app is then notified when those workflow-related events occur; for example, when the clinician opens a patient's chart. The subscribing app can also initiate context changes by accessing APIs defined in this specification; for example, closing the patient's chart. The app deletes its subscription to no longer receive notifications. The notification messages describing the workflow event are defined as a simple JSON wrapper around one or more FHIR resources. FHIRcast recommends the HL7 SMART on FHIR launch protocol for both session discovery and API authentication. FHIRcast enables a subscriber to receive notifications either through a webhook or over a WebSocket connection. This protocol is modeled on the W3C WebSub RFC , such as its use of GET vs POST interactions and a Hub for managing subscriptions. The Hub exposes APIs for subscribing and unsubscribing, requesting context changes, and distributing event notifications. The flow diagram presented below illustrates the series of interactions specified by FHIRcast, their origination and their outcome. All data exchanged through the HTTP APIs SHALL be formatted, sent and received as JSON structures, and SHALL be transmitted over channels secured using the Hypertext Transfer Protocol (HTTP) over Transport Layer Security (TLS), also known as HTTPS which is defined in RFC2818 . All data exchanged through WebSockets SHALL be formatted, sent and received as JSON structures, and SHALL be transmitted over Secure Web Sockets (WSS) as defined in RFC6455 . Events FHIRcast describes a workflow event subscription and notification scheme with the goal of improving a clinician's workflow across multiple disparate applications. The set of events defined in this specification is not a closed set; anyone is able to define new events to fit specific use cases and are encouraged to propose those events to the community for standardization. New events are proposed in a prescribed format using the documentation template by submitting a pull request . FHIRcast events are versioned, and mature according to the Event Maturity Model . FHIRcast events do not communicate previous state. For a given event, opens and closes are complete replacements of previous communicated events, not \"deltas\". Understanding an event SHALL not require receiving a previous or future event. Event Definition Format Each event definition: specifies a single event name, a description of the workflow in which the event occurs, and contextual information associated with the event. FHIR is the interoperable data model used by FHIRcast. The context information associated with an event is communicated as subsets of FHIR resources. Event notifications SHALL include the elements of the FHIR resources defined in the context from the event definition. Event notifications MAY include other elements of these resources. For example, when the ImagingStudy-open event occurs, the notification sent to a subscriber SHALL include an ImagingStudy FHIR resource, which includes at least the elements defined in the _elements query parameter, as indicated in the event's definition. For ImagingStudy, this is defined as: ImagingStudy/{id}?_elements=identifier,accession . (The _elements query parameter is defined in the FHIR specification ). A Hub SHALL at least send the required elements; a subscriber SHALL gracefully handle receiving a full FHIR resource in the context of a notification. Each defined event in the standard event catalog SHALL be defined in the following format. Event Definition Format: hook-name Most FHIRcast events conform to an extensible syntax based upon FHIR resources. In the rare case where the FHIR data model doesn't describe content in the session, FHIRcast events MAY be named differently. For example, FHIR doesn't cleanly contain the concept of a user or user's session. Patterned after the SMART on FHIR scope syntax and expressed in EBNF notation, the FHIRcast syntax for workflow related events is: hub.events ::= ( fhir-resource | '*' ) '-' ( 'open' | 'close' | '*' ) FHIRcast events SHOULD conform to this extensible syntax. Event names are unique and case-insensitive. Implementers may define their own events. Such proprietary events SHALL be named with reverse domain notation (e.g. org.example.patient_transmogrify ). Reverse domain notation SHALL NOT be used by a standard event catalog. Proprietary events SHALL NOT contain a dash (\"-\"). Event Definition Format: Workflow Describe the workflow in which the event occurs. Event creators SHOULD include as much detail and clarity as possible to minimize any ambiguity or confusion amongst implementers. Event Definition Format: Context Describe the set of contextual data associated with this event. Only data logically and necessarily associated with the purpose of this workflow related event should be represented in context. An event SHALL contain all required data fields, MAY contain optional data fields and SHALL NOT contain any additional fields. All fields available within an event's context SHALL be defined in a table where each field is described by the following attributes: Key : The name of the field in the context JSON object. Event authors SHOULD name their context fields to be consistent with other existing events when referring to the same context field. Optionality : A string value of either Required , Optional or Conditional FHIR operation to generate context : A FHIR read or search string illustrating the intended content of the event. Description : A functional description of the context value. If this value can change according to the FHIR version in use, the description SHOULD describe the value for each supported FHIR version. Session Discovery A session is an abstract concept representing a shared workspace, such as user's login session over multiple applications or a shared view of one application distributed to multiple users. FHIRcast requires a session to have a unique, unguessable, and opaque identifier. This identifier is exchanged as the value of the hub.topic parameter. Before establishing a subscription, an app must not only know the hub.topic , but also the hub.url which contains the base URL of the Hub. Systems SHOULD use SMART on FHIR to authorize, authenticate, and exchange initial shared context. If using SMART, following a SMART on FHIR EHR launch or SMART on FHIR standalone launch , the app SHALL request and, if authorized, SHALL be granted one or more FHIRcast OAuth 2.0 scopes. Accompanying this scope grant, the authorization server SHALL supply the hub.url and hub.topic SMART launch parameters alongside the access token and other parameters appropriate to establish initial shared context. Per SMART, when the openid scope is granted, the authorization server additionally sends the current user's identity in an id_token . Although FHIRcast works best with the SMART on FHIR launch and authorization process, implementation-specific launch, authentication, and authorization protocols may be possible. If not using SMART on FHIR, the mechanism enabling the app to discover the hub.url and hub.topic is not defined in FHIRcast. See other launch scenarios for guidance. FHIRcast Authorization SMART scopes FHIRcast defines OAuth 2.0 access scopes that correspond directly to FHIRcast events . Our scopes associate read or write permissions to an event. Apps that need to receive workflow related events SHOULD ask for read scopes. Apps that request context changes SHOULD ask for write scopes. Hubs may decide what specific interactions and operations will be enabled by these scopes. Expressed in Extended Backus-Naur Form (EBNF) notation, the FHIRcast syntax for OAuth 2.0 access scopes is: scope ::= ( 'fhircast' ) '/' ( FHIRcast-event | '*' ) '.' ( 'read' | 'write' | '*' ) For example, a requested scope of fhircast/patient-open.read would authorize the subscribing application to receive a notification when the patient in context changed. Similarly, a scope of fhircast/patient-open.write authorizes the subscribed app to request a context change . SMART Launch Example An example of the launch parameters presented to the app during a SMART on FHIR launch is presented below. { access_token : i8hweunweunweofiwweoijewiwe , token_type : bearer , patient : 123 , expires_in : 3600, encounter : 456 , imagingstudy : 789 , hub.url : https://hub.example.com , hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , } Note that the SMART launch parameters include the Hub's base URL and the session identifier in the hub.url and hub.topic fields. Subscribing and Unsubscribing Subscribing and unsubscribing is how applications establish their connection and determine which events they will be notified of. Hubs SHALL support WebSockets and MAY support webhooks. If the Hub does not support webhooks then they should deny any subscription requests with webhook as the channel type. Subscribing consists of two exchanges: Subscriber requests a subscription at the hub.url URL. The hub confirms that the subscription was requested by the subscriber. This exchange can be implemented in two ways depending on the channel type: For webhook subscriptions, the Hub confirms the subscription was actually requested by the subscriber by contacting the hub.callback URL. For websocket subscriptions, the Hub returns a wss URL and subscriber establishes WebSocket connection. Unsubscribing works in the same way, using the same message format. The hub.mode parameter is set to a value of unsubscribe , instead of subscribe . The Hub SHALL NOT validate unsubscribe requests with the subscriber. Subscription Request To create a subscription, the subscribing app SHALL perform an HTTP POST to the Hub's base URL (as specified in hub.url ) with the parameters in the table below. This request SHALL have a Content-Type header of application/x-www-form-urlencoded and SHALL use the following parameters in its body, formatted accordingly: Field Optionality Channel Type Description hub.channel.type Required All string The subscriber SHALL specify a channel type of websocket or webhook . Subscription requests without this field SHOULD be rejected by the Hub. hub.mode Required All string The literal string subscribe or unsubscribe , depending on the goal of the request. hub.topic Required All string The identifier of the session that the subscriber wishes to subscribe to or unsubscribe from. MAY be a Universally Unique Identifier ( UUID ). hub.events Conditional All string Required for subscribe requests, SHALL NOT be present for unsubscribe requests. Comma-separated list of event types from the Event Catalog for which the Subscriber wants to subscribe. Partial unsubscribe requests are not supported and SHALL result in a full unsubscribe. hub.lease_seconds Optional All number Number of seconds for which the subscriber would like to have the subscription active, given as a positive decimal integer. Hubs MAY choose to respect this value or not, depending on their own policies, and MAY set a default value if the subscriber omits the parameter. If using OAuth 2.0, the Hub SHALL limit the subscription lease seconds to be less than or equal to the access token's expiration. hub.callback Required webhook string The Subscriber's callback URL where notifications should be delivered. The callback URL SHOULD be an unguessable URL that is unique per subscription. hub.secret Optional webhook string A subscriber-provided cryptographically random unique secret string that SHALL be used to compute an HMAC digest delivered in each notification. This parameter SHALL be less than 200 bytes in length. hub.channel.endpoint Conditional websocket string Required when hub.channel.type = websocket for re-subscribes and unsubscribes. The WSS URL identifying an existing WebSocket subscription. If OAuth 2.0 authentication is used, this POST request SHALL contain the Bearer access token in the HTTP Authorization header. Hubs SHALL allow subscribers to re-request subscriptions that are already activated. Each subsequent and verified request to a Hub to subscribe or unsubscribe SHALL override the previous subscription state for a specific hub.topic , hub.callback / hub.channel.endpoint url combination. For example, a subscriber MAY modify its subscription by sending a subscription request ( hub.mode=subscribe ) with a different hub.events value with the same topic and callback/endpoint url, in which case the Hub SHALL replace the subscription\u2019s previous hub.events with the newly provided list of events. For webhook subscriptions, the callback URL MAY contain arbitrary query string parameters (e.g., ?foo=bar red=fish ). Hubs SHALL preserve the query string during subscription verification by appending new, Hub-defined, parameters to the end of the list using the (ampersand) character to join. When sending event notifications, the Hub SHALL make a POST request to the callback URL including any query string parameters in the URL portion of the request, not as POST body parameters. The client that creates the subscription MAY NOT be the same system as the server hosting the callback URL or connecting to the WSS URL (e.g., a federated authorization model could exist between these two systems). However, in FHIRcast, the Hub assumes that the same authorization and access rights apply to both the subscribing client and the system receiving notifications. Subscription Response Upon receiving subscription or unsubscription requests, the Hub SHALL respond to a subscription request with an HTTP 202 \"Accepted\" response. This indicates that the request was received and will now be verified by the Hub. When using WebSockets, the HTTP body of the response SHALL consist of a JSON object containing an element name of hub.channel.endpoint and a value of the WSS URL. The WebSocket WSS URL SHALL be cryptographically random, unique, and unguessable. If using webhooks, the Hub SHOULD perform verification of intent as soon as possible. If a Hub refuses the request or finds any errors in the subscription request, an appropriate HTTP error response code (4xx or 5xx) SHALL be returned. In the event of an error, the Hub SHOULD return a description of the error in the response body as plain text, to be used by the client developer to understand the error. This is not meant to be shown to the end user. Hubs MAY decide to reject some subscription requests based on their own policies. webhook vs websocket A Hub SHALL support WebSockets and MAY support webhooks subscriptions. A subscriber specifies the preferred hub.channel.type of either webhook or websocket during creation of its subscription. Websockets are particularly useful if a subscriber is unable to host an accessible callback URL. Implementer feedback is solicited around the optionality and possible deprecation of webhooks. webhook Subscription Request Example In this example, the app asks to be notified of the patient-open and patient-close events. POST https://hub.example.com Host: hub.example.com Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/x-www-form-urlencoded hub.channel.type=webhook hub.callback=https%3A%2F%2Fapp.example.com%2Fsession%2Fcallback%2Fv7tfwuk17a hub.mode=subscribe hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065 hub.secret=shhh-this-is-a-secret hub.events=patient-open,patient-close webhook Subscription Response Example HTTP/1.1 202 Accepted websocket Initial Subscription Request Example In this example, the app creates an initial subscription and asks to be notified of the patient-open and patient-close events. POST https://hub.example.com Host: hub.example.com Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/x-www-form-urlencoded hub.channel.type=websocket hub.mode=subscribe hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065 hub.events=patient-open,patient-close websocket Subscription Response Example HTTP/1.1 202 Accepted { hub.channel.endpoint : wss://hub.example.com/ee30d3b9-1558-464f-a299-cbad6f8135de } Subscription Denial If (and when) a subscription is denied, the Hub SHALL inform the subscriber. This can occur when a subscription is requested for a variety of reasons, or it can occur after a subscription had already been accepted because the Hub no longer supports that subscription (e.g. it has expired). The communication mechanism for a subscription denial varies per hub.channel.type , but the information communicated from the Hub to the subscriber does not. Field Optionality Type Description hub.mode Required string The literal string denied . hub.topic Required string The topic given in the corresponding subscription request. MAY be a UUID. hub.events Required string A comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request, which are being denied. hub.reason Optional string The Hub may include a reason. A subscription MAY be denied by the Hub at any point (even if it was previously accepted). The Subscriber SHOULD then consider that the subscription is not possible anymore. The below webhook flow diagram and WebSocket flow diagram and examples illustrate the subscription denial sequence and message details. webhook Subscription Denial To deny a webhook subscription, the Hub sends an HTTP GET request to the subscriber's callback URL as given in the subscription request. This request appends the fields as query string arguments. The subscriber SHALL respond with an HTTP success (2xx) code. webhook Subscription Denial Sequence webhook Subscription Denial Example GET https://app.example.com/session/callback/v7tfwuk17a?hub.mode=denied hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065hub.events=patient-open,patient-close hub.reason=session+unexpectedly+stopped HTTP 1.1 Host: subscriber websocket Subscription Denial To deny a websocket subscription, the Hub sends a JSON object to the subscriber through the established WebSocket connection. websocket Subscription Denial Sequence websocket Subscription Denial Example { hub.mode : denied , hub.topic : fba7b1e2-53e9-40aa-883a-2af57ab4e2c , hub.events : patient-open,patient-close , hub.reason : session unexpectedly stopped } Subscription Confirmation If a subscribe or unsubscribe request is not denied, the Hub SHALL confirm the subscription. The subscription confirmation step informs the subscriber of the details of Hub's recently created subscription. For webhook subscriptions, the confirmation also verifies the intent of the subscriber and ensures that the subscriber actually controls the callback URL. webhook Intent Verification Request In order to prevent an attacker from creating unwanted subscriptions on behalf of a subscriber, a Hub must ensure that a webhook subscriber did indeed send the subscription request. The Hub SHALL verify a subscription request by sending an HTTPS GET request to the subscriber's callback URL as given in the subscription request. This request SHALL have the following query string arguments appended. Field Optionality Type Description hub.mode Required string The literal string subscribe or unsubscribe , which matches the original request to the Hub from the subscriber. hub.topic Required string The session topic given in the corresponding subscription request. MAY be a UUID. hub.events Required string A comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request. hub.challenge Required string A Hub-generated, random string that SHALL be echoed by the subscriber to verify the subscription. hub.lease_seconds Required number The Hub-determined number of seconds that the subscription will stay active before expiring, measured from the time the verification request was made from the Hub to the subscriber. If provided to the client, the Hub SHALL unsubscribe the client once lease_seconds has expired, close the websocket connection if used, and MAY send a subscription denial. If the subscriber wishes to continue the subscription it MAY resubscribe. webhook Intent Verification Request Example GET https://app.example.com/session/callback/v7tfwuk17a?hub.mode=subscribe hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065 hub.events=patient-open,patient-close hub.challenge=meu3we944ix80ox hub.lease_seconds=7200 HTTP 1.1 Host: subscriber webhook Intent Verification Response If the hub.topic of the Intent Verification Request corresponds to a pending subscribe or unsubscribe request that the subscriber wishes to carry out it SHALL respond with an HTTP success (2xx) code, a header of Content-Type: text/html , and a response body equal to the hub.challenge parameter. If the subscriber does not agree with the action, the subscriber SHALL respond with a 404 \"Not Found\" response. The Hub SHALL consider other server response codes (3xx, 4xx, 5xx) to mean that the verification request has failed. If the subscriber returns an HTTP success (2xx) but the content body does not match the hub.challenge parameter, the Hub SHALL consider verification to have failed. The below flow diagram and example illustrate the successful subscription sequence and message details. webhook Successful Subscription Sequence webhook Intent Verification Response Example HTTP/1.1 200 OK Content-Type: text/html meu3we944ix80ox NOTE The spec uses GET vs POST to differentiate between the confirmation/denial of the subscription request and delivering the content. While this is not considered \"best practice\" from a web architecture perspective, it does make implementation of the callback URL simpler. Since the POST body of the content distribution request may be any arbitrary content type and only includes the actual content of the document, using the GET vs POST distinction to switch between handling these two modes makes implementations simpler. websocket Subscription Confirmation To confirm a subscription request, upon the subscriber establishing a WebSocket connection to the hub.channel.endpoint WSS URL, the Hub SHALL send a confirmation. This confirmation includes the following elements: Field Optionality Type Description hub.mode Required string The literal string subscribe . hub.topic Required string The session topic given in the corresponding subscription request. hub.events Required string A comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request. hub.lease_seconds Required number The Hub-determined number of seconds that the subscription will stay active before expiring, measured from the time the verification request was made from the Hub to the subscriber. If provided to the client, the Hub SHALL unsubscribe the client once lease_seconds has expired, close the websocket connection if used, and MAY send a subscription denial. If the subscriber wishes to continue the subscription it MAY resubscribe. websocket Subscription Confirmation Example { hub.mode : subscribe , hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.events : patient-open,patient-close , hub.lease_seconds : 7200 } websocket Successful Subscription Sequence Unsubscribe Once a subscribing app no longer wants to receive event notifications, it SHALL unsubscribe from the session. An unsubscribe cannot alter an existing subscription, only cancel it. Note that the unsubscribe request is performed over HTTP(s), even for subscriptions using WebSockets. websocket unsubscribes will destroy the websocket which cannot be reused. A subsequent subscription SHALL be done over a newly created and communicated WebSocket endpoint. Field Optionality Channel Type Description hub.channel.type Required All string The subscriber SHALL specify a channel type of websocket or webhook . Subscription requests without this field SHOULD be rejected by the Hub. hub.mode Required All string The literal string unsubscribe . hub.topic Required All string The identifier of the session that the subscriber wishes to subscribe to or unsubscribe from. MAY be a UUID. hub.lease_seconds Optional All number This parameter MAY be present for unsubscribe requests and MUST be ignored by the hub in that case. hub.callback Required webhook string The Subscriber's callback URL. hub.secret Optional webhook string A subscriber-provided cryptographically random unique secret string that SHALL be used to compute an HMAC digest delivered in each notification. This parameter SHALL be less than 200 bytes in length. hub.channel.endpoint Conditional websocket string Required for websocket re-subscribes and unsubscribes. The WSS URL identifying an existing WebSocket subscription. webhook Unsubscribe Request Example POST https://hub.example.com Host: hub Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/x-www-form-urlencoded hub.channel.type=webhook hub.callback=https%3A%2F%2Fapp.example.com%2Fsession%2Fcallback%2Fv7tfwuk17a hub.mode=unsubscribe hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065 hub.secret=shhh-this-is-a-secret hub.challenge=meu3we944ix80ox websocket Unsubscribe Request Example POST https://hub.example.com Host: hub Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/x-www-form-urlencoded hub.channel.type=websocket hub.channel.endpoint=wss%3A%2F%2Fhub.example.com%2Fee30d3b9-1558-464f-a299-cbad6f8135de%0A hub.mode=unsubscribe hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065 webhook and websocket Unsubscription Sequence Event Notification The Hub SHALL notify subscribed apps of workflow-related events to which the app is subscribed. The notification is a JSON object communicated over the webhook or websocket channel. Event Notification Request The HTTP request notification interaction to the subscriber SHALL include a description of the subscribed event that just occurred, an ISO 8601-2 formatted timestamp in UTC and an event identifier that is universally unique for the Hub. The timestamp SHOULD be used by subscribers to establish message affinity (message ordering) through the use of a message queue. The event identifier MAY be used to differentiate retried messages from user actions. Event Notification Request Details The notification's hub.event and context fields inform the subscriber of the current state of the user's session. The hub.event is a user workflow event, from the Event Catalog (or an organization-specific event in reverse-domain name notation). The context is an array of named FHIR resources (similar to CDS Hooks's context field) that describe the current content of the user's session. Each event in the Event Catalog defines what context is included in the notification. The context contains zero, one, or more FHIR resources. Hubs SHOULD use the FHIR _elements parameter to limit the size of the data being passed while also including additional, local identifiers that are likely already in use in production implementations. Subscribers SHALL accept a full FHIR resource or the _elements -limited resource as defined in the Event Catalog. Field Optionality Type Description timestamp Required string ISO 8601-2 timestamp in UTC describing the time at which the event occurred. id Required string Event identifier used to recognize retried notifications. This id SHALL be unique for the Hub, for example a UUID. event Required object A JSON object describing the event. See below. Field Optionality Type Description hub.topic Required string The session topic given in the subscription request. MAY be a UUID. hub.event Required string The event that triggered this notification, taken from the list of events from the subscription request. context Required array An array of named FHIR objects corresponding to the user's context after the given event has occurred. Common FHIR resources are: Patient, Encounter, and ImagingStudy. The Hub SHALL only return FHIR resources that the subscriber is authorized to receive with the existing OAuth 2.0 access_token's granted fhircast/ scopes. Extensions The specification is not prescriptive about support for extensions. However, to support extensions, the specification reserves the name extension and will never define an element with that name, allowing implementations to use it to provide custom behavior and information. The value of an extension element MUST be a pre-coordinated JSON object. For example, an extension on a notification could look like this: { context : [{ key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 } }, { key : extension , data : { user-timezone : +1:00 } } ] } webhook Event Notification Request Details For webhook subscriptions, the Hub SHALL generate an HMAC signature of the payload (using the hub.secret from the subscription request) and include that signature in the request headers of the notification. The X-Hub-Signature header's value SHALL be in the form method=signature where method is one of the recognized algorithm names and signature is the hexadecimal representation of the signature. The signature SHALL be computed using the HMAC algorithm ( RFC6151 ) with the request body as the data and the hub.secret as the key. POST https://app.example.com/session/callback/v7tfwuk17a HTTP/1.1 Host: subscriber X-Hub-Signature: sha256=dce85dc8dfde2426079063ad413268ac72dcf845f9f923193285e693be6ff3ae json object Event Notification Request Example For both webhook and websocket subscriptions, the event notification content is the same. { timestamp : 2018-01-08T01:37:05.14 , id : q9v3jubddqt63n1 , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : patient-open , context : [ { key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 , identifier : [ { type : { coding : [ { system : http://terminology.hl7.org/CodeSystem/v2-0203 , value : MR , display : Medication Record Number } text : MRN ] } } ] } } ] } } Event Notification Response The subscriber SHALL respond to the event notification with an appropriate HTTP status code. In the case of a successful notification, the subscriber SHALL respond with an HTTP 200 (OK) or 202 (Accepted) response code to indicate a success; otherwise, the subscriber SHALL respond with an HTTP error status code. The Hub MAY use these statuses to track synchronization state. In the case of a successful notification, if the subscriber is able to implement the context change, an HTTP 200 (OK) is the appropriate code; if the subscriber has successfully received the event notification, but has not yet taken action: an HTTP 202 (Accepted). webhook Event Notification Response Example For webhook subscriptions, the HTTP status code is communicated in the HTTP response, as expected. HTTP/1.1 200 OK websocket Event Notification Response Example For websocket subscriptions, the id of the event notification and the HTTP status code is communicated from the client to Hub through the existing WebSocket channel, wrapped in a JSON object. Since the WebSocket channel does not have a synchronous request/response, this id is necessary for the Hub to correlate the response to the correct notification. Field Optionality Type Description id Required string Event identifier from the event notification to which this response corresponds. status Required numeric HTTP status code Numeric HTTP response code to indicate success or failure of the event notification within the subscribing app. Any 2xx code indicates success, any other code indicates failure. { id : q9v3jubddqt63n1 , status : 200 } webhook and websocket Event Notification Sequence Event Notification Errors All standard events are defined outside of the base FHIRcast specification in the Event Catalog with the single exception of the infrastructural syncerror event. If the subscriber cannot follow the context of the event, for instance due to an error or a deliberate choice to not follow a context, the subscriber SHOULD communicate the error to the Hub in one of two ways. Responding to the event notification with an HTTP error status code as described in Event Notification Response . Responding to the event notification with an HTTP 202 (Accepted) as described above, then, once experiencing the error, send a syncerror event to the Hub. If the Hub receives an error notification from a subscriber, it SHOULD generate a syncerror event to the other subscribers of that topic. syncerror events are like other events in that they need to be subscribed to in order for an app to receive the notifications and they have the same structure as other events, the context being a single FHIR OperationOutcome resource. Event Notification Error Request Request Context Change Parameters Field Optionality Type Description timestamp Required string ISO 8601-2 timestamp in UTC describing the time at which the syncerror event occurred. id Required string Event identifier, which MAY be used to recognize retried notifications. This id SHALL be unique and could be a UUID. event Required object A JSON object describing the event. See below . Event Notification Error Event Object Parameters Field Optionality Type Description hub.topic Required string The session topic given in the subscription request. hub.event Required string Shall be the string syncerror . context Required array An array containing a single FHIR OperationOutcome. The OperationOutcome SHALL use a code of processing . The OperationOutcome's details SHALL contain the id of the event that this error is related to as a code with the system value of https://fhircast.hl7.org/events/syncerror/eventid and the name of the relevant event with a system value of https://fhircast.hl7.org/events/syncerror/eventname . Other coding values can be included with different system values so as to include extra information about the syncerror . The OperationOutcome's diagnostics element should contain additional information to aid subsequent investigation or presentation to the end-user. Event Notification Error Example POST https://hub.example.com/7jaa86kgdudewiaq0wtu HTTP/1.1 Host: hub Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/json { timestamp : 2018-01-08T01:37:05.14 , id : q9v3jubddqt63n1 , event : { hub.topic : 7544fe65-ea26-44b5-835d-14287e46390b , hub.event : syncerror , context : [ { key : operationoutcome , resource : { resourceType : OperationOutcome , issue : [ { severity : warning , code : processing , diagnostics : AppId3456 failed to follow context , details : { coding : [ { system : https://fhircast.hl7.org/events/syncerror/eventid , code : fdb2f928-5546-4f52-87a0-0648e9ded065 }, { system : https://fhircast.hl7.org/events/syncerror/eventname , code : patient-open } ] } } ] } } ] } } webhook and websocket Event Notification Error Sequence Request Context Change Similar to the Hub's notifications to the subscriber, the subscriber MAY request context changes with an HTTP POST to the hub.url . The Hub SHALL either accept this context change by responding with any successful HTTP status or reject it by responding with any 4xx or 5xx HTTP status. Similar to event notifications, described above, the Hub MAY also respond with a 202 (Accepted) status, process the request, and then later respond with a syncerror event in order to reject the request. In this case the syncerror would only be sent to the requestor. The subscriber SHALL be capable of gracefully handling a rejected context request. Once a requested context change is accepted, the Hub SHALL broadcast the context notification to all subscribers, including the original requestor. The requestor can use the broadcasted notification as confirmation of their request. The Hub reusing the request's id is further confirmation that the event is a result of their request. Request Context Change Request Request Context Change Parameters Field Optionality Type Description timestamp Required string ISO 8601-2 timestamp in UTC describing the time at which the event occurred. id Required string Event identifier, which MAY be used to recognize retried notifications. This id SHALL be uniquely generated by the subscriber and could be a UUID. Following an accepted context change request, the Hub MAY re-use this value in the broadcasted event notifications. event Required object A JSON object describing the event. See below . Request Context Change Event Object Parameters Field Optionality Type Description hub.topic Required string The session topic given in the subscription request. hub.event Required string The event that triggered this request for the subscriber, taken from the list of events from the subscription request. context Required array An array of named FHIR objects corresponding to the user's context after the given event has occurred. Common FHIR resources are: Patient, Encounter, ImagingStudy and List. POST https://hub.example.com/7jaa86kgdudewiaq0wtu HTTP/1.1 Host: hub Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/json { timestamp : 2018-01-08T01:40:05.14 , id : wYXStHqxFQyHFELh , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : close-patient-chart , context : [ { key : patient , resource : { resourceType : Patient , id : 798E4MyMcpCWHab9 , identifier : [ { type : { coding : [ { system : http://terminology.hl7.org/CodeSystem/v2-0203 , value : MR , display : Medication Record Number } text : MRN ] } } ] } } ] } } Conformance The FHIRcast specification can be described as a set of capabilities and any specific FHIRcast Hub may implement a subset of these capabilities. A FHIRcast Hub declares support for FHIRcast and specific capabilities by exposing an extension on its FHIR server's CapabilityStatement as described below. Declaring support for FHIRcast To support various architectures, including multiple decentralized FHIRcast hubs, the Hub exposes a .well-known endpoint containing additional information about the capabilities of that hub. A Hub's supported events, version and other capabilities can be exposed as a Well-Known Uniform Resource Identifiers (URIs) ( RFC5785 ) JSON document. Hubs SHOULD serve a JSON document at the location formed by appending /.well-known/fhircast-configuration to their hub.url . Contrary to RFC5785 Appendix B.4, the .well-known path component may be appended even if the hub.url endpoint already contains a path component. A simple JSON document is returned using the application/json mime type, with the following key/value pairs -- Field Optionality Type Description eventsSupported Required array Array of FHIRcast events supported by the Hub. websocketSupport Required boolean The static value: true , indicating support for websockets. webhookSupport Optional boolean true or false indicating support for webhooks. Hubs SHOULD indicate their support for web hooks. fhircastVersion Optional string STU1 or STU2 indicating support for a specific version of FHIRcast. Hubs SHOULD indicate the version of FHIRcast supported. Discovery Request Example Base URL \"www.hub.example.com/\" GET /.well-known/fhircast-configuration HTTP/1.1 Host: www.hub.example.com Discovery Response Example HTTP/1.1 200 OK Content-Type: application/json { eventsSupported : [ patient-open , patient-close , syncerror , com.example.researchstudy-transmogrify ], websocketSupport : true, webhookSupport : false, fhircastVersion : STU2 } FHIR Capability Statement To supplement or optionally identify the location of a FHIRcast hub, a FHIR server MAY declare support for FHIRcast using the FHIRcast extension on its FHIR CapabilityStatement's rest element. The FHIRcast extension has the following internal components: Component Cardinality Type Description hub.url 0..1 url The url at which an app subscribes. May not be supported by client-side Hubs. CapabilityStatement Extension Example { resourceType : CapabilityStatement , ... rest : [{ ... extension : [ { url : http://fhircast.hl7.org/StructureDefinition/fhircast-configuration , extension : [ { url : hub.url , valueUri : https://hub.example.com/fhircast/hub.v2 } ] ] ... Change Management and Versioning Event Maturity Model The intent of the FHIRcast Event Maturity Model is to attain broad community engagement and consensus before an event is labeled as mature, and to ensure that the event is necessary, implementable, and worthwhile to the systems that would reasonably be expected to use it. Implementer feedback should drive the maturity of new events. Diverse participation in open developer forums and events, such as HL7 FHIR Connectathons, is necessary to achieve significant implementer feedback. The below criteria will be evaluated with these goals in mind. Maturity Level Maturity title Requirements 0 Draft Event is correctly named and defined per the FHIRcast event template . 1 Submitted The above, and \u2026 Event definition is written up as a pull request using the Event template and community feedback is solicited from the community (e.g. the zulip FHIRcast stream](https://chat.fhir.org/#narrow/stream/179271-FHIRcast)). 2 Tested The above, and \u2026 The event has been tested and successfully supports interoperability among at least one Hub and two independent subscribing apps using semi-realistic data and scenarios (e.g. at a FHIR Connectathon). The github pull request defining the event is approved and published. 3 Considered The above, and \u2026 At least 3 distinct organizations recorded ten distinct implementer comments (including a github or jira issue, tracker item, or comment on the event definition page), including at least two Hubs and three subscribing apps. The event has been tested at two connectathons. 4 Documented The above, and \u2026 The author agrees that the artifact is sufficiently stable to require implementer consultation for subsequent non-backward compatible changes. The event is implemented in the standard FHIRcast reference implementation and multiple prototype projects. The Event specification SHALL: Identify a broad set of example contexts in which the event may be used with a minimum of three, but as many as 10. Clearly differentiate the event from similar events or other standards to help an implementer determine if the event is correct for their scenario. Explicitly document example scenarios when the event should not be used. 5 Mature The above, and ... The event has been implemented in production in at least two Hubs and three independent subscribing apps. An HL7 working group ballots the event and the event has passed HL7 STU ballot. 6 Normative The above, and ... the responsible HL7 working group and the sponsoring working group agree the material is ready to lock down and the event has passed HL7 normative ballot Event Maturity As each event progresses through a process of being defined, tested, implemented, used in production environments, and balloted, the event's formal maturity level increases. Each event has its own maturity level, which SHALL be defined in the event's definition and correspond to the Event Maturity Model . Change Log Changes made to an event's definition SHALL be documented in a change log to ensure event consumers can track what has been changed over the life of an event. The change log SHALL contain the following elements: Version: The version of the change Description: A description of the change and its impact For example: Version Description 1.1 Added new context FHIR object 1.0.1 Clarified workflow description 1.0 Initial Release --- Glossary session: an abstract concept representing a shared workspace, such as a user's login session across multiple applications or a shared view of one application distributed to multiple users. A session results from a user logging into an application and can encompass one or more workflows. topic: an identifier of a session client: subscribes to and requests or receives session events current context: data associated with a session at a given time and communicated between clients that share a session session event: a user initiated workflow event, communicated to clients, containing the current context Revision History All changes to the FHIRcast specification are tracked in the specification's HL7 github repository . Further, issues may be submitted and are tracked in jira or (historically as) github issues . For the reader's convenience, the below table additionally lists significant changes to the specification. 20200715 Significant changes as part of the STU2 publication included: Introduction of WebSockets as the preferred communication mechanism over webhooks. Creation of a FHIR CapabilityStatement extension to support Hub capability discovery. Additional, required information on syncerror OperationOutcome (namely communication of the error'd event's id and event name). Websocket WSS URL communicated in HTTP body, instead of Content-Location HTTP header. Subscribers should differentiate between immediately applied context changes and mere successfully received notifications with HTTP code responses of 200 and 202, respectively.","title":"Current - STU2"},{"location":"specification/STU2/#fhircast","text":"","title":"FHIRcast"},{"location":"specification/STU2/#overview","text":"The FHIRcast specification describes the APIs used to synchronize disparate healthcare applications' user interfaces in real time, allowing them to show the same clinical content to a user (or group of users). Once the subscribing app knows about the session , the app subscribes to specific workflow-related events for the given session. The app is then notified when those workflow-related events occur; for example, when the clinician opens a patient's chart. The subscribing app can also initiate context changes by accessing APIs defined in this specification; for example, closing the patient's chart. The app deletes its subscription to no longer receive notifications. The notification messages describing the workflow event are defined as a simple JSON wrapper around one or more FHIR resources. FHIRcast recommends the HL7 SMART on FHIR launch protocol for both session discovery and API authentication. FHIRcast enables a subscriber to receive notifications either through a webhook or over a WebSocket connection. This protocol is modeled on the W3C WebSub RFC , such as its use of GET vs POST interactions and a Hub for managing subscriptions. The Hub exposes APIs for subscribing and unsubscribing, requesting context changes, and distributing event notifications. The flow diagram presented below illustrates the series of interactions specified by FHIRcast, their origination and their outcome. All data exchanged through the HTTP APIs SHALL be formatted, sent and received as JSON structures, and SHALL be transmitted over channels secured using the Hypertext Transfer Protocol (HTTP) over Transport Layer Security (TLS), also known as HTTPS which is defined in RFC2818 . All data exchanged through WebSockets SHALL be formatted, sent and received as JSON structures, and SHALL be transmitted over Secure Web Sockets (WSS) as defined in RFC6455 .","title":"Overview"},{"location":"specification/STU2/#events","text":"FHIRcast describes a workflow event subscription and notification scheme with the goal of improving a clinician's workflow across multiple disparate applications. The set of events defined in this specification is not a closed set; anyone is able to define new events to fit specific use cases and are encouraged to propose those events to the community for standardization. New events are proposed in a prescribed format using the documentation template by submitting a pull request . FHIRcast events are versioned, and mature according to the Event Maturity Model . FHIRcast events do not communicate previous state. For a given event, opens and closes are complete replacements of previous communicated events, not \"deltas\". Understanding an event SHALL not require receiving a previous or future event.","title":"Events"},{"location":"specification/STU2/#event-definition-format","text":"Each event definition: specifies a single event name, a description of the workflow in which the event occurs, and contextual information associated with the event. FHIR is the interoperable data model used by FHIRcast. The context information associated with an event is communicated as subsets of FHIR resources. Event notifications SHALL include the elements of the FHIR resources defined in the context from the event definition. Event notifications MAY include other elements of these resources. For example, when the ImagingStudy-open event occurs, the notification sent to a subscriber SHALL include an ImagingStudy FHIR resource, which includes at least the elements defined in the _elements query parameter, as indicated in the event's definition. For ImagingStudy, this is defined as: ImagingStudy/{id}?_elements=identifier,accession . (The _elements query parameter is defined in the FHIR specification ). A Hub SHALL at least send the required elements; a subscriber SHALL gracefully handle receiving a full FHIR resource in the context of a notification. Each defined event in the standard event catalog SHALL be defined in the following format.","title":"Event Definition Format"},{"location":"specification/STU2/#event-definition-format-hook-name","text":"Most FHIRcast events conform to an extensible syntax based upon FHIR resources. In the rare case where the FHIR data model doesn't describe content in the session, FHIRcast events MAY be named differently. For example, FHIR doesn't cleanly contain the concept of a user or user's session. Patterned after the SMART on FHIR scope syntax and expressed in EBNF notation, the FHIRcast syntax for workflow related events is: hub.events ::= ( fhir-resource | '*' ) '-' ( 'open' | 'close' | '*' ) FHIRcast events SHOULD conform to this extensible syntax. Event names are unique and case-insensitive. Implementers may define their own events. Such proprietary events SHALL be named with reverse domain notation (e.g. org.example.patient_transmogrify ). Reverse domain notation SHALL NOT be used by a standard event catalog. Proprietary events SHALL NOT contain a dash (\"-\").","title":"Event Definition Format: hook-name"},{"location":"specification/STU2/#event-definition-format-workflow","text":"Describe the workflow in which the event occurs. Event creators SHOULD include as much detail and clarity as possible to minimize any ambiguity or confusion amongst implementers.","title":"Event Definition Format: Workflow"},{"location":"specification/STU2/#event-definition-format-context","text":"Describe the set of contextual data associated with this event. Only data logically and necessarily associated with the purpose of this workflow related event should be represented in context. An event SHALL contain all required data fields, MAY contain optional data fields and SHALL NOT contain any additional fields. All fields available within an event's context SHALL be defined in a table where each field is described by the following attributes: Key : The name of the field in the context JSON object. Event authors SHOULD name their context fields to be consistent with other existing events when referring to the same context field. Optionality : A string value of either Required , Optional or Conditional FHIR operation to generate context : A FHIR read or search string illustrating the intended content of the event. Description : A functional description of the context value. If this value can change according to the FHIR version in use, the description SHOULD describe the value for each supported FHIR version.","title":"Event Definition Format: Context"},{"location":"specification/STU2/#session-discovery","text":"A session is an abstract concept representing a shared workspace, such as user's login session over multiple applications or a shared view of one application distributed to multiple users. FHIRcast requires a session to have a unique, unguessable, and opaque identifier. This identifier is exchanged as the value of the hub.topic parameter. Before establishing a subscription, an app must not only know the hub.topic , but also the hub.url which contains the base URL of the Hub. Systems SHOULD use SMART on FHIR to authorize, authenticate, and exchange initial shared context. If using SMART, following a SMART on FHIR EHR launch or SMART on FHIR standalone launch , the app SHALL request and, if authorized, SHALL be granted one or more FHIRcast OAuth 2.0 scopes. Accompanying this scope grant, the authorization server SHALL supply the hub.url and hub.topic SMART launch parameters alongside the access token and other parameters appropriate to establish initial shared context. Per SMART, when the openid scope is granted, the authorization server additionally sends the current user's identity in an id_token . Although FHIRcast works best with the SMART on FHIR launch and authorization process, implementation-specific launch, authentication, and authorization protocols may be possible. If not using SMART on FHIR, the mechanism enabling the app to discover the hub.url and hub.topic is not defined in FHIRcast. See other launch scenarios for guidance.","title":"Session Discovery"},{"location":"specification/STU2/#fhircast-authorization-smart-scopes","text":"FHIRcast defines OAuth 2.0 access scopes that correspond directly to FHIRcast events . Our scopes associate read or write permissions to an event. Apps that need to receive workflow related events SHOULD ask for read scopes. Apps that request context changes SHOULD ask for write scopes. Hubs may decide what specific interactions and operations will be enabled by these scopes. Expressed in Extended Backus-Naur Form (EBNF) notation, the FHIRcast syntax for OAuth 2.0 access scopes is: scope ::= ( 'fhircast' ) '/' ( FHIRcast-event | '*' ) '.' ( 'read' | 'write' | '*' ) For example, a requested scope of fhircast/patient-open.read would authorize the subscribing application to receive a notification when the patient in context changed. Similarly, a scope of fhircast/patient-open.write authorizes the subscribed app to request a context change .","title":"FHIRcast Authorization &amp; SMART scopes"},{"location":"specification/STU2/#smart-launch-example","text":"An example of the launch parameters presented to the app during a SMART on FHIR launch is presented below. { access_token : i8hweunweunweofiwweoijewiwe , token_type : bearer , patient : 123 , expires_in : 3600, encounter : 456 , imagingstudy : 789 , hub.url : https://hub.example.com , hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , } Note that the SMART launch parameters include the Hub's base URL and the session identifier in the hub.url and hub.topic fields.","title":"SMART Launch Example"},{"location":"specification/STU2/#subscribing-and-unsubscribing","text":"Subscribing and unsubscribing is how applications establish their connection and determine which events they will be notified of. Hubs SHALL support WebSockets and MAY support webhooks. If the Hub does not support webhooks then they should deny any subscription requests with webhook as the channel type. Subscribing consists of two exchanges: Subscriber requests a subscription at the hub.url URL. The hub confirms that the subscription was requested by the subscriber. This exchange can be implemented in two ways depending on the channel type: For webhook subscriptions, the Hub confirms the subscription was actually requested by the subscriber by contacting the hub.callback URL. For websocket subscriptions, the Hub returns a wss URL and subscriber establishes WebSocket connection. Unsubscribing works in the same way, using the same message format. The hub.mode parameter is set to a value of unsubscribe , instead of subscribe . The Hub SHALL NOT validate unsubscribe requests with the subscriber.","title":"Subscribing and Unsubscribing"},{"location":"specification/STU2/#subscription-request","text":"To create a subscription, the subscribing app SHALL perform an HTTP POST to the Hub's base URL (as specified in hub.url ) with the parameters in the table below. This request SHALL have a Content-Type header of application/x-www-form-urlencoded and SHALL use the following parameters in its body, formatted accordingly: Field Optionality Channel Type Description hub.channel.type Required All string The subscriber SHALL specify a channel type of websocket or webhook . Subscription requests without this field SHOULD be rejected by the Hub. hub.mode Required All string The literal string subscribe or unsubscribe , depending on the goal of the request. hub.topic Required All string The identifier of the session that the subscriber wishes to subscribe to or unsubscribe from. MAY be a Universally Unique Identifier ( UUID ). hub.events Conditional All string Required for subscribe requests, SHALL NOT be present for unsubscribe requests. Comma-separated list of event types from the Event Catalog for which the Subscriber wants to subscribe. Partial unsubscribe requests are not supported and SHALL result in a full unsubscribe. hub.lease_seconds Optional All number Number of seconds for which the subscriber would like to have the subscription active, given as a positive decimal integer. Hubs MAY choose to respect this value or not, depending on their own policies, and MAY set a default value if the subscriber omits the parameter. If using OAuth 2.0, the Hub SHALL limit the subscription lease seconds to be less than or equal to the access token's expiration. hub.callback Required webhook string The Subscriber's callback URL where notifications should be delivered. The callback URL SHOULD be an unguessable URL that is unique per subscription. hub.secret Optional webhook string A subscriber-provided cryptographically random unique secret string that SHALL be used to compute an HMAC digest delivered in each notification. This parameter SHALL be less than 200 bytes in length. hub.channel.endpoint Conditional websocket string Required when hub.channel.type = websocket for re-subscribes and unsubscribes. The WSS URL identifying an existing WebSocket subscription. If OAuth 2.0 authentication is used, this POST request SHALL contain the Bearer access token in the HTTP Authorization header. Hubs SHALL allow subscribers to re-request subscriptions that are already activated. Each subsequent and verified request to a Hub to subscribe or unsubscribe SHALL override the previous subscription state for a specific hub.topic , hub.callback / hub.channel.endpoint url combination. For example, a subscriber MAY modify its subscription by sending a subscription request ( hub.mode=subscribe ) with a different hub.events value with the same topic and callback/endpoint url, in which case the Hub SHALL replace the subscription\u2019s previous hub.events with the newly provided list of events. For webhook subscriptions, the callback URL MAY contain arbitrary query string parameters (e.g., ?foo=bar red=fish ). Hubs SHALL preserve the query string during subscription verification by appending new, Hub-defined, parameters to the end of the list using the (ampersand) character to join. When sending event notifications, the Hub SHALL make a POST request to the callback URL including any query string parameters in the URL portion of the request, not as POST body parameters. The client that creates the subscription MAY NOT be the same system as the server hosting the callback URL or connecting to the WSS URL (e.g., a federated authorization model could exist between these two systems). However, in FHIRcast, the Hub assumes that the same authorization and access rights apply to both the subscribing client and the system receiving notifications.","title":"Subscription Request"},{"location":"specification/STU2/#subscription-response","text":"Upon receiving subscription or unsubscription requests, the Hub SHALL respond to a subscription request with an HTTP 202 \"Accepted\" response. This indicates that the request was received and will now be verified by the Hub. When using WebSockets, the HTTP body of the response SHALL consist of a JSON object containing an element name of hub.channel.endpoint and a value of the WSS URL. The WebSocket WSS URL SHALL be cryptographically random, unique, and unguessable. If using webhooks, the Hub SHOULD perform verification of intent as soon as possible. If a Hub refuses the request or finds any errors in the subscription request, an appropriate HTTP error response code (4xx or 5xx) SHALL be returned. In the event of an error, the Hub SHOULD return a description of the error in the response body as plain text, to be used by the client developer to understand the error. This is not meant to be shown to the end user. Hubs MAY decide to reject some subscription requests based on their own policies.","title":"Subscription Response"},{"location":"specification/STU2/#webhook-vs-websocket","text":"A Hub SHALL support WebSockets and MAY support webhooks subscriptions. A subscriber specifies the preferred hub.channel.type of either webhook or websocket during creation of its subscription. Websockets are particularly useful if a subscriber is unable to host an accessible callback URL. Implementer feedback is solicited around the optionality and possible deprecation of webhooks.","title":"webhook vs websocket"},{"location":"specification/STU2/#webhook-subscription-request-example","text":"In this example, the app asks to be notified of the patient-open and patient-close events. POST https://hub.example.com Host: hub.example.com Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/x-www-form-urlencoded hub.channel.type=webhook hub.callback=https%3A%2F%2Fapp.example.com%2Fsession%2Fcallback%2Fv7tfwuk17a hub.mode=subscribe hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065 hub.secret=shhh-this-is-a-secret hub.events=patient-open,patient-close","title":"webhook Subscription Request Example"},{"location":"specification/STU2/#webhook-subscription-response-example","text":"HTTP/1.1 202 Accepted","title":"webhook Subscription Response Example"},{"location":"specification/STU2/#websocket-initial-subscription-request-example","text":"In this example, the app creates an initial subscription and asks to be notified of the patient-open and patient-close events. POST https://hub.example.com Host: hub.example.com Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/x-www-form-urlencoded hub.channel.type=websocket hub.mode=subscribe hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065 hub.events=patient-open,patient-close","title":"websocket Initial Subscription Request Example"},{"location":"specification/STU2/#websocket-subscription-response-example","text":"HTTP/1.1 202 Accepted { hub.channel.endpoint : wss://hub.example.com/ee30d3b9-1558-464f-a299-cbad6f8135de }","title":"websocket Subscription Response Example"},{"location":"specification/STU2/#subscription-denial","text":"If (and when) a subscription is denied, the Hub SHALL inform the subscriber. This can occur when a subscription is requested for a variety of reasons, or it can occur after a subscription had already been accepted because the Hub no longer supports that subscription (e.g. it has expired). The communication mechanism for a subscription denial varies per hub.channel.type , but the information communicated from the Hub to the subscriber does not. Field Optionality Type Description hub.mode Required string The literal string denied . hub.topic Required string The topic given in the corresponding subscription request. MAY be a UUID. hub.events Required string A comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request, which are being denied. hub.reason Optional string The Hub may include a reason. A subscription MAY be denied by the Hub at any point (even if it was previously accepted). The Subscriber SHOULD then consider that the subscription is not possible anymore. The below webhook flow diagram and WebSocket flow diagram and examples illustrate the subscription denial sequence and message details.","title":"Subscription Denial"},{"location":"specification/STU2/#webhook-subscription-denial","text":"To deny a webhook subscription, the Hub sends an HTTP GET request to the subscriber's callback URL as given in the subscription request. This request appends the fields as query string arguments. The subscriber SHALL respond with an HTTP success (2xx) code.","title":"webhook Subscription Denial"},{"location":"specification/STU2/#webhook-subscription-denial-sequence","text":"","title":"webhook Subscription Denial Sequence"},{"location":"specification/STU2/#webhook-subscription-denial-example","text":"GET https://app.example.com/session/callback/v7tfwuk17a?hub.mode=denied hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065hub.events=patient-open,patient-close hub.reason=session+unexpectedly+stopped HTTP 1.1 Host: subscriber","title":"webhook Subscription Denial Example"},{"location":"specification/STU2/#websocket-subscription-denial","text":"To deny a websocket subscription, the Hub sends a JSON object to the subscriber through the established WebSocket connection.","title":"websocket Subscription Denial"},{"location":"specification/STU2/#websocketsubscription-denial-sequence","text":"","title":"websocketSubscription Denial Sequence"},{"location":"specification/STU2/#websocket-subscription-denial-example","text":"{ hub.mode : denied , hub.topic : fba7b1e2-53e9-40aa-883a-2af57ab4e2c , hub.events : patient-open,patient-close , hub.reason : session unexpectedly stopped }","title":"websocket Subscription Denial Example"},{"location":"specification/STU2/#subscription-confirmation","text":"If a subscribe or unsubscribe request is not denied, the Hub SHALL confirm the subscription. The subscription confirmation step informs the subscriber of the details of Hub's recently created subscription. For webhook subscriptions, the confirmation also verifies the intent of the subscriber and ensures that the subscriber actually controls the callback URL.","title":"Subscription Confirmation"},{"location":"specification/STU2/#webhook-intent-verification-request","text":"In order to prevent an attacker from creating unwanted subscriptions on behalf of a subscriber, a Hub must ensure that a webhook subscriber did indeed send the subscription request. The Hub SHALL verify a subscription request by sending an HTTPS GET request to the subscriber's callback URL as given in the subscription request. This request SHALL have the following query string arguments appended. Field Optionality Type Description hub.mode Required string The literal string subscribe or unsubscribe , which matches the original request to the Hub from the subscriber. hub.topic Required string The session topic given in the corresponding subscription request. MAY be a UUID. hub.events Required string A comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request. hub.challenge Required string A Hub-generated, random string that SHALL be echoed by the subscriber to verify the subscription. hub.lease_seconds Required number The Hub-determined number of seconds that the subscription will stay active before expiring, measured from the time the verification request was made from the Hub to the subscriber. If provided to the client, the Hub SHALL unsubscribe the client once lease_seconds has expired, close the websocket connection if used, and MAY send a subscription denial. If the subscriber wishes to continue the subscription it MAY resubscribe.","title":"webhook Intent Verification Request"},{"location":"specification/STU2/#webhook-intent-verification-request-example","text":"GET https://app.example.com/session/callback/v7tfwuk17a?hub.mode=subscribe hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065 hub.events=patient-open,patient-close hub.challenge=meu3we944ix80ox hub.lease_seconds=7200 HTTP 1.1 Host: subscriber","title":"webhook Intent Verification Request Example"},{"location":"specification/STU2/#webhook-intent-verification-response","text":"If the hub.topic of the Intent Verification Request corresponds to a pending subscribe or unsubscribe request that the subscriber wishes to carry out it SHALL respond with an HTTP success (2xx) code, a header of Content-Type: text/html , and a response body equal to the hub.challenge parameter. If the subscriber does not agree with the action, the subscriber SHALL respond with a 404 \"Not Found\" response. The Hub SHALL consider other server response codes (3xx, 4xx, 5xx) to mean that the verification request has failed. If the subscriber returns an HTTP success (2xx) but the content body does not match the hub.challenge parameter, the Hub SHALL consider verification to have failed. The below flow diagram and example illustrate the successful subscription sequence and message details.","title":"webhook Intent Verification Response"},{"location":"specification/STU2/#webhook-successful-subscription-sequence","text":"","title":"webhook Successful Subscription Sequence"},{"location":"specification/STU2/#webhook-intent-verification-response-example","text":"HTTP/1.1 200 OK Content-Type: text/html meu3we944ix80ox NOTE The spec uses GET vs POST to differentiate between the confirmation/denial of the subscription request and delivering the content. While this is not considered \"best practice\" from a web architecture perspective, it does make implementation of the callback URL simpler. Since the POST body of the content distribution request may be any arbitrary content type and only includes the actual content of the document, using the GET vs POST distinction to switch between handling these two modes makes implementations simpler.","title":"webhook Intent Verification Response Example"},{"location":"specification/STU2/#websocket-subscription-confirmation","text":"To confirm a subscription request, upon the subscriber establishing a WebSocket connection to the hub.channel.endpoint WSS URL, the Hub SHALL send a confirmation. This confirmation includes the following elements: Field Optionality Type Description hub.mode Required string The literal string subscribe . hub.topic Required string The session topic given in the corresponding subscription request. hub.events Required string A comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request. hub.lease_seconds Required number The Hub-determined number of seconds that the subscription will stay active before expiring, measured from the time the verification request was made from the Hub to the subscriber. If provided to the client, the Hub SHALL unsubscribe the client once lease_seconds has expired, close the websocket connection if used, and MAY send a subscription denial. If the subscriber wishes to continue the subscription it MAY resubscribe.","title":"websocket Subscription Confirmation"},{"location":"specification/STU2/#websocket-subscription-confirmation-example","text":"{ hub.mode : subscribe , hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.events : patient-open,patient-close , hub.lease_seconds : 7200 }","title":"websocket Subscription Confirmation Example"},{"location":"specification/STU2/#websocket-successful-subscription-sequence","text":"","title":"websocket Successful Subscription Sequence"},{"location":"specification/STU2/#unsubscribe","text":"Once a subscribing app no longer wants to receive event notifications, it SHALL unsubscribe from the session. An unsubscribe cannot alter an existing subscription, only cancel it. Note that the unsubscribe request is performed over HTTP(s), even for subscriptions using WebSockets. websocket unsubscribes will destroy the websocket which cannot be reused. A subsequent subscription SHALL be done over a newly created and communicated WebSocket endpoint. Field Optionality Channel Type Description hub.channel.type Required All string The subscriber SHALL specify a channel type of websocket or webhook . Subscription requests without this field SHOULD be rejected by the Hub. hub.mode Required All string The literal string unsubscribe . hub.topic Required All string The identifier of the session that the subscriber wishes to subscribe to or unsubscribe from. MAY be a UUID. hub.lease_seconds Optional All number This parameter MAY be present for unsubscribe requests and MUST be ignored by the hub in that case. hub.callback Required webhook string The Subscriber's callback URL. hub.secret Optional webhook string A subscriber-provided cryptographically random unique secret string that SHALL be used to compute an HMAC digest delivered in each notification. This parameter SHALL be less than 200 bytes in length. hub.channel.endpoint Conditional websocket string Required for websocket re-subscribes and unsubscribes. The WSS URL identifying an existing WebSocket subscription.","title":"Unsubscribe"},{"location":"specification/STU2/#webhook-unsubscribe-request-example","text":"POST https://hub.example.com Host: hub Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/x-www-form-urlencoded hub.channel.type=webhook hub.callback=https%3A%2F%2Fapp.example.com%2Fsession%2Fcallback%2Fv7tfwuk17a hub.mode=unsubscribe hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065 hub.secret=shhh-this-is-a-secret hub.challenge=meu3we944ix80ox","title":"webhook Unsubscribe Request Example"},{"location":"specification/STU2/#websocket-unsubscribe-request-example","text":"POST https://hub.example.com Host: hub Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/x-www-form-urlencoded hub.channel.type=websocket hub.channel.endpoint=wss%3A%2F%2Fhub.example.com%2Fee30d3b9-1558-464f-a299-cbad6f8135de%0A hub.mode=unsubscribe hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065","title":"websocket Unsubscribe Request Example"},{"location":"specification/STU2/#webhook-and-websocket-unsubscription-sequence","text":"","title":"webhook and websocket Unsubscription Sequence"},{"location":"specification/STU2/#event-notification","text":"The Hub SHALL notify subscribed apps of workflow-related events to which the app is subscribed. The notification is a JSON object communicated over the webhook or websocket channel.","title":"Event Notification"},{"location":"specification/STU2/#event-notification-request","text":"The HTTP request notification interaction to the subscriber SHALL include a description of the subscribed event that just occurred, an ISO 8601-2 formatted timestamp in UTC and an event identifier that is universally unique for the Hub. The timestamp SHOULD be used by subscribers to establish message affinity (message ordering) through the use of a message queue. The event identifier MAY be used to differentiate retried messages from user actions.","title":"Event Notification Request"},{"location":"specification/STU2/#event-notification-request-details","text":"The notification's hub.event and context fields inform the subscriber of the current state of the user's session. The hub.event is a user workflow event, from the Event Catalog (or an organization-specific event in reverse-domain name notation). The context is an array of named FHIR resources (similar to CDS Hooks's context field) that describe the current content of the user's session. Each event in the Event Catalog defines what context is included in the notification. The context contains zero, one, or more FHIR resources. Hubs SHOULD use the FHIR _elements parameter to limit the size of the data being passed while also including additional, local identifiers that are likely already in use in production implementations. Subscribers SHALL accept a full FHIR resource or the _elements -limited resource as defined in the Event Catalog. Field Optionality Type Description timestamp Required string ISO 8601-2 timestamp in UTC describing the time at which the event occurred. id Required string Event identifier used to recognize retried notifications. This id SHALL be unique for the Hub, for example a UUID. event Required object A JSON object describing the event. See below. Field Optionality Type Description hub.topic Required string The session topic given in the subscription request. MAY be a UUID. hub.event Required string The event that triggered this notification, taken from the list of events from the subscription request. context Required array An array of named FHIR objects corresponding to the user's context after the given event has occurred. Common FHIR resources are: Patient, Encounter, and ImagingStudy. The Hub SHALL only return FHIR resources that the subscriber is authorized to receive with the existing OAuth 2.0 access_token's granted fhircast/ scopes.","title":"Event Notification Request Details"},{"location":"specification/STU2/#extensions","text":"The specification is not prescriptive about support for extensions. However, to support extensions, the specification reserves the name extension and will never define an element with that name, allowing implementations to use it to provide custom behavior and information. The value of an extension element MUST be a pre-coordinated JSON object. For example, an extension on a notification could look like this: { context : [{ key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 } }, { key : extension , data : { user-timezone : +1:00 } } ] }","title":"Extensions"},{"location":"specification/STU2/#webhook-event-notification-request-details","text":"For webhook subscriptions, the Hub SHALL generate an HMAC signature of the payload (using the hub.secret from the subscription request) and include that signature in the request headers of the notification. The X-Hub-Signature header's value SHALL be in the form method=signature where method is one of the recognized algorithm names and signature is the hexadecimal representation of the signature. The signature SHALL be computed using the HMAC algorithm ( RFC6151 ) with the request body as the data and the hub.secret as the key. POST https://app.example.com/session/callback/v7tfwuk17a HTTP/1.1 Host: subscriber X-Hub-Signature: sha256=dce85dc8dfde2426079063ad413268ac72dcf845f9f923193285e693be6ff3ae json object","title":"webhook Event Notification Request Details"},{"location":"specification/STU2/#event-notification-request-example","text":"For both webhook and websocket subscriptions, the event notification content is the same. { timestamp : 2018-01-08T01:37:05.14 , id : q9v3jubddqt63n1 , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : patient-open , context : [ { key : patient , resource : { resourceType : Patient , id : ewUbXT9RWEbSj5wPEdgRaBw3 , identifier : [ { type : { coding : [ { system : http://terminology.hl7.org/CodeSystem/v2-0203 , value : MR , display : Medication Record Number } text : MRN ] } } ] } } ] } }","title":"Event Notification Request Example"},{"location":"specification/STU2/#event-notification-response","text":"The subscriber SHALL respond to the event notification with an appropriate HTTP status code. In the case of a successful notification, the subscriber SHALL respond with an HTTP 200 (OK) or 202 (Accepted) response code to indicate a success; otherwise, the subscriber SHALL respond with an HTTP error status code. The Hub MAY use these statuses to track synchronization state. In the case of a successful notification, if the subscriber is able to implement the context change, an HTTP 200 (OK) is the appropriate code; if the subscriber has successfully received the event notification, but has not yet taken action: an HTTP 202 (Accepted).","title":"Event Notification Response"},{"location":"specification/STU2/#webhook-event-notification-response-example","text":"For webhook subscriptions, the HTTP status code is communicated in the HTTP response, as expected. HTTP/1.1 200 OK","title":"webhook Event Notification Response Example"},{"location":"specification/STU2/#websocket-event-notification-response-example","text":"For websocket subscriptions, the id of the event notification and the HTTP status code is communicated from the client to Hub through the existing WebSocket channel, wrapped in a JSON object. Since the WebSocket channel does not have a synchronous request/response, this id is necessary for the Hub to correlate the response to the correct notification. Field Optionality Type Description id Required string Event identifier from the event notification to which this response corresponds. status Required numeric HTTP status code Numeric HTTP response code to indicate success or failure of the event notification within the subscribing app. Any 2xx code indicates success, any other code indicates failure. { id : q9v3jubddqt63n1 , status : 200 }","title":"websocket Event Notification Response Example"},{"location":"specification/STU2/#webhook-and-websocket-event-notification-sequence","text":"","title":"webhook and websocket Event Notification Sequence"},{"location":"specification/STU2/#event-notification-errors","text":"All standard events are defined outside of the base FHIRcast specification in the Event Catalog with the single exception of the infrastructural syncerror event. If the subscriber cannot follow the context of the event, for instance due to an error or a deliberate choice to not follow a context, the subscriber SHOULD communicate the error to the Hub in one of two ways. Responding to the event notification with an HTTP error status code as described in Event Notification Response . Responding to the event notification with an HTTP 202 (Accepted) as described above, then, once experiencing the error, send a syncerror event to the Hub. If the Hub receives an error notification from a subscriber, it SHOULD generate a syncerror event to the other subscribers of that topic. syncerror events are like other events in that they need to be subscribed to in order for an app to receive the notifications and they have the same structure as other events, the context being a single FHIR OperationOutcome resource.","title":"Event Notification Errors"},{"location":"specification/STU2/#event-notification-error-request","text":"","title":"Event Notification Error Request"},{"location":"specification/STU2/#request-context-change-parameters","text":"Field Optionality Type Description timestamp Required string ISO 8601-2 timestamp in UTC describing the time at which the syncerror event occurred. id Required string Event identifier, which MAY be used to recognize retried notifications. This id SHALL be unique and could be a UUID. event Required object A JSON object describing the event. See below .","title":"Request Context Change Parameters"},{"location":"specification/STU2/#event-notification-error-event-object-parameters","text":"Field Optionality Type Description hub.topic Required string The session topic given in the subscription request. hub.event Required string Shall be the string syncerror . context Required array An array containing a single FHIR OperationOutcome. The OperationOutcome SHALL use a code of processing . The OperationOutcome's details SHALL contain the id of the event that this error is related to as a code with the system value of https://fhircast.hl7.org/events/syncerror/eventid and the name of the relevant event with a system value of https://fhircast.hl7.org/events/syncerror/eventname . Other coding values can be included with different system values so as to include extra information about the syncerror . The OperationOutcome's diagnostics element should contain additional information to aid subsequent investigation or presentation to the end-user.","title":"Event Notification Error Event Object Parameters"},{"location":"specification/STU2/#event-notification-error-example","text":"POST https://hub.example.com/7jaa86kgdudewiaq0wtu HTTP/1.1 Host: hub Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/json { timestamp : 2018-01-08T01:37:05.14 , id : q9v3jubddqt63n1 , event : { hub.topic : 7544fe65-ea26-44b5-835d-14287e46390b , hub.event : syncerror , context : [ { key : operationoutcome , resource : { resourceType : OperationOutcome , issue : [ { severity : warning , code : processing , diagnostics : AppId3456 failed to follow context , details : { coding : [ { system : https://fhircast.hl7.org/events/syncerror/eventid , code : fdb2f928-5546-4f52-87a0-0648e9ded065 }, { system : https://fhircast.hl7.org/events/syncerror/eventname , code : patient-open } ] } } ] } } ] } }","title":"Event Notification Error Example"},{"location":"specification/STU2/#webhook-and-websocket-event-notification-error-sequence","text":"","title":"webhook and websocket Event Notification Error Sequence"},{"location":"specification/STU2/#request-context-change","text":"Similar to the Hub's notifications to the subscriber, the subscriber MAY request context changes with an HTTP POST to the hub.url . The Hub SHALL either accept this context change by responding with any successful HTTP status or reject it by responding with any 4xx or 5xx HTTP status. Similar to event notifications, described above, the Hub MAY also respond with a 202 (Accepted) status, process the request, and then later respond with a syncerror event in order to reject the request. In this case the syncerror would only be sent to the requestor. The subscriber SHALL be capable of gracefully handling a rejected context request. Once a requested context change is accepted, the Hub SHALL broadcast the context notification to all subscribers, including the original requestor. The requestor can use the broadcasted notification as confirmation of their request. The Hub reusing the request's id is further confirmation that the event is a result of their request.","title":"Request Context Change"},{"location":"specification/STU2/#request-context-change-request","text":"","title":"Request Context Change Request"},{"location":"specification/STU2/#request-context-change-parameters_1","text":"Field Optionality Type Description timestamp Required string ISO 8601-2 timestamp in UTC describing the time at which the event occurred. id Required string Event identifier, which MAY be used to recognize retried notifications. This id SHALL be uniquely generated by the subscriber and could be a UUID. Following an accepted context change request, the Hub MAY re-use this value in the broadcasted event notifications. event Required object A JSON object describing the event. See below .","title":"Request Context Change Parameters"},{"location":"specification/STU2/#request-context-change-event-object-parameters","text":"Field Optionality Type Description hub.topic Required string The session topic given in the subscription request. hub.event Required string The event that triggered this request for the subscriber, taken from the list of events from the subscription request. context Required array An array of named FHIR objects corresponding to the user's context after the given event has occurred. Common FHIR resources are: Patient, Encounter, ImagingStudy and List. POST https://hub.example.com/7jaa86kgdudewiaq0wtu HTTP/1.1 Host: hub Authorization: Bearer i8hweunweunweofiwweoijewiwe Content-Type: application/json { timestamp : 2018-01-08T01:40:05.14 , id : wYXStHqxFQyHFELh , event : { hub.topic : fdb2f928-5546-4f52-87a0-0648e9ded065 , hub.event : close-patient-chart , context : [ { key : patient , resource : { resourceType : Patient , id : 798E4MyMcpCWHab9 , identifier : [ { type : { coding : [ { system : http://terminology.hl7.org/CodeSystem/v2-0203 , value : MR , display : Medication Record Number } text : MRN ] } } ] } } ] } }","title":"Request Context Change Event Object Parameters"},{"location":"specification/STU2/#conformance","text":"The FHIRcast specification can be described as a set of capabilities and any specific FHIRcast Hub may implement a subset of these capabilities. A FHIRcast Hub declares support for FHIRcast and specific capabilities by exposing an extension on its FHIR server's CapabilityStatement as described below.","title":"Conformance"},{"location":"specification/STU2/#declaring-support-for-fhircast","text":"To support various architectures, including multiple decentralized FHIRcast hubs, the Hub exposes a .well-known endpoint containing additional information about the capabilities of that hub. A Hub's supported events, version and other capabilities can be exposed as a Well-Known Uniform Resource Identifiers (URIs) ( RFC5785 ) JSON document. Hubs SHOULD serve a JSON document at the location formed by appending /.well-known/fhircast-configuration to their hub.url . Contrary to RFC5785 Appendix B.4, the .well-known path component may be appended even if the hub.url endpoint already contains a path component. A simple JSON document is returned using the application/json mime type, with the following key/value pairs -- Field Optionality Type Description eventsSupported Required array Array of FHIRcast events supported by the Hub. websocketSupport Required boolean The static value: true , indicating support for websockets. webhookSupport Optional boolean true or false indicating support for webhooks. Hubs SHOULD indicate their support for web hooks. fhircastVersion Optional string STU1 or STU2 indicating support for a specific version of FHIRcast. Hubs SHOULD indicate the version of FHIRcast supported.","title":"Declaring support for FHIRcast"},{"location":"specification/STU2/#discovery-request-example","text":"","title":"Discovery Request Example"},{"location":"specification/STU2/#base-url-wwwhubexamplecom","text":"GET /.well-known/fhircast-configuration HTTP/1.1 Host: www.hub.example.com","title":"Base URL \"www.hub.example.com/\""},{"location":"specification/STU2/#discovery-response-example","text":"HTTP/1.1 200 OK Content-Type: application/json { eventsSupported : [ patient-open , patient-close , syncerror , com.example.researchstudy-transmogrify ], websocketSupport : true, webhookSupport : false, fhircastVersion : STU2 }","title":"Discovery Response Example"},{"location":"specification/STU2/#fhir-capability-statement","text":"To supplement or optionally identify the location of a FHIRcast hub, a FHIR server MAY declare support for FHIRcast using the FHIRcast extension on its FHIR CapabilityStatement's rest element. The FHIRcast extension has the following internal components: Component Cardinality Type Description hub.url 0..1 url The url at which an app subscribes. May not be supported by client-side Hubs.","title":"FHIR Capability Statement"},{"location":"specification/STU2/#capabilitystatement-extension-example","text":"{ resourceType : CapabilityStatement , ... rest : [{ ... extension : [ { url : http://fhircast.hl7.org/StructureDefinition/fhircast-configuration , extension : [ { url : hub.url , valueUri : https://hub.example.com/fhircast/hub.v2 } ] ] ...","title":"CapabilityStatement Extension Example"},{"location":"specification/STU2/#change-management-and-versioning","text":"","title":"Change Management and Versioning"},{"location":"specification/STU2/#event-maturity-model","text":"The intent of the FHIRcast Event Maturity Model is to attain broad community engagement and consensus before an event is labeled as mature, and to ensure that the event is necessary, implementable, and worthwhile to the systems that would reasonably be expected to use it. Implementer feedback should drive the maturity of new events. Diverse participation in open developer forums and events, such as HL7 FHIR Connectathons, is necessary to achieve significant implementer feedback. The below criteria will be evaluated with these goals in mind. Maturity Level Maturity title Requirements 0 Draft Event is correctly named and defined per the FHIRcast event template . 1 Submitted The above, and \u2026 Event definition is written up as a pull request using the Event template and community feedback is solicited from the community (e.g. the zulip FHIRcast stream](https://chat.fhir.org/#narrow/stream/179271-FHIRcast)). 2 Tested The above, and \u2026 The event has been tested and successfully supports interoperability among at least one Hub and two independent subscribing apps using semi-realistic data and scenarios (e.g. at a FHIR Connectathon). The github pull request defining the event is approved and published. 3 Considered The above, and \u2026 At least 3 distinct organizations recorded ten distinct implementer comments (including a github or jira issue, tracker item, or comment on the event definition page), including at least two Hubs and three subscribing apps. The event has been tested at two connectathons. 4 Documented The above, and \u2026 The author agrees that the artifact is sufficiently stable to require implementer consultation for subsequent non-backward compatible changes. The event is implemented in the standard FHIRcast reference implementation and multiple prototype projects. The Event specification SHALL: Identify a broad set of example contexts in which the event may be used with a minimum of three, but as many as 10. Clearly differentiate the event from similar events or other standards to help an implementer determine if the event is correct for their scenario. Explicitly document example scenarios when the event should not be used. 5 Mature The above, and ... The event has been implemented in production in at least two Hubs and three independent subscribing apps. An HL7 working group ballots the event and the event has passed HL7 STU ballot. 6 Normative The above, and ... the responsible HL7 working group and the sponsoring working group agree the material is ready to lock down and the event has passed HL7 normative ballot","title":"Event Maturity Model"},{"location":"specification/STU2/#event-maturity","text":"As each event progresses through a process of being defined, tested, implemented, used in production environments, and balloted, the event's formal maturity level increases. Each event has its own maturity level, which SHALL be defined in the event's definition and correspond to the Event Maturity Model .","title":"Event Maturity"},{"location":"specification/STU2/#change-log","text":"Changes made to an event's definition SHALL be documented in a change log to ensure event consumers can track what has been changed over the life of an event. The change log SHALL contain the following elements: Version: The version of the change Description: A description of the change and its impact For example: Version Description 1.1 Added new context FHIR object 1.0.1 Clarified workflow description 1.0 Initial Release ---","title":"Change Log"},{"location":"specification/STU2/#glossary","text":"session: an abstract concept representing a shared workspace, such as a user's login session across multiple applications or a shared view of one application distributed to multiple users. A session results from a user logging into an application and can encompass one or more workflows. topic: an identifier of a session client: subscribes to and requests or receives session events current context: data associated with a session at a given time and communicated between clients that share a session session event: a user initiated workflow event, communicated to clients, containing the current context","title":"Glossary"},{"location":"specification/STU2/#revision-history","text":"All changes to the FHIRcast specification are tracked in the specification's HL7 github repository . Further, issues may be submitted and are tracked in jira or (historically as) github issues . For the reader's convenience, the below table additionally lists significant changes to the specification.","title":"Revision History"},{"location":"specification/STU2/#20200715-significant-changes-as-part-of-the-stu2-publication-included","text":"Introduction of WebSockets as the preferred communication mechanism over webhooks. Creation of a FHIR CapabilityStatement extension to support Hub capability discovery. Additional, required information on syncerror OperationOutcome (namely communication of the error'd event's id and event name). Websocket WSS URL communicated in HTTP body, instead of Content-Location HTTP header. Subscribers should differentiate between immediately applied context changes and mere successfully received notifications with HTTP code responses of 200 and 202, respectively.","title":"20200715 Significant changes as part of the STU2 publication included:"}]}